C++ ist weit verbreitet zur Entwicklung von Apps

Gedanken zur App-Entwicklung:
Erstens die Apps für Blinde und Sehbehinderte.
Für Menschen mit Makuladegeneration, die noch vor zwei, drei Jahren einiges mehr gesehen haben und jetzt immer mehr Unterstützung brauchen, um nicht auf's Smartphone verzichten zu müssen.
Soweit ich sehen konnte, tut sich im IOS Bereich viel mehr.
Klar muss man für solche Apps bezahlen.
Da die Zielgruppe aber ihr ganzes Leben Rechnungen bezahlt hat, ist das kein Problem, denke ich.
Der andere weiße Fleck wären Apps, die zwar schon zig mal vorhanden sind, aber nicht so.
Ich denke immer wieder daran, was passiert, wenn z.B. meine geliebte Wecker App eines Tages zu veraltet ist und nicht mehr funktioniert?
Eine ganz simple App mit Naturgeräuschen (Vogelgezwitscher, plätscherndes Wasser Seeufer, eine Sommerwiese, Regen, Bauernhof, Gong).
Der Entwickler hat die Apppflege vor drei oder vier Jahren eingestellt.


App für das Handwerk: bspw. zum Vermessen von Räumen, Möbeln, usw. ?

Eine App zur Vernetzung von Clouds, Spritpreistracking E-Ladesäulen, Tankstellen- oder Blitzer-Ortung,radiosender-App, wireshark fürs Handy? oder siehe BMW-Devel_pdf
Umfrage-App für Fahrer, die im Konvoi unterwegs sind
KommunikationsApp mit Fahrern in anderen Autos

MIcrosoft V2X Plattform, cloudcar.com

Das unter dem ITEA Call 3 geförderte, europäische Forschungsprojekt APPSTACLE befasst sich mit der Etablierung einer offenen und gleichzeitig sicheren Plattform für die Verbindung zwischen Fahrzeugen und der Cloud. ... Neben Themenstellungen wie beispielsweise Kommunikationstechnologien für die nächste Generation des Mobilfunknetzes fokussiert sich APPSTACLE sehr stark auf die Entwicklung und Verbreitung des Open Source Connected Vehicle Software Ökosystems.

Um die Entwicklung dieses Ökosystems zu institutionalisieren und zu fördern wurde aus APPSTACLE heraus das Open Source Projekt Kuksa unter dem Dach der Eclipse Foundation gegründet.

Die Eclipse Kuksa In-Vehicle Plattform baut auf Automotive Grade Linux (AGL) auf, einem offenen Linux-Derivat für die Automobilwelt.
( https://github.com/eclipse/kuksa.invehicle/tree/master/agl-kuksa -  Therefore, this projects provides a building system that adds Kuksa's specific Bitbake layers on top of the original AGL. The scripts in this project help ease the process of building an AGL image by simple using a few commands. This project includes the yocto recipes found in meta-kuksa project.)
Auf Basis dieses Betriebssystems entsteht eine Laufzeitumgebung in der Kommunikationsdienste die Verbindung zur Cloud bereitstellen aber auch Zugriff zu den Fahrzeug-internen Systemen und Daten auf einem hohen Abstraktionsniveau ermöglicht wird....Darüber hinaus erweitert Eclipse Kuksa die von AGL bereitgestellte Applikations-Laufzeitumgebung. Zu diesen Erweiterungen gehören beispielsweise maßgeschneiderte Apps für die Kuksa-Umgebung, aber auch Elemente wie Intrusion-Detection-, oder Device-Management-Komponenten zum Herunterladen, Installieren und Verwalten von Anwendungen (Apps).


Die Eclipse Kuksa Cloud-Plattform hat sich zum Ziel gesetzt eine möglichst flexible und leistungsfähige Laufzeitumgebung für die Cloud zu schaffen. Hierzu nutzt und integriert Eclipse Kuksa zahlreiche existierende Open Source Komponenten, vorzugsweise aus der Eclipse IoT Welt. Hierzu gehört beispielsweise Eclipse HONO, welches den einheitlichen Zugang zu allen angebotenen Diensten und Ressourcen ermöglicht.

Im Bereich des Device Managements setzt Eclipse Kuksa auf das Open Source Software Roll-Out System Eclipse hawkBit. Dieses ermöglicht die Verwaltung von Softwareständen der In-Vehicle-Plattform selbst sowie das Installations- und Updatemanagement von Apps. Daran angeschlossen ist ein in Eclipse Kuksa entwickelter App-Store (siehe Bild 5), welcher dem Besitzer eines Fahrzeugs ermöglicht Apps auszuwählen und seinem Fahrzeug zuzuweisen.

Die Eclipse Kuksa IDE dient der einfacheren Entwicklung von Apps für die In-Vehicle sowie Cloud-Plattform. Hierzu beschreibt die Eclipse Che Cloud IDE die Basis und ermöglicht die Bereitstellung der IDE ohne dass der Nutzer diese auf einem lokalen Rechner installieren muss.

Die Kuksa IDE ist Docker-basiert und erlaubt sowohl private als auch geteilte Workspaces. 


---> auf wiki.automotivlinux.org gibt es alles zum Thema embedded linux/yocto/App-Entwicklung usw. 
---> jaxenter.de kuksa , Artikel der gute Übersicht über AGL und kuksa liefert



14.09.:

https://docs.automotivelinux.org/docs/en/guppy/getting_started/reference/getting-started/getting-started-welcome.html

What is AGL:
Automotive Grade Linux is a collaborative, open source project that brings together automakers, suppliers, and technology companies for the purpose of building Linux-based, open source software platforms for automotive applications that can serve as de facto industry standards.
AGL address all software in the vehicle: infotainment, instrument cluster, heads-up-display (HUD), telematics, connected car, advanced driver assistance systems (ADAS), functional safety, and autonomous driving.


durchlesen des Build-Prozesses von AGL:
1.) AGL-Images basieren auf yocto, man kann vorgefertige Images für verschiedene Boards( Raspi 2,3 etc.) und QucikEmulator QEmu downloaden.
Falls kein native Unix sondern eine VM zum Einsatz kommt, kann man sich einen Docker-Container downloaden in dem die Build-Umgebung eingereichtet ist.
(benötigter Speicher mind. 50GB)

2.) AGL Software und Soruce-Code zum Builden mit bitbake vom gerrit-server downloaden und ausführen

3+4.) das Steup-Skript aglsetup.sh über aufgelistete features (pentesting, TFTP-Boot, debugging-tools usw.) auf meine Wünsche zuschneiden.
Das Skript erzeugt zwei primäre Konfigurationdateien bblayer.conf und local.conf und legt sie im conf-Ordner ab. Mit local.conf customizen zB download-Ordner, tmp_dir festlegen usw.

5.) Running bitbake mit build-target, das target kann Raspi 3/4, Emulator (QEMU,VirtualBox) o.Ä. sein. Ratsam ist es die vorgefertigten Images zu verwenden.


Overview Homescreen: 
Startbildschirm nach Booten des AGL-Images mit Screenshots von Demo-Apps, Maps für die Navigation-App müssen extra installiert werden.


setting up docker (confer to cloud-project):
The container you set up here is configured for Yocto Project and AGL. This configuration means you do not have to have a native Linux build host. You can also use a system running Microsoft or MacOS.
set up a workspace according to the instructions of the website.
You can build a docker-image on your own or download a pre-built docker image. Docker engine converts image into container and run it.
Once you have a new container that is based on the AGL Worker Image, you can copy the SDK Installer to the container and then install the target-specific AGL SDK. 
With an SDK installed, you are able to develop AGL applications using the SDK.


Developing an application:
Steps: 
1.) Download or build the image you are going to run on the hardware device.
2.) Download or build the Software Development Kit (SDK) you use to create your application.
3.) Create bootable media using your image.
4.) Boot your hardware device with the media.
5.) Prepare your environment so that you can develop an application. You can develop the application using XDS or using a stand-alone SDK.
6.) Create your application.
7.) Deploy the application to your hardware with either SDCard, nfs, SSH etc.
8.) Debug the application using gdb and/or core-dumps

zu 2.) 
The Software Development Kit (SDK) allows you to use your build host to develop an application specific to your target hardware. SDKs are installed onto your build host by running an SDK installer file (*.sh). If you are developing an application for a board supported by the AGL software, you might want to just download a pre-built SDK installer file otherwise you need to build the SDK installer file.

zu 5.)
You can use the X(cross) Development System (XDS), or you can use a stand-alone Software Development Kit (SDK). The preferred method is to use XDS.
To use XDS, you need to install server and client parts and then use XDS to install the SDK. 
--> refer to:  https://docs.automotivelinux.org/docs/en/guppy/devguides/reference/xds/part-1/client-part.html


15.09.:
---- Developers guide ----

https://docs.automotivelinux.org/docs/en/guppy/devguides/agl-layers-overview.html
AGL uses layers designed to be compatible with the Yocto Project and the OpenEmbedded Project (OE).
Three important layers: 
met-agl ( Minimal set of software needed to create an AGL distribution used to boot a system. AGL profiles are built on top of this minimal set of software)
meta-agl-demo (Provides a reference or demo platform and applications for the AGL Distribution) 
meta-agl-devel (Contains components under development or being tested )

Many many sublayers with a bunch of features provided, too many to go into detail, but important is the meta-hmi-framework layer for infotainment.



----Microservices-----
You can develop Microservices on your native Linux machine quickly by taking advantage of RPM or Debian packages. The following figure and list overview the Microservice Native Development process.

1.) Verify your build host (Make sure you have a native Linux host. --> maybe Container possible?)
2.) Download and Install AGL Packages (Download and install the near-zero packages from the OBS)
3.) Install Binder Daemon (The daemon allows you to connect applications to required services and is part of the AGL Application Framework (AFM))
4.) Get your source files (Clone the helloworld-service binding repository. You also need to make sure you have some other required packages to build that specific binding)
5.) Build and run your service natively (Build and test your binding on your Linux host using native tools. if succesful optional tools can be brought in)

zu 3.)
The Application Framework Binder Daemon (afb-daemon), which is a part of the AGL Application Framework, provides a way to connect applications to required services.

---> microservice test in agl_microservices ausprobieren,
https://docs.automotivelinux.org/docs/en/guppy/devguides/reference/5-building-and-running-service-natively.html
installed packages libjson-c-dev, cfg-pkg

to do:  erstmal mehr über Microservices lernen


25.11.
Docker-container für AGL-build-umgebung downloaden (50GB Speicher benötigt)
refer to: https://github.com/automotive-grade-linux/docs-agl/blob/master/docs/getting-started/setup-sdk-environment.md

statt ~/devel verwende ich ~/Schreibtisch/agl_microservice/build, aber ich habe einen Softlinks erstellt von devel und ssd

ABER:
Ich versuche die Build-Umgebung selbst aufzubauen, hilft dann später sicher auch beim Verständnis.

AGL-Account: Username: roland089 PW: Muenchen_089

Info:
Yocto is a set of tools, templates and methods for building Linux systems from scratch. Automotive Grade Linux is a complete Linux distribution designed for in-car systems. 
It includes base system layers from Poky and OpenEmbedded, board support layers for popular automotive platforms, and quite a lot more.
All of these layers are assembled into a built Linux system by Bitbake, the build tool of the Yocto Project, based on the instructions in the recipes inside the layers.


29.11.:
Die IDE für das App-Developing nennt sich Kuksa App IDE und baut auf eclipse CHE auf. 
Eclipse CHE ist eine Brwoseranwendung, die Zugang zu einem Container ermöglicht, innerhalb dem man Apps builden kann. 
Das gesamte Auto-Betriebssystem ist AGL, und auf dieser Basis läuft über den AppStore/HawkBit dann die App. 
Es gibt auch Docker-Images zu AGL, brauch ich diese zum Build in CHE ?

https://www.eclipse.org/kuksa/documentation/

Download von maven: version: 
Apache Maven 3.6.0
Maven home: /usr/share/maven
Java version: 11.0.9.1, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64
Default locale: de_DE, platform encoding: UTF-8
OS name: "linux", version: "4.15.0-123-generic", arch: "amd64", family: "unix"

Versuch Container zu starten mit: 
sudo docker run -ti -v ~/.m2:/home/user/.m2 -v `pwd`:/home/user/che-build -v `pwd`:/projects eclipse/che-dev:6.10.0 sh -c "mvn -e clean install"
 -t, --tty                            Allocate a pseudo-TTY
  -i, --interactive                    Keep STDIN open even if not attached
  -v, --volume list                    Bind mount a volume

das Ausführen mit sudo docker run -ti -v ~/.m2:/home/user/.m2 -v `pwd`:/home/user/che-build -v `pwd`:/projects eclipse/che-dev:6.10.0 klappt --> fehler bei marven ?!
--> mit sudo sh -c "mvn -e clean install" ein Schritt weiter, jetzt Fehler fehlendes Projekt/falscher Ordner

bloß mit pull: image gespeicher unter var/lib/docker/overlay2

for AGL-image: https://agl-docs.readthedocs.io/en/master/#0_Getting_Started/2_Building_AGL_Image/0_Build_Process/

AGL Webinar am 1.12.
buy UART to USB-cable for booting stage of raspi very recommended form cli output
western/wayland for graphica ouput/ compositor
systemd-log and western-log file needed for booting on new hardware
latest stable relaese: dunfell from April 2020
meta-rapsberrypI add layer bb.conf to project, agl should work out of box

check hira.automotivelinux.org/brwose/SPEC-2465


best used Raspi 4b wtih 4GB or 8GB RAM 


prebuilt Kernel for Qemu: https://download.automotivelinux.org/AGL/snapshots/master/latest/qemux86-64/deploy/images/qemux86-64/bzImage
prebuilt image for qemu: https://download.automotivelinux.org/AGL/snapshots/master/latest/qemux86-64/deploy/images/qemux86-64/agl-demo-platform-crosssdk-qemux86-64.ext4.xz



aus: https://raw.githubusercontent.com/automotive-grade-linux/docs-sources/guppy/docs/app-framework/index.md
oder zum read-only: https://github.com/automotive-grade-linux/docs-agl/blob/master/docs/app-framework/index.md
(evtl andere Seiten im Archiv enthalten? )

app development: # AGL Application Framework

This page summarizes all materials related to AGL Application Framework

## Source Code

The current code of AGL App-Framework is stored on AGL Code Repository. It's divided in the following projects:

* [src/app-framework-main](https://gerrit.automotivelinux.org/gerrit/gitweb?p=src%2Fapp-framework-main.git;a=summary) Main services
* [src/app-framework-binder](https://gerrit.automotivelinux.org/gerrit/gitweb?p=src%2Fapp-framework-binder.git;a=summary): Binder Daemon
* [src/app-framework-demo](https://gerrit.automotivelinux.org/gerrit/gitweb?p=src%2Fapp-framework-demo.git;a=summary) Demos

## Building AGL with Application Framework support

The Application Framework can be added easily to an AGL build using the feature 'agl-appfw-smack'.

Typically, the following command can be called to initialize AGL build:

    # meta-agl/scripts/aglsetup.sh -m porter agl-appfw-smack agl-demo agl-devel
    ...
    # bitbake agl-demo-platform

## Documentation

Technical documentation is maintained in the source code and should be browsable with the [upcoming AGL documentation system](https://github.com/automotive-grade-linux/docs-agl)

Temporarily, a static documentation has been made in PDF format:

* [Introduction to Application Framework](http://iot.bzh/download/public/2016/appfw/01_Introduction-to-AppFW-for-AGL-1.0.pdf)
* [AppFW Core Documentation](http://iot.bzh/download/public/2016/appfw/02_Documentation-AppFW-Core-2.0.pdf)
* [Privileges Management](http://iot.bzh/download/public/2016/appfw/03-AGL-AppFW-Privileges-Management.pdf)

Some extra guides are also available in PDF format:

* [Build your 1st AGL Application](http://iot.bzh/download/public/2016/sdk/AGL-Devkit-Build-your-1st-AGL-Application.pdf)
* Applications Templates are available on [github:iotbzh/app-framework-templates](https://github.com/iotbzh/app-framework-templates)

### Bindings Examples

Some bindings are  available to quickstart new projects:

* GPS - see [github:iotbzh/af-gps-binding](https://github.com/iotbzh/af-gps-binding/blob/master/src/af-gps-binding.c)
* OpenXC Reader - see [github:iotbzh/txc-demo](https://github.com/iotbzh/txc-demo/blob/master/binding/txc-binding.c)
* CPU/Memory stats - see [github:iotbzh/txc-demo](https://github.com/iotbzh/txc-demo/blob/master/binding/stat-binding.c)
* Radio - see [gerrit:src/app-framework-binder](https://gerrit.automotivelinux.org/gerrit/gitweb?p=src/app-framework-binder.git;a=tree;f=bindings/radio;hb=master)
* Audio - see [gerrit:src/app-framework-binder](https://gerrit.automotivelinux.org/gerrit/gitweb?p=src/app-framework-binder.git;a=tree;f=bindings/audio;hb=master)

The list is not exhaustive. ***Please add other bindings here !***

### Demos

* Simple HTML5 Demos apps (ported from Tizen) on [github:iotbzh/afm-widget-examples](https://github.com/iotbzh/afm-widget-examples)
* Installable package with [TXC Demo Application](http://iot.bzh/download/public/2016/afb-demos/txc-demo_0.1.wgt)
* Applications available in [gerrit:app-framework-demo](https://gerrit.automotivelinux.org/gerrit/gitweb?p=src/app-framework-demo.git;a=summary)

## Presentations

* Oct 16 - [Application Security Model - Status Update](http://iot.bzh/download/public/2016/genivi/CyberSecurity-Genivi-Q42016-Fulup-IoTbzh.pdf)
* Sept 16 - [Building Applications with AGL Framework](http://iot.bzh/download/public/2016/genivi/CyberSecurity-Genivi-Q42016-Fulup-IoTbzh.pdf) - Also visible in [PDF version](http://iot.bzh/download/public/2016/publications/build-agl-application-AMM-Munich-2016.pdf)
* Feb 16 - [HTML5 Apps for Automotive Systems](http://iot.bzh/download/public/2016/publications/HTML5_Applications_for_Automotive_Systems.pdf)
* Feb 16 - [Application & Security Framework Proposal AGL 2.0](http://iot.bzh/download/public/2016/security/Security-Proposal-AGL20-Fulup.pdf)
* Jan 16 - [Security Architecture Proposal](http://iot.bzh/download/public/2016/security/Security-Architecture-AGL20.pdf)

## History

### Motivation for rewriting the App. Framework

To get the background and motivation on why Application Framework has been rewritten:

* [Tizen Security: lessons learnt](http://iot.bzh/download/public/2015/tizen-security-lessons-learnt-initial.pdf)
* [this discussion](https://lists.linuxfoundation.org/pipermail/automotive-discussions/2016-October/002749.html)
* [Linux Automotive Security](http://iot.bzh/download/public/2016/security/Linux-Automotive-Security-v10.pdf)

### Comparison/Relationship with Tizen

                              Tizen           AGL
                              ----------------------------------
    App/OS isolation           yes            yes
    Container option           no             possible
    Native App                 partial*       yes
    HTML5 App                  yes            yes
    Cloud App                  No             yes
    Unified API (HTLM/Native)  No             yes
    service as App**           No             yes
    Adding API    ***          core           core or App
    Devel model                bespoke        Standard Web




1.12.:
https://docs.huihoo.com/automotivelinux/docs/getting_started/en/dev/reference/setup-sdk-environment.html


This tutorial explains how to quickly setup an environment suitable to building and packaging AGL Applications using the SDK and a Docker container. The current tutorial has been tested on Linux, but may work with a few adjustments for Windows or MacOS.
1.step: First install docker on your host, if not already done. General instructions for Linux are available on the Docker Site.

2.step: setup persistent workspace: Docker images are pre-configured to use a particular uid:gid to enable the use of OpenEmbedded build system. They provide a dedicated user account devel which belong to uid=1664(devel) gid=1664(devel). (Note: password is devel)

The script ‘create_container’ presented below instantiates a new container and shares some volumes with the host:

    /xdt (the build directory inside the container) is stored in ~/ssd/xdt_$ID (specific to instance ID)
    /home/devel/mirror is stored in ~/ssd/localmirror_$ID (specific to instance ID)
    /home/devel/share => points to ~/devel/docker/share (shared by all containers)

Those shared volumes with the host needs the proper permissions to be accessible from the contained environment.

mkdir ~/ssd ~/devel
chmod a+w ~/ssd ~/devel

Note:
To gain access from your host on files created within the container, your host account requires to be added to group id 1664.


Step 3: install the “Generic AGL Worker” Docker Image: 

A pre-built image is available on automotivelinux download public site and can be used directly.
First, download and load the image in your local Docker instance:

"$ wget -O - https://download.automotivelinux.org/AGL/snapshots/sdk/docker/docker_agl_worker-3.0.tar.xz | sudo docker load; sudo docker images;"
      REPOSITORY                              TAG                 IMAGE ID            CREATED             SIZE
      docker.automotivelinux.org/agl/worker   3.0                 42009148bc03        6 days ago          926.9 MB
      jenkins                                 latest              55720d63e328        5 weeks ago         711.9 MB
      hello-world                             latest              c54a2cc56cbb        5 months ago        1.848 kB

( Rebuilt image:  The Docker image for AGL Worker can be rebuilt using the scripts published here docker-worker-generator.)
Start image: Then, use the ‘create_container’ script to start a new, fresh container based on the AGL Worker image:

Note:

    The password for the id ‘devel’ inside the docker image is ‘devel’.

git clone https://git.automotivelinux.org/AGL/docker-worker-generator;
cd docker-worker-generator;
./contrib/create_container 0;
docker ps;
    CONTAINER ID        IMAGE                                       COMMAND                  CREATED             STATUS              PORTS                                                                                        NAMES
    4fb7c550ad75        docker.automotivelinux.org/agl/worker:3.0   "/usr/bin/wait_for_ne"   33 hours ago        Up 33 hours         0.0.0.0:222


Step 4: install the AGL SDK for your target: 
Here, we assume that we just built an image ‘agl-demo-platform-crosssdk’ using the Yocto build procedure documented in the Getting Started section of the documentation.
So we can copy such file to the shared volume. (shared volume like vol_tmp in database)

For example, we could have built the SDK from another worker container listening with SSH on port 2223:

create_container 1;
ssh -p 2223 devel@mybuilder.local;
... [ prepare build environment ] ...
bitbake agl-demo-platform-crosssdk;
... [ build happens in /xdt/build ] ...
cp /xdt/build/tmp/deploy/sdk/poky-agl-glibc-x86_64-agl-demo-platform-crosssdk-cortexa15hf-neon-toolchain-3.0.0+snapshot.sh ~/share;

then login to the first “SDK Container” and install the SDK:

ssh -p 2222 devel@mysdk.local;
install_sdk ~/share/poky-agl-glibc-x86_64-agl-demo-platform-crosssdk-cortexa15hf-neon-toolchain-3.0.0+snapshot.sh;

Step 5: build your application:

First, you must source the SDK environment you wish to use (you MUST repeat this step each time you open a new shell):
source /xdt/sdk/environment-setup-<your_target>

You’re then ready to go: get the sources, run the builds …

git clone <your repo for your app>;
cd <your app>;
cmake; make; make package;



source for application-devel-sw: https://gerrit.automotivelinux.org/gerrit/gitweb?p=src%2Fapp-framework-main.git;a=summary

< aktuell sind auf der Maschine noch 71 GB frei sagt "df -H" >

3.12.
app development laut https://agl-docs.readthedocs.io/en/master-ivory/0_Getting_Started/6_%20Developing_an_Application%20/5_Get_Ready_to_Create_Your_Application/

1.) Download or build the image you are going to run on the hardware device and 2.) download or build the Software Development Kit (SDK) you use to create your application.
3.) Create bootable media using your image. 4.) Boot your hardware device with the media.
5.) Prepare your environment so that you can develop an application. You can develop the application using XDS or using a stand-alone SDK.
6.) Create your application and 7.) Deploy the application to your hardware and at last 8.) Debug the application if necessary.

for 
1.)	https://agl-docs.readthedocs.io/en/master-ivory/0_Getting_Started/6_%20Developing_an_Application%20/1_Download_or_Build_Your_Image/
You can either build that image from scratch or, if you are going to use hardware supported by AGL, you can download a ready-made image from the AGL Download Website site.
For example Quick EMUlator (QEMU): QEMU is a generic, open source machine emulator and virtualizer. You can use QEMU as your "hardware" when you run an image built for the emulator. AGL supports QEMU images for ARM 32/64bit and Intel 64bit devices.
As an example, suppose you want to download the 64-bit ARM-based image that you can emulate using QEMU. Go to the AGL Download Website (https://download.automotivelinux.org/AGL/release/) and follow these links:
icefish -> 9.0.0 -> qemuarm64 -> deploy -> images -> qemuarm64 ; From the list, you could download the Image-qemuarm64.bin Kernel and the agl-demo-platform-crosssdk-qemuarm64.ext4.xzImage file.


2.) https://agl-docs.readthedocs.io/en/master-ivory/0_Getting_Started/6_%20Developing_an_Application%20/2_Download_or_Build_Your_SDK_Installer/
The Software Development Kit (SDK) allows you to use your build host to develop an application specific to your target hardware. SDKs are installed onto your build host by running an SDK installer file (*.sh).
You must either download a pre-built installer file for your SDK or build an installer file. If you are developing an application for a board supported by the AGL software, you might want to just download a pre-built SDK installer file. If your hardware is not supported by AGL, you need to build the SDK installer file with "bitbake agl-demo-platform-crosssdk" and targetboard specifics.
The SDK installer file (*.sh) is placed in the build directory. Assuming your top-level workspace is ~/workspace_agl, here is an example location and SDK installer file:
~/workspace_agl/build/tmp/deploy/sdk/poky-agl-glibc-x86_64-agl-demo-platform-crosssdk-aarch64-toolchain-8.0.0.sh

For a look at the SDK installers for supported boards, go to the AGL Download Website. From there, you can explore to find the SDK installer you want to download. As an example, consider using a pre-built SDK to develop applications suited for a 64-bit ARM-based board that you want to emulate using QEMU. Furthermore, you are using the 8.0.0 "Halibut" release of the AGL software. Follow these links:
halibut -> 8.0.0 -> qemuarm64 -> deploy -> sdk
From the list, you download the *.sh file, which is an installation script for the SDK. Running the SDK installer script installs the SDK onto your build host.
SDK installation scripts have long names that reflect the platform specifics. For example, the following file installs the SDK given the specifics earlier:
poky-agl-glibc-x86_64-agl-demo-platform-crosssdk-aarch64-toolchain-8.0.0.sh


3.) 
In order to test an application, your device must be running the image and, of course, the application. To run the image, you need to create a bootable image that can be launched from an external device such as an SD card or USB stick.
The following list overviews the process. 1.)Insert your media into the appropriate build host interface (e.g. USB port). 2.)Determine the device name of your portable media (e.g. sdb).
3.) Write out the image using e.g. etcher , bmaptool or dd.
For example: "Deploying the AGL Demo Image" for emulation images, 
"Booting the Image on Raspberry Pi for Raspberry Pi 4 board

4.)	https://agl-docs.readthedocs.io/en/master-ivory/0_Getting_Started/6_%20Developing_an_Application%20/4_Boot_the_Image_on_the_Board/

You must have your image booted and running on your target device at some point before deploying your application for testing.
Steps exist for booting the following devices:
    Intel Devices: See the "Booting the Image on the Target Device" section.
    QEMU: See the "Deploying the AGL Demo Image" section.
    R Car Starter Kit: See the "Booting the Image Using a MicroSD Card" section.
    Raspberry PI: See the "Booting the Image on Raspberry Pi" section.


5.)	https://agl-docs.readthedocs.io/en/master-ivory/0_Getting_Started/6_%20Developing_an_Application%20/5_Get_Ready_to_Create_Your_Application/
Multiple methods exist that allow you to create your application. You can use the X(cross) Development System (XDS), or you can use a stand-alone Software Development Kit (SDK). The preferred method is to use XDS which allows you to build, deploy, and execute personal projects on a target either through the XDS dashboard or the XDS command line.
If you do not want to use XDS, you can install the SDK by itself. For information, see the "App development SDK for Intel Minnowboard" Wiki article. You can also visit the Yocto Project Application Development and the Extensible Software Development Kit (eSDK) Manual.
---- !!! NOTE: The AGL Project is not compatible with the eSDK. You must use the Standard SDK !!!! ---

6.)	https://agl-docs.readthedocs.io/en/master-ivory/0_Getting_Started/6_%20Developing_an_Application%20/6_Create_and_Build_the_Application/
A simple application you can experiment with is the standard "hello world" application. For information on how to get set up and then clone the Git repository for the "Hello World" application, see the "Get the Source Files" section.
Key to developing an application suited for your target hardware is the Standard Software Development Kit (SDK).You can develop your application a number of ways. The following list describes several:
Build the Application Using a Stand-Alone SDK: Nothing prevents you from using a Standard SDK completely outside of the AGL Project development environment to build your application. Here are a couple of methods:

Install Docker and create a container that has your SDK installed. The container is a stable environment where you can build applications. See the "Setting Up a Docker Container" section for information on how to install Docker and create a container that has your SDK installed.

Use the popular Eclipse IDE configured to work with the Yocto Project. See the "Developing Applications Using Eclipse" section in the Yocto Project Application Development and Extensible Software Development Kit (eSDK) Manual.

Using Qt Creator / qmake and want to use the same .pro / .pri file to build for desktop or AGL? Put AGL-specific definitions inside a linux-oe-* block in your .pro and .pri files, e.g.: ``` linux-oe-* { PKGCONFIG += qlibwindowmanager qtappfw DEFINES += AGL QMAKE_LFLAGS += "-Wl,--hash-style=gnu -Wl,--as-needed" load(configure) qtCompileTest(libhomescreen)

 config_libhomescreen {
     CONFIG += link_pkgconfig
     PKGCONFIG += homescreen
     DEFINES += HAVE_LIBHOMESCREEN
 }

 DESTDIR = $${OUT_PWD}/../package/root/bin

} ```


7.) 	https://agl-docs.readthedocs.io/en/master-ivory/0_Getting_Started/6_%20Developing_an_Application%20/7_Deploy_the_Application_to_the_Board/
Many options exist for controlling your target and copying your compiled application to the target. Details are target-specific and cannot be explained in detail here.
Suffice it to say that if you compile your application on your build host and you have an image running on your target hardware, you must employ some method to copy the application to the target. Several general methods exist:
    Write the application to a storage device that both the build host and the target hardware support. This could be an SD card or a flash drive. Be sure to format the drive as FAT32 to eliminate file ownership and permission issues.

    Remotely mount the target's file system on the build host with the Network File System (NFS) or Samba.
    Commit compiled code from the build host to a shared repository and update the target from that repository.
    Use remote commands from a host over a network, such as scp (i.e. secure copy).
    You can set up your build environment to leverage a procedure's application template (app-template). An app-template is an application framework that contains CMake macros that abstract deploying the application. For example, with a proper build environment, you can run the following to deploy your application:
    $ make widget-target-install

    NOTE: The previous command uses scp to copy and install the widget to a pre-defined target board.

Once you have the application copied to the target, it must provide a way to initiate operating system commands. To initiate operating system commands, you can do one of the following:
    Connect a keyboard and display directly to the target.
    Use ssh from a network-connected host to run commands on the target remotely.
    Use a network for communication between the build host and the target. This method works nicely when the build host and the target hardware are geographically apart.


8.)	https://agl-docs.readthedocs.io/en/master-ivory/0_Getting_Started/6_%20Developing_an_Application%20/8_Debug_the_Application/	

Three methods exist:
    Use gdb on the target.
    Use Core Dumps if you have set the agl-devel feature. Core Dumps are obviously more suited for post-mortem analysis. For features, see the "Initializing Your Build Environment" topic.
	NOTE: Core Dumps are available only with the "Flunky Flounder" release (i.e. 6.x).
    Use XDS remotely, which is based on gdb and gdbserver. See the "Using the XDS Command Line" topic for more information.
In order to use third-party debugging tools, you need to include the tools in the target image. You gain access to the tools by enabling the agl-devel feature when you run the aglsetup.sh script as described in the "Initializing Your Build Environment" section.

----------important archive: https://iot.bzh/download/public/  with explanation to several topics like agl app development ---------------- 
------------   https://docs.automotivelinux.org/en/master/#0_Getting_Started/2_Building_AGL_Image/5_1_x86_Emulation_and_Hardware/ -------------



finally started testing in path ~/Schre../aglmic../build
downloaded compressed prebuilt image and kernel into this folder
command "dpkg --print-architecture" yields amd64

installed qemu and vinagre
prebuilt image extrahiert:	xz -v -d agl-demo-platform-crosssdk-qemux86-64.ext4.xz

launch qemu with vinagre:
( sleep 5 && vinagre --vnc-scale localhost ) > /tmp/vinagre.log 2>&1 & qemu-system-x86_64 -device virtio-net-pci,netdev=net0,mac=52:54:00:12:35:02 -netdev user,id=net0,hostfwd=tcp::2222-:22 -drive file=agl-demo-platform-crosssdk-qemux86-64.ext4,if=virtio,format=raw -show-cursor -usb -device usb-tablet -device virtio-rng-pci -snapshot -vga virtio -vnc :0 -soundhw hda -machine q35 -cpu kvm64 -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt -enable-kvm -m 2048 -serial mon:vc -serial mon:stdio -serial null -kernel bzImage -append 'root=/dev/vda rw console=tty0 mem=2048M ip=dhcp oprofile.timer=1 console=ttyS0,115200n8 verbose fstab=no'

Fehler:
Could not access KVM kernel module: No such file or directory
qemu-system-x86_64: failed to initialize KVM: No such file or directory

---> sudo modprobe kvm-intel gives = modprobe: ERROR: could not insert 'kvm_intel': Operation not supported:  go in the BIOS and enable Virtualization.
virtualization-error: https://bbs.archlinux.org/viewtopic.php?id=187825
https://bbs.archlinux.org/viewtopic.php?id=231209

dmesg zeigt "kvm: no hardware support" ---> eine QEMU KVM innerhalb existierender VM klappt evtl nicht ?!
Erstmal application so builden und dann Gedanken machen zum Testen, PC aus Arbeit etc.
"


7.12.
das SDK installiert, jedes Mal bei verwenden muss ich es sourcen:
$ source /home/gast/Schreibtisch/agl_microservice/sdk/environment-setup-corei7-64-agl-linux

Durchlesen von https://iot.bzh/download/public/2016/sdk/AGL-Devkit-Build-your-1st-AGL-Application.pdf

wahrscheinlich meine Anwendung: 
• Hybrid application (composed of a backend and a frontend) contains at the same time (an) Application-specificBinding(s) as backend(s) and a User Interface (Native, HTML5, QML ...)as a frontend.
It allows developers to provide capabilities through Bindings, and an end-userexperience through the UI. 
For instance, a GPS Binding giving devicelocalization status, and a HTML5 GPS frontend displaying it on the screen.

An App/service-folder contains:
•CMakeLists.txt: our templates use CMake for automatic configuration andbuilding. In your projects, you can of course adapt templates to use yourpreferred solution (Autoconf, Scons...).
•gulpfile.js:these are some kind of “Makefiles” used by the Gulp tool. gulp is often used in HTML5 projects as it is able to execute all needed tasks to processweb source files (JavaScript, CSS, HTML templates, images...) and create a directory suitable for deployment on a website.
•package.json: this is a Node.js file used to specify prjoject dependencies.Basically, gulp and gulpfile.js will download and install all packages mentionedhere to assemble the HTML5 project during the “npm install” step.
•config.xml(.in): XML configuration file required by the application framework.This file is mandatory for an AGL Application to be installed and launched by theframework.
•export.map: for Bindings (a.k.a. shared libraries) only, this file must contain alist of exported API verbs. Only the symbols specified in this export file will beaccessible at runtime. So export.map should contain all verbs you intend toprovide in your Binding.

~/Schreibtisch/agl_microservice/sdk/DEPRECATED_app-framework-templates-master/templates/service/build$ cmake ..
-- Toolchain file defaulted to '/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/share/cmake/OEToolchainConfig.cmake'
-- The C compiler identification is GNU 9.3.0
-- The CXX compiler identification is GNU 9.3.0
-- Check for working C compiler: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/x86_64-agl-linux/x86_64-agl-linux-gcc
-- Check for working C compiler: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/x86_64-agl-linux/x86_64-agl-linux-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/x86_64-agl-linux/x86_64-agl-linux-g++
-- Check for working CXX compiler: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/x86_64-agl-linux/x86_64-agl-linux-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found PkgConfig: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/pkg-config (found version "0.29.2") 
-- Checking for modules 'json-c;afb-daemon'
--   Found json-c, version 0.13.1
--   Found afb-daemon, version 10.90.0
-- Creation of xxxxxx-service for AFB-DAEMON
-- Configuring done
-- Generating done
-- Build files have been written to: /home/gast/Schreibtisch/agl_microservice/sdk/DEPRECATED_app-framework-templates-master/templates/service/build

This produced a “xxxxxx-service.wgt” package. Let us copy it to the target: scp xxxxxx-service.wgt root@$BOARDIP:~/
( analog Vorgehen für native application, html application etc.

Then log in to target-board and install widget, for example via ssh
install: afm-util install xxxxxx-service.wgt

All templates have been installed through the application framework, so we will runthem with the afm-util tool (only exception: Native application)
When the afm-user-daemon process receives a request to start an application, it reads the application's “config.xml” configuration file located in its specific directory
(/usr/share/afm/applications/<appname>/<version>/config.xml). Depending on thespecified MIME type (or the default Linux MIME type in none was given), 
it then starts(an) appropriate process(es).Final behavior is controlled by the global “/etc/afm/afm-launch.conf” config file.

Run a service: afm-util run xxxxxx-service@0.1
confirm it is running:# afm-util ps ----------- or # ps -ef | grep afb

11.12:
https://iot.bzh/download/public/2017/SDK/AppFw-Documentation-v3.1.pdf
Foreword to document:
This document describes what we intend to do. It may happen that our current implementation and the content of this document differ.In this case, this document is right, implementation is wrong.
afm-system-daemon and afm-user-daemon provide infrastructure for (un-)installing, launching, terminating, pausing and resuming applications in a multi user secure environment.
A third component exists in the framework, the binder  afb-daemon. The binder provides the easiest way to provide secured API for any tier.

< Smack (full name: Simplified Mandatory Access Control Kernel) is a Linux kernel security module that protects data and process interaction from malicious manipulation 
using a set of custom mandatory access control (MAC) rules >

Framework-Components are:
•SECURITY-MANAGER: in charge of  setting  Smack contexts  and rules,  of setting groups, and, of creating initial content of CYNARA rules for applications.
•CYNARA: in charge of handling API access permissions by users and by applications.
•D-Bus: in charge of checking security of messaging. The usual D-Bus securityrules are enhanced by CYNARA checking rules.
•afm-system-daemon: in charge of installing and uninstalling applications.
•afm-user-daemon: in charge of listing applications, querying application details, starting, terminating, pausing, resuming applications and their instances for a given user context.
•afb-binder: in charge of serving resources and features through an HTTPinterface.
•afm-main-binding: This binding allows applications to use the API of the AGL framework.

The security framework refers to the security model used to ensure security and tothe tools that are provided for implementing that model.It also includes features of reporting 
using audit features and by managinglogs and alerts.
The application framework (afw) manages the applications: (un-)installing, starting,pausing, listing. The afw uses the security model/framework to ensure the security
and the privacy of the applications that it manages.The afw must be compliant with the underlying securitymodel/framework. But it should hide it to the applications.


Security Model: https://wiki.tizen.org/Security/Tizen_3.X_Overview
In theory, the security framework/model is an implementation detail that should not impact the layers above the application framework.
The application framework on top of the security framework provides the componentsto install and uninstall applications and to run it in a secured environment.The goal is to manage applications and to hide the details of the security framework to the applications.For the reasons explained in introduction, we did not use the application framework of Tizen as is but used an adaptation of it.


Daemons  afm-user-daemon  and  afm-system-daemon  handle   applications   life. Understand that they will manage operations like:
•installation	•uninstallation	•running	•suspend	•inventory
In addition, they ensure that operations use the security framework as needed and that applications are executed in the correct context.
D-Bus is in charge of transmitting orders to the appropriate daemon depending upon D-Bus destination.

User sessions are listening with the destination name org.AGL.afm.[user|system] at the object of path /org/AGL/afm/[user|system] on the interface org.AGL.afm.[user|system] for the below detailed members for the afm-system-daemon: 	•install•uninstall
And for afm-user-daemon:	•runnables•detail•start•once•terminate•pause•resume•runners•state•install•uninstall

D-Bus is mainly used for signaling and discovery.
examples using dbus-send, here to install an application from a widget file:
dbus-send --session --print-reply --dest=org.AGL.afm.system /org/AGL/afm/system org.AGL.afm.system.install 'string:"/tmp/appli.wgt"
And here, to query data on installed applications that can be run:
dbus-send --session --print-reply --dest=org.AGL.afm.user /org/AGL/afm/user org.AGL.afm.user.runnables string:true

The D-Bus interface is defined by:
•DESTINATION: org.AGL.afm.[user|system]
•PATH: /org/AGL/afm/[user|system]
•INTERFACE: org.AGL.afm.[user|system]


16.12.
afm-system-daemon  and  afm-user-daemon  are launched as systemd services attached to system and user respectively. Normally, service files are located at 
/lib/systemd/system/afm-system-daemon.service  and /lib/systemd/user/afm-user-daemon.service

At start afm-user-daemon scans the directories containing applications and load in memory a list of avaliable applications accessible by current user.When afm-system-daemon installs or removes an application.On success it sends the signal org.AGL.afm.system.changed. When receiving such a signal, afm-user-daemon rebuilds its applications list.
afm-user-daemon provides the data it collects about applications to its clients.
afm-user-daemon launches application by using systemd. Systemd builds a secure environment for the application before starting it.
Once launched, running instances of application receive a run-id that identify them. To make interface with systemd evident, the pid is the run-id.
The command line tool afm-util uses dbus-send to send orders to afm-user-daemon. This small scripts allows to send command to afm-user-daemon either interactively at shell prompt or scriptically.


---- Widgets ----

widgets are ZIP files that can be signed and whose content is described by the file. There is no tool for unpacking a widget. For doing such operation, you can use thecommand unzip.
The command wgtpkg-info opens a widget file, reads its config.xml file and displays its content in a human readable way. To sign a widget, you need a private key and its certificate.
Packaging can be done using the command zip but we provide the tool wgtpkg-pack that may add checking.

The steps for writing a widget:
1.) make your application - 2.) create its configuration file config.xml 3.) sign it 4.)pack it

Applications can be installed in different places: the system itself, extension device. On a phone applications are typically installed on the sd card.
This translates to: •/usr/applications: system wide applications •/opt/applications: removable applications.
From here those paths are referenced as: "APPDIR".The main path for applications is: APPDIR/PKGID/VER, with PKGID: package id, VER:Version
All files are installed as user "afm" and group "afm". All files have rw(x) for user and r-(x) for group and others.This allows every user to read every file.

The file config.xml describes important data of the application to the framework:
•the unique identifier and name of the app •the type of the application •the icon of the application •the permissions linked to the application •the services and dependancies of the application
The file MUST be at the root of the widget and MUST be case sensitively name config.xml

The configuration file /etc/afm/afm-unit.conf defines how to create systemd units for widgets. 
Known types for the type of content are: 
•text/html: HTML application, content.src designates the home page of theapplication
•application/x-executable:   Native   application,   content.src   designates   therelative path of the binary
•application/vnd.agl.service: AGL service, content.src is not used.Adding more types is easy, it just need to edit the configuration file afm-unit.conf

The integration of the framework with systemd mainly consists of creating the systemd unit files corresponding to the need and requirements of the installed widgets. 
This configuration file named afm-unit.conf installed on the system with the path/etc/afm/afm-unit.conf describes how to generate all units from the config.xml configuration files of widgets. 



---- Overview AFB-Daemon-------

The name afb-daemon stands for Application Framework Binder Daemon ( = the binder).Afb-daemon is in charge to bind one instance of an application to the AGL frameworkand AGL system.
The binder afb-daemon serves multiple purposes:
1.) It acts as a gateway for the application to access the system	 2.)It acts as an HTTP server for serving files to HTML5 applications
3.) It allows HTML5 applications to have native extensions subject to security enforcement for accessing hardware resources or for speeding parts of algorithm

One of the most interesting aspect of using the binder afb-daemon is the ability to runapplications remotely. This feature is possible because the binder afb-daemonimplements native web protocols.


----Application example ---
C applications can use afb-daemon binder through a websocket connection.The library libafbwsc is provided for C clients that need to connect with an afb-daemon binder.
The program afb-client-demo is the C example that use libafbwsc library. Sourcecode is available here https://git.automotivelinux.org/src/app-framework-binder/plain/src/
Current implementation relies on libsystemd and file descriptors. This model might bereview in the future to support secure sockets and get rid of libsystemd dependency.
Applications communicate with their private binder(afb-daemon) using a network connection or potentially any other connection channel. While the current version does not yet implement Unix socket, this feature might be added in the near future.Developers need to be warned that HTTP protocol is a none connected protocol and that using HTTP socket connection to authenticate clients is not supported.For this reason, the binder should authenticate the application by using a shared secret. The secret is named "token" and the identification of client is named "session".The examples token-websock.qml  and  afb-client  are   demonstrating   how authentication and sessions are managed.

Exchanging tokens:
At application start, AGL framework communicates a shared secret to both binder andclient application. This initial secret is called the "initial token".
For each of its client application, the binder manages a current active token forsession management. This authentication token can be use to restrict the access to some binding's methods.
The token must be included in URI request on HTTP or during websockets connectionusing parameter token or x-afb-token.


Application for framework-binder: https://git.automotivelinux.org/src/app-framework-binder/plain/README.md
sources, software, libs etc.: https://git.automotivelinux.org/src/

later: agl-service-bluetooth unter: git clone "https://gerrit.automotivelinux.org/gerrit/apps/agl-service-bluetooth"

afb-daemon unter: git clone "https://gerrit.automotivelinux.org/gerrit/src/app-framework-binder" bzw. https://git.automotivelinux.org/src/app-framework-binder

libmicrohttpd: use the MHD_USE_ERROR_LOG option ---> Fehler beim Ausführen von ./configure liegt an den exportierten AGL-SDK-Umgebungsvariablen, neue Konsole öffnen und ausführen.
Nach "./configure", "make" und "sudo make install" kommt folgender output: 
 /bin/mkdir -p '/usr/local/lib'
 /bin/bash ../../libtool   --mode=install /usr/bin/install -c   libmicrohttpd.la '/usr/local/lib'
libtool: install: /usr/bin/install -c .libs/libmicrohttpd.so.12.56.0 /usr/local/lib/libmicrohttpd.so.12.56.0
libtool: install: (cd /usr/local/lib && { ln -s -f libmicrohttpd.so.12.56.0 libmicrohttpd.so.12 || { rm -f libmicrohttpd.so.12 && ln -s libmicrohttpd.so.12.56.0 libmicrohttpd.so.12; }; })
libtool: install: (cd /usr/local/lib && { ln -s -f libmicrohttpd.so.12.56.0 libmicrohttpd.so || { rm -f libmicrohttpd.so && ln -s libmicrohttpd.so.12.56.0 libmicrohttpd.so; }; })
libtool: install: /usr/bin/install -c .libs/libmicrohttpd.lai /usr/local/lib/libmicrohttpd.la
libtool: install: /usr/bin/install -c .libs/libmicrohttpd.a /usr/local/lib/libmicrohttpd.a
libtool: install: chmod 644 /usr/local/lib/libmicrohttpd.a
libtool: install: ranlib /usr/local/lib/libmicrohttpd.a
libtool: finish: PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/sbin" ldconfig -n /usr/local/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /usr/local/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the '-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the 'LD_RUN_PATH' environment variable
     during linking
   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to '/etc/ld.so.conf'



in gleicher Konsole die Schritte für afb-daemon folgen:
sudo apt-get install libmagic-dev libjson-c-dev uuid-dev libsystemd-dev libssl-dev;
mkdir build; cd build;
cmake -DCMAKE_INSTALL_PREFIX=$HOME/local ..
make install
cd src
./afb-daemon --version

Test: .${AFB_DAEMON_DIR}/build/src/afb-daemon --help

zum starten via "afb-daemon" folgenden Befehl ausführen: sudo cp build/src/afb-daemon /usr/sbin

Test: 
$ AFB_DAEMON_DIR="/home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder"
~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ afb-daemon --port=1234 --token='' --ldpaths=${AFB_DAEMON_DIR}/build --workdir=/tmp --rootdir=${AFB_DAEMON_DIR}/test


nun die Umgebungsvariablen sourcen, und tutorial compilieren mit Include des headers <afb/afb-binding.h>: gcc -fPIC -shared tuto-1.c -o tuto-1.so $(pkg-config --cflags-only-I afb-daemon) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include

for binding-writing:   app-framework-binder/docs/afb-binding-wiritng.md
https://github.com/iotbzh/webdocs-sample/blob/master/site/docs/architecture/en/dev/reference/ap/binder/afb-bindings-writing.md
http://old-docs.automotivelinux.org/docs/en/halibut/apis_services/reference/af-binder/afb-application-writing.html


zum Debuggen:
klappt nur mit AGL_DEVEL=ON, (in meinem Fall war das wohl standardmäßig auf OFF gestellt)
Example:

```bash
$ AFB_DEBUG_BREAK=main-entry AFB_DEBUG_WAIT=start-load,start-exec afb-daemon ....
```

This tells to ***afb-daemon*** to break at the point **main-entry** and to
wait at the points **start-load** and **start-exec**.

The items of the list can be separated using comma, space, tab or new-line.

The break/wait points are, in the order of their occurrence:

- main-entry: before decode arguments
- main-args: before daemon setup
- main-start: before starting jobs
- start-entry: before initialisation of sessions and hooks
- start-load: before load and pre-init of bindings
- start-start: before init of bindings
- start-http: before start of http server
- start-call: before execution of requests of the command line (option --call)
- start-exec: before execution of child preocees


< ldd: list dependencies shared libraries, *.so OR objdump -p ../app-framework-binder/build/src/afb-daemon >

auch bei Aufruf der vorinstallierten bindings tuto-1.so zB kommt der gleiche Fehler, also liegt nicht an meinem Programm
vergleiche Unterschied zu Deafult-testprogramm: app-framework-binder/build/bindings/tutorials/CMakeFiles/tuto-app1.dir


Richtiger Befehl:
(aus: https://gerrit.automotivelinux.org/gerrit/gitweb?p=src%2Fapp-framework-binder.git;hb=refs%2Fchanges%2F98%2F22198%2F5;f=docs%2Fafb-binding-writing.md)

~/Schreibtisch/agl_microservice/afb-daemon/selftest$ afb-daemon --binding ./binding-tut1.so --port=3333 --token='' 
ERROR: connection to events for httpd failed [/home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-hsrv.c:461,afb_hsrv_start]
ERROR: starting of httpd failed [/home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:396,start_http_server]

ich springe aus afb-main in afb-hsrv.c während http_init, genauer:
	if (!afb_hsrv_add_handler(hsrv, rootapi, afb_hswitch_websocket_switch, main_apiset, 20)) return 0;  ---> trifft nicht zu und ich lande in Zeile 388 von afb-main

danach land ich bei: init_http_server (hsrv=0x5555557ce320) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:323
dann: init_http_server (hsrv=0x5555557ce320) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:327

dann: start_http_server () at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:394
nach paar Sprüngen angelangt bei: fdev_systemd_create (eloop=0x5555557ce900, fd=-1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/fdev-systemd.c:61

fdev_unref (fdev=0x5555557ceca0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/fdev.c:72

weiter gehts: fdev_systemd_create (eloop=0x5555557ce900, fd=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/fdev-systemd.c:72
afb_hsrv_start (hsrv=0x5555557ce320, connection_timeout=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-hsrv.c:459 und in Zeile 461 ist dann finito

---> MHD_error log

normalerweise läuft main-afb in src/jobs über

normaler Verlauf: 
afb_args_parse (argc=6, argv=0x7fffffffc0f8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-args.c:1068
main (argc=<optimized out>, argv=0x7fffffffc0f8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:962
main (argc=<optimized out>, argv=0x7fffffffc0f8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:986
jobs_start (allowed_count=3, start_count=0, waiter_count=100, start=0x5555555677c0 <start>, arg=0x0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:868


auch umschreiben der binding-tuto1.c datei hilft nicht, gleicher httpd fehler ---> evtl: 
gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/selftest$ sudo systemctl restart httpd
[sudo] Passwort für gast: 
Failed to restart httpd.service: Unit httpd.service not found.
gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/selftest$ ps aux | grep httpd
gast     17701  0.0  0.0  14788  1036 pts/1    S+   18:58   0:00 grep --color=auto httpd
gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/selftest$ sudo ps aux | grep httpd
gast     17708  0.0  0.0  14788  1100 pts/1    S+   18:58   0:00 grep --color=auto httpd
gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/selftest$ sudo systemctl restart apache2
Failed to restart apache2.service: Unit apache2.service not found.

auf dem CLoud-Laptop funktioniert anscheinend httpd, jedenfalls gibt es bei starten über 
~/Schreibtisch/agl_microservice/afb-daemon/selftest$ afb-daemon --binding ./binding-tut1.so --port=3333 --token=''

nach installieren von sudo apt-get install apache2 klappt es!

zum Nachschauen von afb Klassen, Funktionen usw.: 	https://docs.redpesk.bzh/docs/en/master/developer-guides/reference-v4/func-afb-event.html

afb-daemon --binding ./tuto-1.so --port 3333 --token ''
```

At this point, afb-daemon has started, it loaded the binding tuto-1.so and now
listen at localhost on the port 3333.

Testing using **curl**:

```bash
$ curl http://localhost:3333/api/tuto-1/hello
{"jtype":"afb-reply","request":{"status":"success","info":"hello world","uuid":"1e587b54-900b-49ab-9940-46141bc2e1d6"}}


die Verbindung klappt aber es wird nicht das richtige Programm ausgeführt. Ich mache mal mit tutorial2 weiter, evtl wird es mit der Zeit klarer!

tutorial2 funktioniert mit Verwendung von afb-client-demo in anderem terminal.
Terminal1:	afb-daemon --binding ./binding-tut2.so --port 3333 --token ''
Terminal2:./afb-client-demo -H localhost:3333/api?token=toto
binding-tut2 login {"user":"rolando","password":"please"}
ON-REPLY 1:  binding-tut2/login: OK
{
  "jtype":"afb-reply",
  "request":{
    "status":"success"
  }
}
binding-tut2 action {"subscribe": true}
ON-REPLY 2:binding-tut2/action: OK
{
  "response":{
    "subscribe":true
  },
  "jtype":"afb-reply",
  "request":{
    "status":"success"
  }
}

< zusätzlich in 3.terminal mit afb-client-demo aufgerufen und login/logut vollzogen: >
ON-EVENT binding-tut2/login:
{
  "event":"binding-tut2\/login",
  "data":"joboy",
  "jtype":"afb-event"
}
ON-EVENT binding-tut2/logout:
{
  "event":"binding-tut2\/logout",
  "data":"joboy",
  "jtype":"afb-event"
}


1.1.21
https://agl-gsod-2020-demo-mkdocs.readthedocs.io/en/latest/flounder/apis_services/reference/af-binder/afb-events-guide/
OR:	https://github.com/growupboron/AGL-GSoD-2020-Demo-MkDocs/tree/master/docs

Events: Signaling agents ( = bindings) are services that send events to any clients that are subscribed to receive it. The sent events carry any data.

Subscribing: the action that makes a client able to receive data from a signaling agent. Subscription must create resources for generating the data or deliver the data to the client.
When a client subscribes for data, the agent must:

    1.) Check that the subscription request is correct.
    2.) Establish the computation chain of the required data (if not already done).
    3.) Create a named event for the computed data (if not already done).
    4.) Ask the framework to establish the subscription to the event for the request.
    5.) Optionally give indications about the event in the reply to the client.

The framework only uses the event (not its name) for (un-)subscription and pushing and integrates libsystemd and its event loop. 
Within the framework, libsystemd is the standard API/library for bindings expecting to setup and handle I/O, timer or signal events.

Within the AGL framework, a signaling agent is a binding that has an API prefix. This prefix is meant to be unique and to identify the binding API. 
The names of the events that this signaling agent creates are automatically prefixed by the framework, using the API prefix of the binding.

The binder (afb-daemon, app. FW. binder-daemon) provides the way to connect applications to the services that it needs, but here daemon is not a background task.

A binding adds one API to the binder.An API is a set of verbs that can be called using either REST over HTTP or a kind of JSON RPC.
Bindings are either dynamically loaded libraries in the binder process or remote services running on the same/other host
When acting as an HTTP server, the binder treats the language settings of the HTTP requests to provide internationalized content as specified by widget specifications. - The APPLICATION

An application connects to the binder to get access to the API that it provides or to get its HTTP services to access resources.

5.1.:
Tic-tac-toe-example beginnen( refer: https://iot.bzh/download/public/2016/appfw/02_Documentation-AppFW-Core-2.0.pdf, https://github.com/iotbzh/webdocs-sample/blob/master/site/docs/architecture/en/dev/reference/ap/binder/afb-bindings-writing.md )

das tic-tac-toe-Binding funktioniert, die Argumenteneingabe muss evtl per JSON-format geschehen

tictactoe level {"boardid":"194","level":"3"}
ON-REPLY 3:tictactoe/level: OK
{
  "jtype":"afb-reply",
  "request":{
    "status":"success"
  }
}
ON-EVENT tictactoe/board:
{
  "event":"tictactoe\/board",
  "data":"level",
  "jtype":"afb-event"
}


mit zwei Clients:
tictactoe play
ON-REPLY 2:tictactoe/play: OK
{
  "response":{
    "boardid":194,
    "level":3,
    "board":[
      " ",
      " ",
      " ",
      "X",
      " ",
      " ",
      " ",
      "X",
      "O"
    ],
    "history":[
      7,
      8,
      3
    ]
  },
  "jtype":"afb-reply",
  "request":{
    "status":"success"
  }
}
ON-EVENT tictactoe/board:
{
  "event":"tictactoe\/board",
  "data":"play",
  "jtype":"afb-event"
}



tickets zum Durchstöbern:https://jira.automotivelinux.org/browse/

7.1.:
to do: wait in tictactoe einbauen und events einlesen --> wait klappt nicht, kein header-file für waiter-struct
events: hat zu tun mit subscribing und unsubscribing, sprich um Beanchrichtigungen wenn irgendwas geschehen sollte im Sinne einer verschickten Nachricht über das System etc.
https://agl-docs.readthedocs.io/en/master-ivory/4_APIs_and_Services/4.3_Application_Framework_Binder/4_Binder_events_guide/Binder_events_guide/

note: der binder (afb-daemon) verbindet ein binding (tictactoe) mit dem System/Applications, Afb-daemon is in charge to bind one instance of an application to the AGL frameworkand AGL system.


application framework daemons: afm-user-daemon  and  afm-system-daemon handle applications' life, they will manage operations like: install uninstall, run,suspend etc.
afm-system-daemon  and  afm-user-daemon  are launched as systemd services attached to system and user respectively. Normally, service files are located at
/lib/systemd/system/afm-system-daemon.service  and  /lib/systemd/user/afm-user-daemon.service

D-Bus is in charge of transmitting orders to the appropriate daemon depending upon D-Bus destination. The afm daemons take their orders from the session instance of D-Bus. 
The use of D-Bus is great because it allows to implement discovery and signaling.


8.1.
At start afm-user-daemon scans the directories containing applications and loads into memory a list of avaliable applications accessible by current user.
afm-user-daemon launches application by using systemd. Systemd builds a secure environment for the application before starting it.Once launched, running instances of application receive a runid that identify them. To make interfaces with systemd evident, the pid is the runid.
Un-/Installing applications: If the client own the right permissions,  afm-user-daemon  delegates that task to afm-system-daemon

The command line tool afm-util uses dbus-send to send orders to afm-user-daemon, example: afm-util install wgt (install the wgt file) •afm-util uninstall id (remove the installed widget of id)

writing a widget:
1.make your application		2.create its configuration file config.xml	3.sign it	4.pack it

Applications can be installed in different places: the system itself or extension device.On a phone application are typically installed on the sd card.
This translates to:	•/usr/applications: system wide applications	•/opt/applications: removable applications
From here those paths are referenced as: "APPDIR".The main path for applications is: APPDIR/PKGID/VER.
•APPDIR is as defined above
•PKGID is a directory whose name is the package identifier
•VER is the version of the package MAJOR.MINOR

All files are installed as user "afm" and group "afm". All files have rw(x) for user and r-(x) for group and others. The data of a user are in its directory and are labeled 
by the security-manager using the labels of the application

The file config.xml describes important data of the application to the framework:
•the unique identifier/name/type/icon of the application
•the permissions linked to the application and services and dependancies of the application

The file MUST be at the root of the widget and MUST be case sensitively name "config.xml"

The configuration file afm-unit.conf installed on the system with the path /etc/afm/afm-unit.conf describes how to generate all units from the config.xml configuration files of widgets. 

Next:
following sample application
only afm-system-daemon running as process on qemu, error when running selfinstalled widgets, but maybe example-widgets are too old.

write own widget:
helloworld-native-application depends on agl-service-helloworld (API
'helloworld') but it's not installed by default in AGL images. So, you must grab
it from here: https://git.automotivelinux.org/apps/agl-service-helloworld
and install it too.

When I tried to reproduce your issue, I also found a minor bug in
helloworld-native-application (mess up with log file). Please use my latest
commit from today:
https://github.com/iotbzh/helloworld-native-application/commit/fe2c9589d6018176b08af9afadb489f86d534091

So finally, it works as expected. Here's a capture of my test session:

Build the 2 widgets from an AGL docker container where SDK is installed:
-------------------------------------------------------
# . /xdt/sdk/environment-setup-aarch64-agl-linux
# git clone https://git.automotivelinux.org/apps/agl-service-helloworld
# agl-service-helloworld/autobuild/agl/autobuild package
# scp agl-service-helloworld/build/*.wgt root@h3ulcb:/tmp/
# git clone https://github.com/iotbzh/helloworld-native-application.git
# helloworld-native-application/autobuild/agl/autobuild package
# scp helloworld-native-application/build/*.wgt root@h3ulcb:/tmp/
-------------------------------------------------------

Then install on the board:
-------------------------------------------------------
$ ssh root@h3ulcb
root@h3ulcb:~# afm-util install /tmp/agl-service-helloworld.wgt
{
  "added":"agl-service-helloworld@1.0-7a5a796"
}
root@h3ulcb:~# afm-util install /tmp/helloworld-native-application.wgt
{
  "added":"helloworld-native-application@0.1-fe2c958"
}
-------------------------------------------------------

And finally run the native app, which calls the verb 'ping' on helloworld API
every 10s and appends the json result to a log file in /tmp.
-------------------------------------------------------
root@h3ulcb:~# afm-util start helloworld-native-application@0.1-fe2c958
8323
root@h3ulcb:~# tail -f /tmp/helloworld.log


last step: klonen von git clone --recursive https://github.com/iotbzh/helloworld-native-application.git

Änderung in helloworld-native-application.c 	von fprintf(fd,result) auf fprintf(fd,"%s", result);  jetzt klappt kompilieren
helloworld-native-application.wgt unter build, auf target-board kopieren und installieren.
Vor Ausführung aber unter liegendes service/binding installieren: https://git.automotivelinux.org/apps/agl-service-helloworld/tree/helloworld-skeleton/helloworld-service-binding.c?id=403c69ccf1b2696275c3f3409eac7df525a26dbc

or: helloworld_service.c im gleichen Ordner

gcc -fPIC -shared hello_world_service.c -o hello_world_service.so $(pkg-config --cflags-only-I afb-daemon) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include
afb-daemon --binding ./hello_world_service.so --port=3333 --token='' 


afb-client-demo -H localhost:3333/api?token=
helloworld
verb missing, bad line: 
helloworld ping
ON-REPLY 1:helloworld/ping: OK
{
  "response":0,
  "jtype":"afb-reply",
  "request":{
    "status":"success",
    "info":"Ping count = 0"
  }
}
helloworld ping
ON-REPLY 2:helloworld/ping: OK
{
  "response":1,
  "jtype":"afb-reply",
  "request":{
    "status":"success",
    "info":"Ping count = 1"
  }
}


------> hello_world_service  ping klappt, mit gleichem Ansatz das auf target-board kopieren und ausporbieren --> klappt auf target-board, obwohl Fehlermeldung erscheint.
Jetzt die Application zerlegen und in meine gewünschten App umformen!

13.1.
Beim selbstständigen kompilieren von helloworld-native-app.c treten Fehler folgender Art auf:
/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/afb/afb-wsj1.h:157: Warnung: undefinierter Verweis auf »afb_wsj1_reply_s«

gcc -Wall -g3  helloworld-native-application.c -o hello_world_service $(pkg-config --cflags-only-I afb-daemon) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include


Compile-Vorgang Schritt für Schritt durcharbeiten:
1.) Preprocessing is the first pass of any C compilation. It processes include-files, conditional compilation instructions and macros. ( das gibt keinen Fehler aus)
2.) Compilation is the second pass. It takes the output of the preprocessor, and the source code, and generates assembler source code. (erzeugt assembler-File, hellowroldapp.s ohne Fehler)
3.) Assembly is the third stage of compilation. It takes the assembly source code and produces an assembly listing with offsets. The assembler output is stored in an object file. 
( "gcc -Wall -g3 -c" führt zu einer kleinen Warnung aber keinen Fehler, output file helloworldapp.o)
4.) Linking is the final stage of compilation. It takes one or more object files or libraries as input and combines them to produce a single (usually executable) file. In doing so, it resolves references to external symbols, assigns final addresses to procedures/functions and variables, and revises code and data to reflect new addresses (a process called relocation).


Fehler: ld bedeutet dynamic library missing, mit "gcc -Wall -g3 helloworld_natapp.c -o helloworld_natapp -ljson-c -lsystemd" fallen Fehler zu json und sd-event schonmal raus
The binder provides a development library named libafbwsc (stands for lib AGL Framework Binder WebSocket Client). --> einbinden klappt nicht
ALSO: der Fehler liegt an lib afbwsc, die irgendwie nicht eingebunden werden kann obwohl extra manuell angegeben
eignetlich klappt es mit: gcc -Wall -g3 helloworld_natapp.c -o helloworld_natapp $(pkg-config --libs libafbwsc) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include


Jetzt das service und hello-world-native.c nachvollziehen, und service starten, mit afb-demo-client nachspielen!
Note: The program afb-client-demo is the C example that use libafbwsc library. Sourcecode is available here src/afb-client-demo.c

Build möglich mit:
gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ export LIBRARY_PATH=/home/gast/local/lib/pkgconfig:/home/gast/local/lib:$LIBRARY_PATH
gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ ldconfig
gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ gcc -v -Wall -g3 helloworld_natapp.c -o helloworld_natapp $(pkg-config --cflags --libs afb-daemon libafbwsc) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include

neuer Fehler:
gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ ./helloworld_natapp
./helloworld_natapp: error while loading shared libraries: libafbwsc.so.1: cannot open shared object file: No such file or directory

gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ export LD_LIBRARY_PATH=/home/gast/local/lib:$LD_LIBRARY_PATH

gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ ./helloworld_natapp
connection to 127.0.0.1:(null)/api?token=CLUTTER_IM_MODULE=xim failed: Invalid argument

Eeeeeees klaaaaaaaaaaaaaappppppppppt:
Terminal 1: 	afb-daemon --binding ./hello_world_service.so --port=1234 --token=''

Terminal 2:	gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ ./helloworld_natapp 1234 ''

Und zum Test:	gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ ls -ll /tmp
insgesamt 44
-rw------- 1 gast gast    0 Jan  1 13:25 config-err-LfBBOT
-rw-r--r-- 1 gast gast 1008 Jan 13 17:53 helloworld.log


14.1.
Debugging um Code besser zu verstehen:

			Breakpoint 1, main (ac=3, av=0x7fffffffc368, env=0x7fffffffc388) at helloworld_natapp.c:63
			63	{


			bei contiune bleibt code immer an "sd_event_run(loop, 30000000);" stehen

afb_ws_client_connect_wsj1 leads to:
gdb: 			afb_ws_client_connect_wsj1 (eloop=0x555555757290, uri=0x7fffffffc080 "127.0.0.1:1234/api?token=", itf=0x555555756010 <itf>, closure=0x0)
     			at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws-client.c:318

leading to gdb:  	parse_uri (path=<optimized out>, service=<optimized out>, host=<optimized out>, uri=<optimized out>)
    			at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws-client.c:268

und zurück:		main (ac=3, av=0x7fffffffc368, env=0x7fffffffc388) at helloworld_natapp.c:84
			(gdb) p wsj1
			$2 = (struct afb_wsj1 *) 0x5555557578d0

next:	create open logfile "fd = open (logFile, O_RDWR|O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)"

dann:			(gdb) s
			call (api=0x555555555462 "helloworld", verb=0x555555555458 "ping", object=0x55555555545d "true") at helloworld_natapp.c:143

			(gdb) p wsj1
			$4 = (struct afb_wsj1 *) 0x5555557578d0
			(gdb) p *wsj1
			$5 = {refcount = 1, genid = 0, itf = 0x555555756010 <itf>, closure = 0x0, tokener = 0x555555757940, ws = 0x555555757df0, messages = 0x0, calls = 0x0, mutex = pthread_mutex_t = 				{Type = Normal, Status = Not acquired, Robust = No, Shared = No, Protocol = None}}


			(gdb) p itf
			$6 = {on_hangup = 0x0, on_call = 0x555555555134 <on_call>, on_event = 0x0}
			
			(gdb) s
			afb_wsj1_call_s (wsj1=0x5555557578d0, api=0x555555555462 "helloworld", verb=0x555555555458 "ping", object=0x55555555545d "true", on_reply=0x5555555551d2 <on_reply>, 				closure=0x555555757570)
    			at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:561

			(gdb) s
			wsj1_call_create (closure=<optimized out>, on_reply=<optimized out>, wsj1=<optimized out>) 
			at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:206

			(gdb) p tag
			$9 = 0x7fffffffbf50 "helloworld/ping"		[note: tag consists of API/verb]

			"make call":	(gdb) s
					wsj1_send_issot (i1=<optimized out>, t1=<optimized out>, wsj1=<optimized out>, o1=<optimized out>, s2=<optimized out>, s1=<optimized out>)
    					at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:530

			(gdb) s
			call (api=0x555555555462 "helloworld", verb=0x555555555458 "ping", object=0x55555555545d "true") at helloworld_natapp.c:153
			(gdb) p rc
			$12 = 0


			main (ac=3, av=0x7fffffffc368, env=0x7fffffffc388) at helloworld_natapp.c:98
			(gdb) s
			ON-REPLY 1:helloworld/ping: OK
			{
			  "response":5,
			  "jtype":"afb-reply",
			  "request":{
			    "status":"success",
			    "info":"Ping count = 5"
			  }
			}

			------------------------ inside event loop  (former /tmp/helloworld.log wasn't deleted hence the count starts at 5)--------



---> immer ON-Reply als Antwort. Evtl mal itf ändern, weil das als Argument mitgegeben wird in afb_ws_client ... ---> Fehler, achten auf richtige helloworld_natapp.c

Test with on_hangup

helloworld_natapp: /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:98: afb_wsj1_create: Assertion `itf->on_call' failed.


example for html5-applications:
https://gerrit.automotivelinux.org/gerrit/gitweb?p=src/app-framework-demo.git;a=tree;f=afb-client
https://gerrit.automotivelinux.org/gerrit/gitweb?p=src/app-framework-demo.git;a=tree;f=afm-client

C applications can use afb-daemon binder through a websocket connection. The library libafbwsc is provided for C clients that need to connect with an afb-daemon binder.
The program afb-client-demo is the C example that uses the libafbwsc library. Current implementation relies on libsystemd and file descriptors.
(This model may be reviewed in the future to support secure sockets and get rid of libsystemd dependency )

Applications should understand sessions and token management when interacting with afb-daemon binder.
Applications communicate with their private binder (afb-daemon) using a network connection or any other potential connection channel.
While the current version does not yet implement Unix socket, this feature might be added in the near future.
Developers need to be warned that HTTP protocol to authenticate clients is not supported. For this reason, the binder should authenticate the application by using a shared secret.
The secret is named "token" and the identification of client is named "session.” The examples token-websock.qml and afb-client are demonstrating how authentication and sessions are managed.
At application start, AGL framework communicates a shared secret to both binder and client application. This initial secret is called the "initial token".

Example:
afb-daemon --port=1234 --token=123456 [...]

First, connects with the initial token, 123456:

$ curl http://localhost:1234/api/auth/connect?token=123456
{
  "jtype": "afb-reply",
  "request": {
     "status": "success",
     "token": "0aef6841-2ddd-436d-b961-ae78da3b5c5f",
     "uuid": "850c4594-1be1-4e9b-9fcc-38cc3e6ff015"
  },
  "response": {"token": "A New Token and Session Context Was Created"}
}

It returns an answer containing session UUID, 850c4594-1be1-4e9b-9fcc-38cc3e6ff015, and a refreshed token, 850c4594-1be1-4e9b-9fcc-38cc3e6ff015.

Check if session and token is valid:

$ curl http://localhost:1234/api/auth/check?token=0aef6841-2ddd-436d-b961-ae78da3b5c5f\&uuid=850c4594-1be1-4e9b-9fcc-38cc3e6ff015
{
  "jtype": "afb-reply",
  "request": {"status":"success"},
  "response": {"isvalid":true}
}

Replies use javascript object returned as serialized JSON.
This object contains at least 2 mandatory fields of name jtype and request and one optional field of name response, as seen above.
The field jtype must have a value of type string equal to "afb-reply".
The field request must have a value of type object.
This request object has at least one field named status and four optional fields named info, token, uuid, reqid.
This field response optionally contains an object returned when request succeeded.

Format of events:
Events are javascript object serialized as JSON.
Here is a template of event:
{
   "jtype": "afb-event",
   "event": "sample_api_name/sample_event_name",
   "data": ...any event data...
}


tictactoe hernehmen und so anpassen, dass zwei verschiedene Clients spielen können, das Feld jeweils im Display angezeigt wird. 
test über Start zwei verschiedener Qemu-Displays. Wenn das klappt, Richtung Talk-App gehen

18.1.:
gute Übersichtsfolien zu Bindings: http://events17.linuxfoundation.org/sites/events/files/slides/The%20State%20of%20AGL-%20Plumbing%20and%20Services.pdf

tic-tac-toe Spielfluss:
verb/function = 
new : start new game (setting board-id; resetting the game by memory-setting SPACE ' ' for every byte; setting number of moves to 0; 
					call function "changed" which is just executing afb_event_push(board->event, json_object_new_string(reason)) )

play : computer plays (checking first that state of game is not terminated; calling function "get_move" which returns the index of the move; 
			calling fct "add_move" which executes move on the board )

move: moving a piece (checking the state of the board, executing the move "add_move" )

board:	displaying the board ( calling function "describe" which returns the description as json-object format)

level:	setting the server level

join:	join a board

< für Compile: gcc -fPIC -shared -Wall -g3 tictactoe_self.c -o tictactoe_self.so $(pkg-config --cflags --libs afb-daemon libafbwsc) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include  //das -fPIC -shared gibt an, dass das source-file keine main-funktion hat ) 

die Funktion "changed" direkt mit dem Befehl afb_event_push(..) zu übersetzen gibt ein Fehler bezogen json_object aus

debugging am besten möglich über print-Befehle innerhalb der Funktion oder einfach "gdb --args afb-daemon ...." und als breakpoint den Funktionsnamen setzen.
Mit logging in file gdb_tictactoe-self.log via (gdb) set logging on

to do:
---> log-file durchlesen und nachvollziehen --- 
Fazit schonmal für verbs new und board:  Der Verlauf context_create, event_create, session-cookie erstellen und die Antworten afb-reply ähneln sich. 
Für "board" wird ein json-object zum Beschreiben des aktuellen Boards ( = Tafel) erstellt. in den Boards werden parameter wie id, Züge, usw. verewigt.

bloß tictactoe new triggert ein "ON-EVENT"

das verb "play" führt zum Ausführen eines Zugs über den Computer. Dabei ändert sich einiges in board (history, moves, usw.) und zwischendrin wird gecheckt ob jemand gewonnen hat.

zum Ausführen eines Zugs: tictactoe move {"index":"6"} wobei 6 den Ort des Kreuzchens angibt

zu guter letzt: verb "join" ( with id=none, special id for joinin new session) ----------> log-file anschauen, websocket-communication via websock.c mit websock_send_internal_v, ws_writev,
 sowie aws_writev und aws_readv in afb-ws.c 


---> in websockets, html,client <---> server, genauer einarbeiten und tictactoe so kürzen, dass zwei verschiedene Maschinen Nachrichten austauschen können

aus Doku:
Receiving the signals: 		Understanding what a client expects when it receives signals, events or data shall bethe most important topic of the designer of a signaling agent. The good point here isthat because JSON1 is the exchange format, structured data can be sent in a flexibleway.The good design is to allow as much as possible the client to describe what is neededwith the goal to optimize the processing to the requirements only.

Architectural digressions:	Based   on   their   dependencies   to   hardware,   signaling   agents   can   be   split   into   2categories: low-level signaling agents and high-level signaling agents.Low-level signaling agents are bound to the hardware and focused on interfacing anddriving.High-level signaling agent are independent of the hardware and focused on providingservice.This separation (that may in the corner look artificial) aim to help in the systemsdesign. The main idea here is that high-level signaling agents are providing “businesslogic”, also known as “application logic”, that is proper to the car industry and that canbe reused and that can evolve as a foundation for the future of the industry.

-----> tic-tac-toe.html genauer anschauen und ausführen!!

example applications:	https://github.com/AGL-web-applications/webapp-samples 

launch application html5 with afm-user-daemon https://iot.bzh/download/public/2016/appfw/02_Documentation-AppFW-Core-2.0.pdf

When afm-user-daemon has to launch anapplication, it looks for launch mode (local or remote), as well as for the type ofapplication describe in config.xml widget configuration file.This tuple mode+type allows to select the adequate rule.Configuration file is /etc/afm/afm-launch.conf.

Here is a sample of configuration file for defining how to launch an application of typesapplication/x-executable, text/x-shellscript and text/html in local mode:mode localapplication/x-executabletext/x-shellscript    %r/%ctext/html    /usr/bin/afb-daemon --mode=local --readyfd=%R --alias=/icons:%I --port=%P --rootdir=%r --token=%S --sessiondir=%D/.afb-daemon    /usr/bin/web-runtime http://localhost:%P/%c?token=%S


The afm-user-daemon takes its orders from the session instance of D-Bus.

The figure below summarizes the situation of afm-user-daemon in the system.

+------------------------------------------------------------+
|                          User                              |
|                                 +---------------------+    |
|     +---------------------+     |   Smack isolated    |    |
|     |   D-Bus   session   +     |    APPLICATIONS     |    |
|     +----------+----------+     +---------+-----------+    |
|                |                          |                |
|                |                          |                |
|     +----------+--------------------------+-----------+    |
|     |                                                 |    |
|     |                  afm-user-daemon                |    |
|     |                                                 |    |
|     +----------+----------------------+----------+----+    |
|                |                      |          :         |
|                |                      |          :         |
:================|======================|==========:=========:
|                |                      |          :         |
|     +----------+----------+     +-----+-----+    :         |
|     |   D-Bus   system    +-----+  CYNARA   |    :         |
|     +----------+----------+     +-----+-----+    :         |
|                |                      |          :         |
|     +----------+---------+    +-------+----------+----+    |
|     | afm-system-daemon  +----+   SECURITY-MANAGER    |    |
|     +--------------------+    +-----------------------+    |
|                                                            |
|                          System                            |
+------------------------------------------------------------+


zum HTML5-Starten ausführen: 
in Terminal: afb-daemon --binding ./tictactoe_self.so --port 1234 --roothttp=/home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/test/

in browser: http://localhost:1234/tic-tac-toe.html?token=

gdb-log-files abgleichen ob anderen funktionen aufgerufen werden, und websockets genauer anschauen, das stellt wohl die verbindung her.

html5-verbs:
new
play	-----> zeichen wird gesetzt durch funktion "describe", vorarbeiten unter:
$19 = {next = 0x0, use_count = 1, moves = 4, history = {4, 3, 8, 2, 0, 0, 0, 0, 0}, id = 345, level = 8, board = "  OOX   X", event = 0x5555557ce3d0}

heruasfinden wo Übergabepunkt von binding zu app/html: afb_req_success( ) innerhalb board ist die ausführende Funktion

ganz genau: return websock_text_v(ws->ws, 1, ios, count); nach dreimaligem aufrufen

---> #0  afb_ws_texts (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:293 <---

websock_text_v (ws=0x5555557d0720, last=1, iovec=0x7fffffffbef0, count=7)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:241
(gdb) s
websock_send_v (count=7, iovec=0x7fffffffbef0, opcode=1, rsv3=0, rsv2=0, rsv1=0, last=1, ws=0x5555557d0720)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:240
ws_writev (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:79
(gdb) s
websock_send_internal_v (ws=0x5555557d0720, first=<optimized out>, iovec=<optimized out>, count=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:146

(gdb) p *iov
$11 = {iov_base = 0x7fffffffbe90, iov_len = 4}
(gdb) p *ws
$12 = {state = 3, maxlength = 1048500, lenhead = 6, szhead = 6, length = 0, mask = 2028650237, 
  header = "\201\247\276\352x\375\000\000\000\000\000\000\000", itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d06e0}
(gdb) 
(gdb) s
aws_writev (ws=0x5555557d06e0, iov=0x7fffffffbc90, iovcnt=8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:364
(gdb) p ws->fd
$15 = 10
(gdb) p *ws
$16 = {fd = 10, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557d01e0, ws = 0x5555557d0720, fdev = 0x5555557d00a0, buffer = {
    buffer = 0x0, size = 0}}
(gdb) 

der letzte schritt zur Ausführung ist:	__GI___writev (fd=10, iov=iov@entry=0x7fffffffbc90, iovcnt=iovcnt@entry=8) at ../sysdeps/unix/sysv/linux/writev.c:26

---->
rc = writev(ws->fd, iov2, iovcnt);    

(gdb) p *ws
$1 = {fd = 10, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557d01e0, ws = 0x5555557d0720, fdev = 0x5555557d00a0, buffer = {
    buffer = 0x0, size = 0}}
(gdb) p *iov2
$2 = {iov_base = 0x7fffffffbe80, iov_len = 2}
(gdb) p iovcnt
$4 = 8

2.Durchgang:
(gdb) p *ws
$5 = {fd = 10, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557d01e0, ws = 0x5555557d0720, fdev = 0x5555557d00a0, buffer = {
    buffer = 0x0, size = 0}}
(gdb) p *iov2
$6 = {iov_base = 0x7fffffffbef0, iov_len = 2}
(gdb) p iovcnt
$7 = 8
(gdb) x/10x &iov2.iov_base
0x7fffffffbcf0: 0xffffbef0      0x00007fff      0x00000002      0x00000000
0x7fffffffbd00: 0x5559a0f2      0x00005555      0x00000001      0x00000000
0x7fffffffbd10: 0xffffc1f6      0x00007fff
(gdb) 

3.Durchgang:
(gdb) p *ws
$8 = {fd = 10, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557d01e0, ws = 0x5555557d0720, fdev = 0x5555557d00a0, buffer = {
    buffer = 0x0, size = 0}}
(gdb) p *iov2
$9 = {iov_base = 0x7fffffffbe90, iov_len = 4}
(gdb) p iovcnt
$10 = 8
(gdb) x/10x &iov2.iov_base
0x7fffffffbc90: 0xffffbe90      0x00007fff      0x00000004      0x00000000
0x7fffffffbca0: 0x5559a0f2      0x00005555      0x00000001      0x00000000
0x7fffffffbcb0: 0xffffc196      0x00007fff


Linux says: readv, writev, preadv, pwritev - read or write data into multiple buffers 
Description
The readv() system call reads iovcnt buffers from the file associated with the file descriptor fd into the buffers described by iov ("scatter input").
The writev() system call writes iovcnt buffers of data described by iov to the file associated with the file descriptor fd ("gather output").
The pointer iov points to an array of iovec structures, defined in <sys/uio.h> as:

    struct iovec {
        void  *iov_base;    /* Starting address */
        size_t iov_len;     /* Number of bytes to transfer */
    };

The readv() system call works just like read(2) except that multiple buffers are filled. The writev() system call works just like write(2) except that multiple buffers are written out. 
Buffers are processed in array order. This means that readv() completely fills iov[0] before proceeding to iov[1], and so on. (If there is insufficient data, then not all buffers pointed to by iov may be filled.) Similarly, writev() writes out the entire contents of iov[0] before proceeding to iov[1], and so on. 
The data transfers performed by readv() and writev() are atomic: the data written by writev() is written as a single block that is not intermingled with output from writes in other processes (but see pipe(7) for an exception); analogously, readv() is guaranteed to read a contiguous block of data from the file,
On success, readv() and preadv() return the number of bytes read; writev() and pwritev() return the number of bytes written.

The following code sample demonstrates the use of writev():

    char *str0 = "hello ";
    char *str1 = "world\n";
    struct iovec iov[2];
    ssize_t nwritten;

    iov[0].iov_base = str0;
    iov[0].iov_len = strlen(str0);
    iov[1].iov_base = str1;
    iov[1].iov_len = strlen(str1);

    nwritten = writev(STDOUT_FILENO, iov, 2);

Innerhalb von afb kommt iov[i] in files afb-proto-ws.c, afb-hook.c, afb-ws.c, websock.c und verbose.c vor

Reihenfolge des Schreibens: 
afb_req_reply --> wsreq_reply --> afb_wsj1_reply_j --> afb_wsj1_reply_s --> wsj1_send_iost --> afb_ws_texts --> websock_send_internal_v --> ws_writev --> aws_writev --> writev

difference in websockets? -----> NO, stays like below:
(gdb) p *ws
$14 = {fd = 10, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557d01e0, ws = 0x5555557d0720, fdev = 0x5555557d00a0, buffer = { buffer = 0x0, size = 0}}

--> next: nachschauen wie der File-descriptor erstellt wird 

< In a near future, JSON-RPC protocol should be added to complete current x-afb-json1 protocol 

breakpoint auf "wsj1_send_iost" nicht möglich, wird immer übersprungen.
in int afb_ws_texts taucht bereits iov auf: "Sends a variable list of texts to the endpoint of 'ws'"
Wird weiterverarbeitet und Header erstellt: in websock_send_internal_v (ws=0x5555557d0720, first=129 '\201', iovec=0x7fffffffbee0, count=7)

ws_writev leitet Daten weiter bzw. schreibt header in ws. in aws_writev wird dann zum ersten Mal explizit ws->fd erwähnt
ws->fd taucht in afb-ws.c auf

struct afb_ws
{
	int fd;				/* the socket file descriptor */
	enum state state;		/* current state */
	const struct afb_ws_itf *itf; 	/* the callback interface */
	void *closure;			/* closure when calling the callbacks */
	struct websock *ws;		/* the websock handler */
	struct fdev *fdev;		/* the fdev for the socket */
	struct buf buffer;		/* the last read fragment */
};



struct afb_ws *afb_ws_create(struct fdev *fdev, const struct afb_ws_itf *itf, void *closure)
/*
 * Creates the afb_ws structure for the file descritor
 * 'fd' and the callbacks described by the interface 'itf'
 * and its 'closure'.
 * When the creation is a success, the systemd event loop 'eloop' is
 * used for handling event for 'fd'.
 *
 * Returns the handle for the afb_ws created or NULL on error.
 */

"result->fd = fdev_fd(fdev)" leads to:
int fdev_fd(const struct fdev *fdev)
{
	return fdev->fd;
}
mit 
struct fdev
{
	int fd;
	uint32_t events;
	unsigned refcount;
	struct fdev_itf *itf;
	void *closure_itf;
	void (*callback)(void*,uint32_t,struct fdev*);
	void *closure_callback;
};

da ich systemd nicht inkludiere, schonmal kein systemd-socket, auch kein tcp-socket aber bleibt nur unix-domain socket: Type_Unix aus afb-socket.c
sockets führen nach ein paar funktionen in afb-socket.c nach src/afb-hsrv.c

in afb_ws_create:	
(gdb) p *result
$3 = {fd = -159384416, state = (reading_text | reading_binary | unknown: 32764), itf = 0x7ffff67ffca0 <main_arena+96>, closure = 0x0, ws = 0x0,
  fdev = 0x0, buffer = {buffer = 0x0, size = 0}}

afb_ws_create (fdev=fdev@entry=0x5555557d00a0, itf=itf@entry=0x5555557ade80 <wsj1_itf>, closure=closure@entry=0x5555557d01e0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:171
(gdb) p *result
$7 = {fd = -159384416, state = (reading_text | reading_binary | unknown: 32764), itf = 0x7ffff67ffca0 <main_arena+96>, closure = 0x0, ws = 0x0,
  fdev = 0x5555557d00a0, buffer = {buffer = 0x0, size = 0}}

(gdb) p *result
$8 = {fd = 10, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557d01e0, ws = 0x0, fdev = 0x5555557d00a0, buffer = {
    buffer = 0x0, size = 0}}
(gdb) s
websock_create_v13 (itf=0x5555557adfa0 <aws_itf>, closure=0x5555557d06e0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:554
websock_create_v13 (itf=0x5555557adfa0 <aws_itf>, closure=0x5555557d06e0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:554

(gdb) p *result
$9 = {state = 0, maxlength = 0, lenhead = 0, szhead = 0, length = 0, mask = 0, header = '\000' <repeats 13 times>, itf = 0x0, closure = 0x0}
(gdb) p *result
$10 = {state = 0, maxlength = 1048500, lenhead = 0, szhead = 0, length = 0, mask = 0, header = '\000' <repeats 13 times>,
  itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d06e0}

fdev_set_events (fdev=0x5555557d00a0, events=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/fdev.c:127
(gdb) p *fdev
$13 = {fd = 10, events = 1, refcount = 2, itf = 0x5555557adec0 <itf>, closure_itf = 0x5555557d00e0, callback = 0x0, closure_callback = 0x0}


in afb-socket.c wird die funktion open_unix überhaupt nicht aufgerufen. Dafür wird open_tcp aufgerufen, mit dem Port 1234, mit dem ich gdb gestartet habe, gleich danach afb_cred_create_for_socket.
Aufgerufen von afb-daemon: 
0x000055555556813a in start_http_server ()  at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:410


aus gdb während open_tcp:
(gdb) p *iai
$13 = {ai_flags = 1, ai_family = 2, ai_socktype = 1, ai_protocol = 6, ai_addrlen = 16, ai_addr = 0x5555557d6970, ai_canonname = 0x0, ai_next = 0x0}

fd = 9
server = 1
reuseaddr = 1

options:	SOL_SOCKET = socket layer itself. This level-argument used for options that are protocol independent.
		SO_REUSEADDR = enables local address reuse
		The arguments optval (= &rc) and optlen (= sizeof(rc)) are used to access option values for setsockopt(). 
		For getsockopt() they identify a buffer in which the  value  for  the  requested  option(s)  are  to  be returned.


             /* get the socket */                                                                                                           │
   │194             iai = rai;                                                                                                                     │
   │195             while (iai != NULL) {                                                                                                          │
  >│196                     fd = socket(iai->ai_family, iai->ai_socktype, iai->ai_protocol);                                                       │
   │197                     if (fd >= 0) {                                                                                                         │
   │198                             if (server) {                                                                                                  │
   │199                                     if (reuseaddr) {                                                                                       │
   │200                                             rc = 1;                                                                                        │
   │201                                             setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &rc, sizeof rc);                                      │
   │202                                     }                                                                                                      │
   │203                                     rc = bind(fd, iai->ai_addr, iai->ai_addrlen);                                                          │
   │204                             } else {                                                                                                       │
   │205                                     rc = connect(fd, iai->ai_addr, iai->ai_addrlen);                                                       │
   │206                             }                                                                                                              │


in afb-dameon:
│330             fcntl(fd, F_SETFD, FD_CLOEXEC);                                                                                                │
│331             fcntl(fd, F_SETFL, O_NONBLOCK);   

fcntl: manipulate file descriptor. 
F_SETFD: Set the file descriptor flags to the value specified by arg. FD_CLOEXEC, the close-on-exec flag. If it is set, the fd will automatically be closed during a successful execution,
otherwise left open.


ebenfalls bezogen afb-daemon:	
afb_socket_open_fdev_scheme (uri=uri@entry=0x5555557cef18 "tcp:*:1234", server=server@entry=1, scheme=scheme@entry=0x5555555973aa "tcp")
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-socket.c:371
     
für Verbindungsuafbau zu localhost wird afb-dameon socket 9 verwendet.

in Linux:
gast@gast-pc:~$ sudo netstat --all --programs | grep afb
tcp        0      0 0.0.0.0:1234            0.0.0.0:*               LISTEN      24058/afb-daemon    
tcp        0      0 localhost:1234          localhost:60870         VERBUNDEN   24058/afb-daemon    

gast@gast-pc:~$ lsof -i -a -p 24058
COMMAND     PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME
afb-daemo 24058 gast    9u  IPv4 2767611      0t0  TCP *:1234 (LISTEN)
afb-daemo 24058 gast   10u  IPv4 2768588      0t0  TCP localhost:1234->localhost:60870 (ESTABLISHED)


---> der PID mit fd 10u ist das socket für aws_write


Sobald verbunden, wird übergegangen auf die Funktion  fd = 10

socket-options here:
afb_cred_create_for_socket (fd=10) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-cred.c:122

---> anderer socket als für afb-daemon, nämlich socket fd = 10

Infos zu socket / file-deskriptor:
fd = 10
length = (socklen_t)(sizeof ucred) = 12 
rc = getsockopt(fd, SOL_SOCKET, SO_PEERCRED, &ucred, &length);

(gdb) ucred = {pid = 0, uid = 4294967295, gid = 4294967295}

calling function afb_ws_json1_create receives 
(gdb) p result->cred = (struct afb_cred *) 0x0


   │124             socklen_t length;                                                                                                              │
   │125             struct ucred ucred;                                                                                                            │
   │126             char label[MAX_LABEL_LENGTH];                                                                                                  │
   │127                                                                                                                                            │
   │128             /* get the credentials */                                                                                                      │
   │129             length = (socklen_t)(sizeof ucred);                                                                                            │
  >│130             rc = getsockopt(fd, SOL_SOCKET, SO_PEERCRED, &ucred, &length);                                                                 │

SO_PEERCRED:  This read-only socket option returns the credentials of the peer process connected to this socket.  The returned credentials are 
	      those that were in effect at the time of the call to connect. The argument to getsockopt is a pointer to a ucred structure and its size

   │142                                                                                                                                            │
   │143             /* get the security label */                                                                                                   │
   │144             length = (socklen_t)(sizeof label);                                                                                            │
   │145             rc = getsockopt(fd, SOL_SOCKET, SO_PEERSEC, label, &length);                                                                   │

SO_PEERSEC:  This read-only socket option returns the security context of the peer socket connected to this socket. By default, this will be the same
	     as the security context of the process that created the peer socket unless overridden by the policy or by a process with the required permissions.
	     The argument to getsockopt(2) is a pointer to a buffer of the specified length in bytes into which the security context string will be copied.

p ucred
$39 = {pid = 0, uid = 4294967295, gid = 4294967295}
(gdb) p label
$40 = "\001", '\000' <repeats 15 times>, "\275\252}UUU\......
length = 12

von tcp-socket wird auf websocket geupgraded nach initialisierung über:
upgrade_to_websocket (cls=0x5555557b0400, connection=<optimized out>, con_cls=<optimized out>, extra_in=<optimized out>, extra_in_size=<optimized out>, sock=<optimized out>, urh=0x5555557d0000)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:156

danach wird board-id gesetzt, auch in browser sichtbar. Dann wird "gepollt" bis Nutzer Eingabe macht und Daten via aws_writev() über socket fd=10 gesendet werden


Das abzuschickende Datenpaket, zusammengesetzt in afb_ws_texts:
$9 = (struct afb_wsj1_msg *) 0x5555557d2c80
(gdb) p *msg
$10 = {refcount = 0, wsj1 = 0x5555557d01e0, next = 0x0, previous = 0x0, text = 0x5555557cf540 "[2,\"4", code = 2, id = 0x5555557cf544 "4",
  api = 0x5555557cf548 "tictactoe", verb = 0x5555557cf552 "move", event = 0x0, object_s = 0x5555557cf558 "{\"index\":0}", object_s_length = 11,
  token = 0x5555557cf565 "HELLO", object_j = 0x5555557d1fe0}

(gdb) p ios[0]
$14 = {iov_base = 0x55555559a0f2, iov_len = 1}
(gdb) x/2x 0x55555559a0f2
0x55555559a0f2: 0x5d22005b      0x222c2200

(gdb) p ios[1]
$18 = {iov_base = 0x7fffffffc186, iov_len = 1}
(gdb) x/2x 0x7fffffffc186
0x7fffffffc186: 0xf0000033      0xfdc39525

3.Durchgang
s = 0x55555559a0f8 ",\""
(gdb) p count
$21 = 3
(gdb) p ios[2]
$22 = {iov_base = 0x55555559a0f8, iov_len = 2}
(gdb) x/2x 0x55555559a0f8
0x55555559a0f8: 0x0000222c      0x00000000
(gdb) p args
$23 = {{gp_offset = 32, fp_offset = 0, overflow_arg_area = 0x7fffffffc150, reg_save_area = 0x7fffffffc0f0}}


5.Durchgang
(gdb) p s
$25 = 0x55555559a0ef "\","
(gdb) p count
$26 = 5
(gdb) p ios[4]
$27 = {iov_base = 0x55555559a0ef, iov_len = 2}
(gdb) x/2x 0x55555559a0ef
0x55555559a0ef: 0x5b002c22      0x005d2200
(gdb) p args
$28 = {{gp_offset = 48, fp_offset = 0, overflow_arg_area = 0x7fffffffc150, reg_save_area = 0x7fffffffc0f0}}

s = 0x5555557d1e30 " jtype afb-success ..... "
(gdb) p ios[5]
$31 = {iov_base = 0x5555557d1e30, iov_len = 52}
(gdb) x/52x 0x5555557d1e30
0x5555557d1e30: 0x746a227b      0x22657079      0x6661223a      0x65722d62
0x5555557d1e40: 0x22796c70      0x6572222c      0x73657571      0x7b3a2274
0x5555557d1e50: 0x61747322      0x22737574      0x7573223a      0x73656363
0x5555557d1e60: 0x7d7d2273      0x00000000      0x00000000      0x00000000
0x5555557d1e70: 0x00000000      0x00000000      0x00000111      0x00000000

$33 = 0x55555559a0f5 "]"
(gdb) p ios[6]
$35 = {iov_base = 0x55555559a0f5, iov_len = 1}
(gdb) x/1x 0x55555559a0f5
0x55555559a0f5: 0x2c22005d

Übersicht zum Schluss:
(gdb) p ios
$37 = {{iov_base = 0x55555559a0f2, iov_len = 1}, {iov_base = 0x7fffffffc186, iov_len = 1}, {iov_base = 0x55555559a0f8, iov_len = 2}, {
    iov_base = 0x5555557cf544, iov_len = 1}, {iov_base = 0x55555559a0ef, iov_len = 2}, {iov_base = 0x5555557d1e30, iov_len = 52}, { ...
(gdb) p *ws
$38 = {fd = 10, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557d01e0, ws = 0x5555557d0720, fdev = 0x5555557d00a0, buffer = {
    buffer = 0x0, size = 0}}

(gdb) p *ws->ws
$40 = {state = 3, maxlength = 1048500, lenhead = 6, szhead = 6, length = 0, mask = 1669175562, 
  header = "\201\254\n\231}c\000\000\000\000\000\000\000", itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d06e0}

websock_text_v (ws=0x5555557d0720, last=1, iovec=0x7fffffffbee0, count=7)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:241
(gdb) p iovec
$42 = (const struct iovec *) 0x7fffffffbee0
(gdb) p *iovec
$43 = {iov_base = 0x55555559a0f2, iov_len = 1}
(gdb) p count
$44 = 7
(gdb) p *ws
$45 = {state = 3, maxlength = 1048500, lenhead = 6, szhead = 6, length = 0, mask = 1669175562, 
  header = "\201\254\n\231}c\000\000\000\000\000\000\000", itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d06e0}



websock_send_v (count=7, iovec=0x7fffffffbee0, opcode=1, rsv3=0, rsv2=0, rsv1=0, last=1, ws=0x5555557d0720)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:240

static inline int websock_send_v(struct websock *ws, int last, int rsv1, int rsv2, int rsv3, int opcode, const struct iovec *iovec, int cou│
   │162     {                                                                                                                                          │
   │163             unsigned char first = (unsigned char)(FRAME_SET_FIN(last)                                                                          │
   │164                                     | FRAME_SET_RSV1(rsv1)                                                                                     │
   │165                                     | FRAME_SET_RSV1(rsv2)                                                                                     │
   │166                                     | FRAME_SET_RSV1(rsv3)                                                                                     │
  >│167                                     | FRAME_SET_OPCODE(opcode));                                                                               │
   │168             return websock_send_internal_v(ws, first, iovec, count);                                                                           │
   │169     }
(gdb) s
(gdb) p *ws
$46 = {state = 3, maxlength = 1048500, lenhead = 6, szhead = 6, length = 0, mask = 1669175562, 
  header = "\201\254\n\231}c\000\000\000\000\000\000\000", itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d06e0}
(gdb) p last
$47 = <optimized out>
(gdb) p rsv1
$48 = 0
(gdb) p rsv2
$49 = 0
(gdb) p rsv3
$50 = 0
(gdb) p opcode
$51 = 1
(gdb) p *iovec
$52 = {iov_base = 0x55555559a0f2, iov_len = 1}
(gdb) p count
$53 = 7

websock_send_internal_v (ws=0x5555557d0720, first=129 '\201', iovec=0x7fffffffbee0, count=7)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:95

berechne die Größe des Pakets:
   │112             for (j = 0 ; j < count ; j++) {                                                                                                    │
   │113                     iov[i].iov_base = iovec[j].iov_base;                                                                                       │
   │114                     len = iovec[j].iov_len;                                                                                                    │
   │115                     if (len != 0) {                                                                                                            │
   │116                             iov[i].iov_len = len;                                                                                              │
   │117                             size += len;                                                                                                       │
   │118                             i++;                                                                                                               │
   │119                     }   


vorher:
{{iov_base = 0x7, iov_len = 93824992488121}, {iov_base = 0x7fffffffbe90, iov_len = 4}, {iov_base = 0x55555559a0f2, iov_len = 1}, {
    iov_base = 0x7fffffffc196, iov_len = 1}, {iov_base = 0x55555559a0f8, iov_len = 2}, {iov_base = 0x5555557cff54, iov_len = 1}, {
    iov_base = 0x55555559a0ef, iov_len = 2}, {iov_base = 0x5555557d3c10, iov_len = 149}, {iov_base = 0x55555559a0f5, iov_len = 1}, {
    iov_base = 0x7fffffffc1f6, iov_len = 1}, {iov_base = 0x55555559a0f8, iov_len = 14527765514453118976}, {iov_base = 0x7fffffffbd70,
    iov_len = 140737488338288}, {iov_base = 0x7fffffffbea0, iov_len = 93824994838192}, {iov_base = 0x7fffffffc0a0, iov_len = 1}, {
    iov_base = 0x7ffff79b2967, iov_len = 14527765514453118976}, {iov_base = 0x7fffffffbdb0, iov_len = 140737488338352}, {iov_base = 0x7fffffffbf50,
    iov_len = 140737347529083}, {iov_base = 0x7fffffffbf38, iov_len = 1}, {iov_base = 0x7f, iov_len = 140737326113561}, {iov_base = 0x7ffffbad8001,
    iov_len = 140737488338768}, {iov_base = 0x7fffffffbf50, iov_len = 140737488338768}, {iov_base = 0x7fffffffbf50, iov_len = 14527765514453118976}, {
    iov_base = 0x7fffffffbe20, iov_len = 140737488338464}, {iov_base = 0x7fffffffbfc0, iov_len = 140737347529134}, {iov_base = 0x7fffffffbfa8,
    iov_len = 1}, {iov_base = 0x7f, iov_len = 140737326113561}, {iov_base = 0x4fbad8001, iov_len = 14527765514453118976}, {iov_base = 0x7fffffffbe70,
    iov_len = 140737488338544}, {iov_base = 0x7fffffffc010, iov_len = 140737347529134}, {iov_base = 0x7fffffffbff8, iov_len = 1}, {iov_base = 0x7f,
    iov_len = 140737326113561}, {iov_base = 0xfbad8001, iov_len = 140737488338960}}

count = 7 ---> das bedeutet die ersten sieben iov[] werden hochgezählt

weiter in websock_send_internal:
122             /* makes the header */                                                                                                             │
   │123             pos = 0;                                                                                                                           │
  >│124             header[pos++] = first;                                                                                                             │
   │125             size = (uint64_t) size;                                                                                                            │
   │126             if (size < 126) {                                                                                                                  │
   │127                     header[pos++] = FRAME_SET_MASK(0) | FRAME_SET_LENGTH(size, 0);                                                             │
   │128             } else {                                                                                                                           │
   │129                     if (size < 65536) {                                                                                                        │
   │130                             header[pos++] = FRAME_SET_MASK(0) | 126;                                                                           │
   │131                     } else {                                                                                                                   │
   │132                             header[pos++] = FRAME_SET_MASK(0) | 127;                                                                           │
   │133                             header[pos++] = FRAME_SET_LENGTH(size, 7);                                                                         │
   │134                             header[pos++] = FRAME_SET_LENGTH(size, 6);                                                                         │
   │135                             header[pos++] = FRAME_SET_LENGTH(size, 5);                                                                         │
   │136                             header[pos++] = FRAME_SET_LENGTH(size, 4);                                                                         │
   │137                             header[pos++] = FRAME_SET_LENGTH(size, 3);                                                                         │
   │138                             header[pos++] = FRAME_SET_LENGTH(size, 2);                                                                         │
   │139                     }                                                                                                                          │
   │140                     header[pos++] = FRAME_SET_LENGTH(size, 1);                                                                                 │
   │141                     header[pos++] = FRAME_SET_LENGTH(size, 0);                                                                                 │
   │142             }                                                                                                                                  │
   │143                                                                                                                                                │
   │144             /* allocates the vec */                                                                                                            │
   │145             iov[0].iov_base = header;                                                                                                          │
   │146             iov[0].iov_len = pos;                                                                                                              │
   │147             rc = ws_writev(ws, iov, i);                        

(gdb) p header
$70 = "\201\300\377\377\377\177\000\000\020\300\377\377\377\177\000\000\020\300\377\377\377\177\000\000\021\300\377\377\377\177\000"

allocate vector as line 146:
(gdb) p iov[0]
$89 = {iov_base = 0x7fffffffbe80, iov_len = 2}
(gdb) x/1x 0x7fffffffbe80
0x7fffffffbe80: 0xffff3c81


this is sent out in aws_writev (ws=0x5555557d06e0, iov=0x7fffffffbc80, iovcnt=8)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:341

   │360             /* write the data */                                                                                                               │
   │361             iov2 = (struct iovec*)iov;                                                                                                         │
   │362             sz = dsz;                                                                                                                          │
   │363             for (;;) {                                                                                                                         │
  >│364                     rc = writev(ws->fd, iov2, iovcnt);          

(gdb) p *ws
$98 = {fd = 10, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557d01e0, ws = 0x5555557d0720, fdev = 0x5555557d00a0, buffer = {
    buffer = 0x0, size = 0}}
(gdb) p iov2
$99 = (struct iovec *) 0x7fffffffbc80
(gdb) p *iov2
$100 = {iov_base = 0x7fffffffbe80, iov_len = 2}
(gdb) s
__GI___writev (fd=10, iov=iov@entry=0x7fffffffbc80, iovcnt=iovcnt@entry=8) at ../sysdeps/unix/sysv/linux/writev.c:26

next round:

$102 = {{iov_base = 0x55555559a0f2, iov_len = 1}, {iov_base = 0x7fffffffc1f6, iov_len = 1}, {iov_base = 0x55555559a0f8, iov_len = 2}, {
    iov_base = 0x5555557ce428, iov_len = 15}, {iov_base = 0x55555559a0ef, iov_len = 2}, {iov_base = 0x5555557d16e0, iov_len = 62}, ...

3rd time:
(gdb) p ios
$107 = {{iov_base = 0x55555559a0f2, iov_len = 1}, {iov_base = 0x7fffffffc196, iov_len = 1}, {iov_base = 0x55555559a0f8, iov_len = 2}, {
    iov_base = 0x5555557cff54, iov_len = 0}, {iov_base = 0x7ffff79b297b, iov_len = 140737347528566}, {iov_base = 0xffffffff, iov_len = 206158430224}, {
    iov_base = 0x7fffffffc0d0, iov_len = 140737328955296}, {iov_base = 0x0, iov_len = 14527765514453118976}, {iov_base = 0x7fffffffc0f0,
    iov_len = 93824994707776}, {iov_base = 0x7fffffffbfd0, iov_len = 140737347528148}, {iov_base = 0x1, iov_len = 140737488338896}, { .......


packets sent cia writev:
11:57:08.014726 IP localhost.33704 > localhost.1234: Flags [P.], seq 96:147, ack 320, win 512, options [nop,nop,TS val 61338323 ecr 61297877], length 51
	0x0000:  4500 0067 e199 4000 4006 5af5 7f00 0001  E..g..@.@.Z.....
	0x0010:  7f00 0001 83a8 04d2 fda3 c19a 2a6e 947a  ............*n.z
	0x0020:  8018 0200 fe5b 0000 0101 080a 03a7 f2d3  .....[..........
	0x0030:  03a7 54d5 81ad 12e7 28ca 49d5 04e8 23d2  ..T.....(.I...#.
	0x0040:  0ae6 3093 41a9 6686 4bbe 7d82 07a7 7d91  ..0.A.f.K.}...}.
	0x0050:  4de8 3e9c 0aa3 7c83 4db2 30dd 1bb7 3ec5  M.>...|.M.0...>.
	0x0060:  608f 5eab 67e8 4f                        `.^.g.O
11:57:08.014761 IP localhost.1234 > localhost.33704: Flags [.], ack 147, win 512, options [nop,nop,TS val 61338323 ecr 61338323], length 0
	0x0000:  4500 0034 52bf 4000 4006 ea02 7f00 0001  E..4R.@.@.......
	0x0010:  7f00 0001 04d2 83a8 2a6e 947a fda3 c1cd  ........*n.z....
	0x0020:  8010 0200 fe28 0000 0101 080a 03a7 f2d3  .....(..........
	0x0030:  03a7 f2d3                                ....
11:57:21.244529 IP localhost.1234 > localhost.33704: Flags [P.], seq 320:383, ack 147, win 512, options [nop,nop,TS val 61351552 ecr 61338323], length 63
	0x0000:  4500 0073 52c0 4000 4006 e9c2 7f00 0001  E..sR.@.@.......
	0x0010:  7f00 0001 04d2 83a8 2a6e 947a fda3 c1cd  ........*n.z....
	0x0020:  8018 0200 fe67 0000 0101 080a 03a8 2680  .....g........&.
	0x0030:  03a7 f2d3 813d 5b33 2c22 3135 222c 7b22  .....=[3,"15",{"
	0x0040:  6a74 7970 6522 3a22 6166 622d 7265 706c  jtype":"afb-repl
	0x0050:  7922 2c22 7265 7175 6573 7422 3a7b 2273  y","request":{"s
	0x0060:  7461 7475 7322 3a22 7375 6363 6573 7322  tatus":"success"
	0x0070:  7d7d 5d    

< note: das 15 bezieht sich auf das Feld >
                              }}]
11:57:21.244582 IP localhost.33704 > localhost.1234: Flags [.], ack 383, win 512, options [nop,nop,TS val 61351552 ecr 61351552], length 0
	0x0000:  4500 0034 e19a 4000 4006 5b27 7f00 0001  E..4..@.@.['....
	0x0010:  7f00 0001 83a8 04d2 fda3 c1cd 2a6e 94b9  ............*n..
	0x0020:  8010 0200 fe28 0000 0101 080a 03a8 2680  .....(........&.
	0x0030:  03a8 2680                                ..&.
11:57:23.316646 IP localhost.1234 > localhost.33704: Flags [P.], seq 383:469, ack 147, win 512, options [nop,nop,TS val 61353624 ecr 61351552], length 86
	0x0000:  4500 008a 52c1 4000 4006 e9aa 7f00 0001  E...R.@.@.......
	0x0010:  7f00 0001 04d2 83a8 2a6e 94b9 fda3 c1cd  ........*n......
	0x0020:  8018 0200 fe7e 0000 0101 080a 03a8 2e98  .....~..........
	0x0030:  03a8 2680 8154 5b35 2c22 7469 6374 6163  ..&..T[5,"tictac
	0x0040:  746f 652f 626f 6172 6422 2c7b 2265 7665  toe/board",{"eve
	0x0050:  6e74 223a 2274 6963 7461 6374 6f65 5c2f  nt":"tictactoe\/
	0x0060:  626f 6172 6422 2c22 6461 7461 223a 226d  board","data":"m
	0x0070:  6f76 6522 2c22 6a74 7970 6522 3a22 6166  ove","jtype":"af
	0x0080:  622d 6576 656e 7422 7d5d                 b-event"}]
11:57:23.316683 IP localhost.33704 > localhost.1234: Flags [.], ack 469, win 512, options [nop,nop,TS val 61353624 ecr 61353624], length 0
	0x0000:  4500 0034 e19b 4000 4006 5b26 7f00 0001  E..4..@.@.[&....
	0x0010:  7f00 0001 83a8 04d2 fda3 c1cd 2a6e 950f  ............*n..
	0x0020:  8010 0200 fe28 0000 0101 080a 03a8 2e98  .....(..........
	0x0030:  03a8 2e98                                ....
11:57:23.318604 IP localhost.33704 > localhost.1234: Flags [P.], seq 147:192, ack 469, win 512, options [nop,nop,TS val 61353626 ecr 61353624], length 45
	0x0000:  4500 0061 e19c 4000 4006 5af8 7f00 0001  E..a..@.@.Z.....
	0x0010:  7f00 0001 83a8 04d2 fda3 c1cd 2a6e 950f  ............*n..
	0x0020:  8018 0200 fe55 0000 0101 080a 03a8 2e9a  .....U..........
	0x0030:  03a8 2e98 81a7 c952 1c4b 9260 3069 f864  .......R.K.`0i.d
	0x0040:  3e67 eb26 7528 bd33 7f3f a637 3329 a633  >g.&u(.3.?.73).3
	0x0050:  6e2f eb7e 723e a53e 3069 8117 5007 8670  n/.~r>.>0i..P..p
	0x0060:  41                                       A
11:57:23.318617 IP localhost.1234 > localhost.33704: Flags [.], ack 192, win 512, options [nop,nop,TS val 61353626 ecr 61353626], length 0
	0x0000:  4500 0034 52c2 4000 4006 e9ff 7f00 0001  E..4R.@.@.......
	0x0010:  7f00 0001 04d2 83a8 2a6e 950f fda3 c1fa  ........*n......
	0x0020:  8010 0200 fe28 0000 0101 080a 03a8 2e9a  .....(..........
	0x0030:  03a8 2e9a                                ....
11:57:25.324377 IP localhost.1234 > localhost.33704: Flags [P.], seq 469:641, ack 192, win 512, options [nop,nop,TS val 61355632 ecr 61353626], length 172
	0x0000:  4500 00e0 52c3 4000 4006 e952 7f00 0001  E...R.@.@..R....
	0x0010:  7f00 0001 04d2 83a8 2a6e 950f fda3 c1fa  ........*n......
	0x0020:  8018 0200 fed4 0000 0101 080a 03a8 3670  ..............6p
	0x0030:  03a8 2e9a 817e 00a8 5b33 2c22 3136 222c  .....~..[3,"16",
	0x0040:  7b22 7265 7370 6f6e 7365 223a 7b22 626f  {"response":{"bo
	0x0050:  6172 6469 6422 3a33 3435 2c22 6c65 7665  ardid":345,"leve
	0x0060:  6c22 3a38 2c22 626f 6172 6422 3a5b 2258  l":8,"board":["X
	0x0070:  222c 2220 222c 2258 222c 224f 222c 2258  ",".","X","O","X
	0x0080:  222c 2220 222c 224f 222c 2220 222c 224f  ",".","O",".","O
	0x0090:  225d 2c22 6869 7374 6f72 7922 3a5b 302c  "],"history":[0,
	0x00a0:  382c 322c 362c 342c 335d 7d2c 226a 7479  8,2,6,4,3]},"jty
	0x00b0:  7065 223a 2261 6662 2d72 6570 6c79 222c  pe":"afb-reply",
	0x00c0:  2272 6571 7565 7374 223a 7b22 7374 6174  "request":{"stat
	0x00d0:  7573 223a 2273 7563 6365 7373 227d 7d5d  us":"success"}}]
11:57:25.367201 IP localhost.33704 > localhost.1234: Flags [.], ack 641, win 512, options [nop,nop,TS val 61355675 ecr 61355632], length 0
	0x0000:  4500 0034 e19d 4000 4006 5b24 7f00 0001  E..4..@.@.[$....
	0x0010:  7f00 0001 83a8 04d2 fda3 c1fa 2a6e 95bb  ............*n..
	0x0020:  8010 0200 fe28 0000 0101 080a 03a8 369b  .....(........6.
	0x0030:  03a8 3670                                ..6p



nächster Zug:
11:59:41.095166 IP localhost.33704 > localhost.1234: Flags [P.], seq 192:243, ack 641, win 512, options [nop,nop,TS val 61491400 ecr 61355632], length 51
	0x0000:  4500 0067 e19e 4000 4006 5af0 7f00 0001  E..g..@.@.Z.....
	0x0010:  7f00 0001 83a8 04d2 fda3 c1fa 2a6e 95bb  ............*n..
	0x0020:  8018 0200 fe5b 0000 0101 080a 03aa 48c8  .....[........H.
	0x0030:  03a8 3670 81ad 4817 1e17 1325 3235 7920  ..6p..H....%25y.
	0x0040:  3c3b 6a63 7774 3c76 7d63 2772 317a 2761  <;jcwt<v}c'r1z'a
	0x0050:  7b35 646c 3c7e 2673 7b6f 6a2d 2b6a 6435  {5dl<~&s{oj-+jd5
	0x0060:  5652 045b 5135 15                        VR.[Q5.
11:59:41.095177 IP localhost.1234 > localhost.33704: Flags [.], ack 243, win 512, options [nop,nop,TS val 61491400 ecr 61491400], length 0
	0x0000:  4500 0034 52c4 4000 4006 e9fd 7f00 0001  E..4R.@.@.......
	0x0010:  7f00 0001 04d2 83a8 2a6e 95bb fda3 c22d  ........*n.....-
	0x0020:  8010 0200 fe28 0000 0101 080a 03aa 48c8  .....(........H.
	0x0030:  03aa 48c8                                ..H.
11:59:44.852256 IP localhost.1234 > localhost.33704: Flags [P.], seq 641:704, ack 243, win 512, options [nop,nop,TS val 61495157 ecr 61491400], length 63
	0x0000:  4500 0073 52c5 4000 4006 e9bd 7f00 0001  E..sR.@.@.......
	0x0010:  7f00 0001 04d2 83a8 2a6e 95bb fda3 c22d  ........*n.....-
	0x0020:  8018 0200 fe67 0000 0101 080a 03aa 5775  .....g........Wu
	0x0030:  03aa 48c8 813d 5b33 2c22 3137 222c 7b22  ..H..=[3,"17",{"
	0x0040:  6a74 7970 6522 3a22 6166 622d 7265 706c  jtype":"afb-repl
	0x0050:  7922 2c22 7265 7175 6573 7422 3a7b 2273  y","request":{"s
	0x0060:  7461 7475 7322 3a22 7375 6363 6573 7322  tatus":"success"
	0x0070:  7d7d 5d                                  }}]
11:59:44.852281 IP localhost.33704 > localhost.1234: Flags [.], ack 704, win 512, options [nop,nop,TS val 61495157 ecr 61495157], length 0
	0x0000:  4500 0034 e19f 4000 4006 5b22 7f00 0001  E..4..@.@.["....
	0x0010:  7f00 0001 83a8 04d2 fda3 c22d 2a6e 95fa  ...........-*n..
	0x0020:  8010 0200 fe28 0000 0101 080a 03aa 5775  .....(........Wu
	0x0030:  03aa 5775                                ..Wu
11:59:50.752587 IP localhost.1234 > localhost.33704: Flags [P.], seq 704:790, ack 243, win 512, options [nop,nop,TS val 61501057 ecr 61495157], length 86
	0x0000:  4500 008a 52c6 4000 4006 e9a5 7f00 0001  E...R.@.@.......
	0x0010:  7f00 0001 04d2 83a8 2a6e 95fa fda3 c22d  ........*n.....-
	0x0020:  8018 0200 fe7e 0000 0101 080a 03aa 6e81  .....~........n.
	0x0030:  03aa 5775 8154 5b35 2c22 7469 6374 6163  ..Wu.T[5,"tictac
	0x0040:  746f 652f 626f 6172 6422 2c7b 2265 7665  toe/board",{"eve
	0x0050:  6e74 223a 2274 6963 7461 6374 6f65 5c2f  nt":"tictactoe\/
	0x0060:  626f 6172 6422 2c22 6461 7461 223a 226d  board","data":"m
	0x0070:  6f76 6522 2c22 6a74 7970 6522 3a22 6166  ove","jtype":"af
	0x0080:  622d 6576 656e 7422 7d5d                 b-event"}]
11:59:50.752612 IP localhost.33704 > localhost.1234: Flags [.], ack 790, win 512, options [nop,nop,TS val 61501057 ecr 61501057], length 0
	0x0000:  4500 0034 e1a0 4000 4006 5b21 7f00 0001  E..4..@.@.[!....
	0x0010:  7f00 0001 83a8 04d2 fda3 c22d 2a6e 9650  ...........-*n.P
	0x0020:  8010 0200 fe28 0000 0101 080a 03aa 6e81  .....(........n.
	0x0030:  03aa 6e81                                ..n.
11:59:50.755371 IP localhost.33704 > localhost.1234: Flags [P.], seq 243:288, ack 790, win 512, options [nop,nop,TS val 61501060 ecr 61501057], length 45
	0x0000:  4500 0061 e1a1 4000 4006 5af3 7f00 0001  E..a..@.@.Z.....
	0x0010:  7f00 0001 83a8 04d2 fda3 c22d 2a6e 9650  ...........-*n.P
	0x0020:  8018 0200 fe55 0000 0101 080a 03aa 6e84  .....U........n.
	0x0030:  03aa 6e81 81a7 ccfa 41f6 97c8 6dd4 fdc2  ..n.....A...m...
	0x0040:  63da ee8e 2895 b89b 2282 a39f 6e94 a39b  c...(..."...n...
	0x0050:  3392 eed6 2f83 a096 6dd4 84bf 0dba 83d8  3.../...m.......
	0x0060:  1c                                       .
11:59:50.755384 IP localhost.1234 > localhost.33704: Flags [.], ack 288, win 512, options [nop,nop,TS val 61501060 ecr 61501060], length 0
	0x0000:  4500 0034 52c7 4000 4006 e9fa 7f00 0001  E..4R.@.@.......
	0x0010:  7f00 0001 04d2 83a8 2a6e 9650 fda3 c25a  ........*n.P...Z
	0x0020:  8010 0200 fe28 0000 0101 080a 03aa 6e84  .....(........n.
	0x0030:  03aa 6e84                                ..n.
11:59:54.472086 IP localhost.1234 > localhost.33704: Flags [P.], seq 790:964, ack 288, win 512, options [nop,nop,TS val 61504777 ecr 61501060], length 174
	0x0000:  4500 00e2 52c8 4000 4006 e94b 7f00 0001  E...R.@.@..K....
	0x0010:  7f00 0001 04d2 83a8 2a6e 9650 fda3 c25a  ........*n.P...Z
	0x0020:  8018 0200 fed6 0000 0101 080a 03aa 7d09  ..............}.
	0x0030:  03aa 6e84 817e 00aa 5b33 2c22 3138 222c  ..n..~..[3,"18",
	0x0040:  7b22 7265 7370 6f6e 7365 223a 7b22 626f  {"response":{"bo
	0x0050:  6172 6469 6422 3a33 3435 2c22 6c65 7665  ardid":345,"leve
	0x0060:  6c22 3a38 2c22 626f 6172 6422 3a5b 2258  l":8,"board":["X
	0x0070:  222c 2220 222c 2258 222c 224f 222c 2258  ",".","X","O","X
	0x0080:  222c 2258 222c 224f 222c 2220 222c 224f  ","X","O",".","O
	0x0090:  225d 2c22 6869 7374 6f72 7922 3a5b 302c  "],"history":[0,
	0x00a0:  382c 322c 362c 342c 332c 355d 7d2c 226a  8,2,6,4,3,5]},"j
	0x00b0:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x00c0:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x00d0:  6174 7573 223a 2273 7563 6365 7373 227d  atus":"success"}
	0x00e0:  7d5d                                     }]
11:59:54.515416 IP localhost.33704 > localhost.1234: Flags [.], ack 964, win 512, options [nop,nop,TS val 61504820 ecr 61504777], length 0
	0x0000:  4500 0034 e1a2 4000 4006 5b1f 7f00 0001  E..4..@.@.[.....
	0x0010:  7f00 0001 83a8 04d2 fda3 c25a 2a6e 96fe  ...........Z*n..
	0x0020:  8010 0200 fe28 0000 0101 080a 03aa 7d34  .....(........}4
	0x0030:  03aa 7d09                                ..}.

Headers:
0x0000:  4500 0034 52c7 4000 4006 e9fa 7f00 0001
0x0010:  7f00 0001 04d2 83a8 2a6e 9650 fda3 c25a
0x0020:  8010 0200 fe28 0000 0101 080a 03aa 6e84
0x0030:  03aa 6e84     

0x0000:  4500 00e2 52c8 4000 4006 e94b 7f00 0001
0x0010:  7f00 0001 04d2 83a8 2a6e 9650 fda3 c25a
0x0020:  8018 0200 fed6 0000 0101 080a 03aa 7d09
0x0030:  03aa 6e84 817e 00aa
                         
ip-addresse:localhost = 127.0.0.1 ---> 7F.00.00.01	source-port: 1234 = 04d2	dest.-port 33704 = 83a8

deutet alles auf IP4-Header mit length = 0x00e2 - 0x0034 = 174b, protokoll TCP=06, dann 2 Byte/4nibble Checksum
dann tcp source-port, destination port, seq.-nr, ack-nr. ...
0x3aa7d09 bzw. 03aa6e84 = TS val bzw. ecr. kommt vor und ab 52.Byte Payload.

jede Payload beginnt mit 5b = "[" und endet mit 5d = "]"

Fazit: ich weiß wie (fd=9 für tcp localhost, fd=10 für websocket, writev zum Daten senden und readv zum Empfang) und was (datenpakete aufgebaut wie oben, sichtbar in iov[i]) gesendet wird.

Next: tic-tac-toe.html anschauen um zu verstehen, wie Daten eingelesen und verarbeitet werden.

erst wird die im Head die tabelle erstellt und das javascript-file AFB.js eingebunden. Mit Funktin onopen wird Verbindung mit Websocket aufgebaut und im body werden die klickbaren Felder angezeigt.
Direkt erste Frage, kann ich javascript auch durch python ersetzen ?

hierzu eine alte Seite von 2014:	http://luizricardo.org/2014/02/running-python-or-any-language-in-your-browser/
und:	https://brython.info/static_doc/en/html.html

verwendetes Protokoll:
# The websocket protocol x-afb-ws-json1

The WebSocket protocol *x-afb-ws-json1* is used to communicate between
an application and a binder. It allows access to all registered apis
of the binder.

## Architecture

The protocol is intended to be symmetric. It allows:

- to CALL a remote procedure that returns a result
- to push and receive EVENT

## Messages

Valid messages are made of *text* frames that are all valid JSON.

Valid messages are:

Calls:

```txt
[ 2, ID, PROCN, ARGS ]
[ 2, ID, PROCN, ARGS, TOKEN ]
```

Replies (3: OK, 4: ERROR):

```txt
[ 3, ID, RESP ]
[ 4, ID, RESP ]
```

Events:

```txt
[ 5, EVTN, OBJ ]
```

Where:

| Field | Type   | Description
|-------|--------|------------------
| ID    | string | A string that identifies the call. A reply to that call use the ID of the CALL.
| PROCN | string | The procedure name to call of the form "api/verb"
| ARGS  | any    | Any argument to pass to the call (see afb_req_json that returns it)
| RESP  | any    | The response to the call
| TOKEN | string | The authorisation token
| EVTN  | string | Name of the event in the form "api/event"
| OBJ   | any    | The companion object of the event

Below, an example of exchange:

```txt
C->S:   [2,"156","hello/ping",null]
S->C:   [3,"156",{"response":"Some String","jtype":"afb-reply","request":{"status":"success","info":"Ping Binder Daemon tag=pingSample count=1 query=\"null\"","uuid":"ec30120c-6997-4529-9d63-c0de0cce56c0"}}]

## Javascript implementation

The file **AFB.js** is a javascript implementation of the protocol.

session and token:
HTTP protocol is a non-connected protocol. This prevents from using HTTP socket connection in order to authenticate clients. For this reason, the binder should authenticate the application 
by using a shared secret, named "token", and the identification of client is named "session".
For HTML5 applications, the web runtime handles the cookie of session that the binder afb-daemon automatically sets (refer to above, where code-fragments with "session" and "cookie" appeared).
Auf deutsch, über token und session/cookie wird sichergestellt, dass Daten den Weg zur richtigen App finden.


um statt AFB.js python in html5 einzubinden:	https://brython.info/static_doc/en/html.html

tic-tac-toe graphisch testen auf test-notebook (graphisches beispiel: helloworld-html-application)




start tic-tac-toe new, check messages:

beginnende Nachricht von Firefox-Browser an socket:

15:53:53.991644 IP localhost.37474 > localhost.1234: Flags [P.], seq 1:366, ack 1, win 512, options [nop,nop,TS val 106868837 ecr 106868834], length 365
.bGET./tic-tac-toe.html?token=.HTTP/1.1..Host:.localhost:1234.
.User-Agent:.Mozilla/5.0.(X11;.Ubuntu;.Linux.x86_64;.rv:84.0).Gecko/20100101.Firefox/84.0.
.Accept:.text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8.
.Accept-Language:.de,en-US;q=0.7,en;q=0.3..Accept-Encoding:.gzip,.deflate..Connection:.keep-alive..Upgrade-Insecure-Requests:.1...



Als Antwort-Nachricht von socket wird die komplette tic-tac-toe.html-Seite gesendet:
15:53:53.997734 IP localhost.1234 > localhost.37474: Flags [P.], seq 1:2853, ack 366, win 512, options [nop,nop,TS val 106868843 ecr 106868837], length 2852
	0x0030:  065e b065 4854 5450 2f31 2e31 2032 3030  .^.eHTTP/1.1.200
	0x0040:  204f 4b0d 0a43 6f6e 6e65 6374 696f 6e3a  .OK..Connection:
	0x0050:  2063 6c6f 7365 0d0a 436f 6e74 656e 742d  .close..Content-
	0x0060:  4c65 6e67 7468 3a20 3236 3833 0d0a 4554  Length:.2683..ET
	0x0070:  6167 3a20 3743 3433 4143 4232 3030 3030  ag:.7C43ACB20000
	0x0080:  3041 3742 0d0a 4361 6368 652d 436f 6e74  0A7B..Cache-Cont
	0x0090:  726f 6c3a 2031 3030 3030 300d 0a43 6f6e  rol:.100000..Con
	0x00a0:  7465 6e74 2d54 7970 653a 2074 6578 742f  tent-Type:.text/
	0x00b0:  6874 6d6c 0d0a 4461 7465 3a20 5765 642c  html..Date:.Wed,
	0x00c0:  2032 3720 4a61 6e20 3230 3231 2031 343a  .27.Jan.2021.14:
	0x00d0:  3533 3a35 3320 474d 540d 0a0d 0a3c 6874  53:53.GMT....<ht
	0x00e0:  6d6c 3e0a 3c68 6561 643e 0a20 2020 203c  ml>.<head>.....<
	0x00f0:  7469 746c 653e 7469 6320 7461 6320 746f  title>tic.tac.to
	0x0100:  653c 2f74 6974 6c65 3e0a 2020 2020 3c73  e</title>.....<s
	0x0110:  7479 6c65 3e0a 0974 6420 7b0a 0909 626f  tyle>..td.{...bo
	0x0120:  7264 6572 3a20 3170 7820 736f 6c69 6420  rder:.1px.solid.
....
	0x0b00:  6e22 2069 643d 226e 6577 2220 6f6e 636c  n".id="new".oncl
	0x0b10:  6963 6b3d 226a 6176 6173 6372 6970 743a  ick="javascript:
	0x0b20:  2077 732e 6361 6c6c 2827 7469 6374 6163  .ws.call('tictac
	0x0b30:  746f 652f 6e65 7727 2922 3e6e 6577 3c2f  toe/new')">new</
	0x0b40:  7370 616e 3e3c 2f64 6976 3e0a 2020 2020  span></div>.....
	0x0b50:  3c2f 6469 763e 0a0a                      </div>..


Der Browser fragt an für das Source-File AFB.js:
15:53:54.038480 IP localhost.37476 > localhost.1234: Flags [P.], seq 1:337, ack 1, win 512, options [nop,nop,TS val 106868884 ecr 106868883], length 336
	0x0030:  065e b093 4745 5420 2f41 4642 2e6a 7320  .^..GET./AFB.js.
	0x0040:  4854 5450 2f31 2e31 0d0a 486f 7374 3a20  HTTP/1.1..Host:.
	0x0050:  6c6f 6361 6c68 6f73 743a 3132 3334 0d0a  localhost:1234..
	0x0060:  5573 6572 2d41 6765 6e74 3a20 4d6f 7a69  User-Agent:.Mozi
	0x0070:  6c6c 612f 352e 3020 2858 3131 3b20 5562  lla/5.0.(X11;.Ub
	0x0080:  756e 7475 3b20 4c69 6e75 7820 7838 365f  untu;.Linux.x86_
	0x0090:  3634 3b20 7276 3a38 342e 3029 2047 6563  64;.rv:84.0).Gec
...


Das socket sendet das File AFB.js:
15:53:54.047048 IP localhost.1234 > localhost.37476: Flags [P.], seq 1:5563, ack 337, win 512, options [nop,nop,TS val 106868893 ecr 106868884], length 5562
	0x0030:  065e b094 4854 5450 2f31 2e31 2032 3030  .^..HTTP/1.1.200
	0x0040:  204f 4b0d 0a43 6f6e 6e65 6374 696f 6e3a  .OK..Connection:
	0x0050:  2063 6c6f 7365 0d0a 436f 6e74 656e 742d  .close..Content-
	0x0060:  4c65 6e67 7468 3a20 3533 3837 0d0a 4554  Length:.5387..ET
	0x0070:  6167 3a20 3634 4130 3837 4546 3030 3030  ag:.64A087EF0000
	0x0080:  3135 3042 0d0a 4361 6368 652d 436f 6e74  150B..Cache-Cont
	0x0090:  726f 6c3a 2031 3030 3030 300d 0a43 6f6e  rol:.100000..Con
	0x00a0:  7465 6e74 2d54 7970 653a 2074 6578 742f  tent-Type:.text/
	0x00b0:  6a61 7661 7363 7269 7074 0d0a 4461 7465  javascript..Date
	0x00c0:  3a20 5765 642c 2032 3720 4a61 6e20 3230  :.Wed,.27.Jan.20
	0x00d0:  3231 2031 343a 3533 3a35 3420 474d 540d  21.14:53:54.GMT.
	0x00e0:  0a0d 0a2f 2a0a 202a 2043 6f70 7972 6967  .../*..*.Copyrig
...
	0x15a0:  2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a  ****************
	0x15b0:  2a2a 2f0a 7265 7475 726e 207b 0a09 636f  **/.return.{..co
	0x15c0:  6e74 6578 743a 2041 4642 5f63 6f6e 7465  ntext:.AFB_conte
	0x15d0:  7874 2c0a 0977 733a 2041 4642 5f77 6562  xt,..ws:.AFB_web
	0x15e0:  736f 636b 6574 0a7d 3b0a 7d3b 0a0a       socket.};.};..



Der Browser verarbeitet AFB.js, öffnet neuen Port und wechselt auf websocket protokoll (x-afb-ws-json1):
15:53:54.107260 IP localhost.37478 > localhost.1234: Flags [P.], seq 1:524, ack 1, win 512, options [nop,nop,TS val 106868953 ecr 106868952], length 523
	0x0030:  065e b0d8 4745 5420 2f61 7069 3f78 2d61  .^..GET./api?x-a
	0x0040:  6662 2d74 6f6b 656e 3d48 454c 4c4f 2048  fb-token=HELLO.H
	0x0050:  5454 502f 312e 310d 0a48 6f73 743a 206c  TTP/1.1..Host:.l
	0x0060:  6f63 616c 686f 7374 3a31 3233 340d 0a55  ocalhost:1234..U
...
	0x0120:  5365 632d 5765 6253 6f63 6b65 742d 5665  Sec-WebSocket-Ve
	0x0130:  7273 696f 6e3a 2031 330d 0a4f 7269 6769  rsion:.13..Origi
	0x0140:  6e3a 2068 7474 703a 2f2f 6c6f 6361 6c68  n:.http://localh
	0x0150:  6f73 743a 3132 3334 0d0a 5365 632d 5765  ost:1234..Sec-We
	0x0160:  6253 6f63 6b65 742d 5072 6f74 6f63 6f6c  bSocket-Protocol
	0x0170:  3a20 782d 6166 622d 7773 2d6a 736f 6e31  :.x-afb-ws-json1
	0x0180:  0d0a 5365 632d 5765 6253 6f63 6b65 742d  ..Sec-WebSocket-
	0x0190:  4578 7465 6e73 696f 6e73 3a20 7065 726d  Extensions:.perm
	0x01a0:  6573 7361 6765 2d64 6566 6c61 7465 0d0a  essage-deflate..
	0x01b0:  5365 632d 5765 6253 6f63 6b65 742d 4b65  Sec-WebSocket-Ke
	0x01c0:  793a 2078 6c78 6562 7938 3966 6c64 4e79  y:.xlxeby89fldNy
	0x01d0:  555a 4275 4950 4937 513d 3d0d 0a43 6f6e  UZBuIPI7Q==..Con



der Server-socket akzeptiert den Umstieg auf afb-ws-json1:
15:53:54.107783 IP localhost.1234 > localhost.37478: Flags [P.], seq 1:207, ack 524, win 512, options [nop,nop,TS val 106868953 ecr 106868953], length 206
	0x0030:  065e b0d9 4854 5450 2f31 2e31 2031 3031  .^..HTTP/1.1.101
	0x0040:  2053 7769 7463 6869 6e67 2050 726f 746f  .Switching.Proto
	0x0050:  636f 6c73 0d0a 5570 6772 6164 653a 2077  cols..Upgrade:.w
	0x0060:  6562 736f 636b 6574 0d0a 5365 632d 5765  ebsocket..Sec-We
	0x0070:  6253 6f63 6b65 742d 5072 6f74 6f63 6f6c  bSocket-Protocol
	0x0080:  3a20 782d 6166 622d 7773 2d6a 736f 6e31  :.x-afb-ws-json1
	0x0090:  0d0a 5365 632d 5765 6253 6f63 6b65 742d  ..Sec-WebSocket-
	0x00a0:  4163 6365 7074 3a20 7052 464a 3253 3853  Accept:.pRFJ2S8S
	0x00b0:  6339 5942 3044 5564 356a 2b6a 536e 3433  c9YB0DUd5j+jSn43



Server setzt neues Spielfeld auf und schickt es an Browser:
15:53:54.112260 IP localhost.1234 > localhost.37478: Flags [P.], seq 207:269, ack 566, win 512, options [nop,nop,TS val 106868958 ecr 106868958], length 62
	0x0030:  065e b0de 813c 5b33 2c22 3122 2c7b 226a  .^...<[3,"1",{"j
	0x0040:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0050:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0060:  6174 7573 223a 2273 7563 6365 7373 227d  atus":"success"}
	0x0070:  7d5d                                     }]
15:53:54.112279 IP localhost.1234 > localhost.37478: Flags [P.], seq 269:354, ack 566, win 512, options [nop,nop,TS val 106868958 ecr 106868958], length 85
	0x0030:  065e b0de 8153 5b35 2c22 7469 6374 6163  .^...S[5,"tictac
	0x0040:  746f 652f 626f 6172 6422 2c7b 2265 7665  toe/board",{"eve
	0x0050:  6e74 223a 2274 6963 7461 6374 6f65 5c2f  nt":"tictactoe\/
	0x0060:  626f 6172 6422 2c22 6461 7461 223a 226e  board","data":"n
	0x0070:  6577 222c 226a 7479 7065 223a 2261 6662  ew","jtype":"afb
	0x0080:  2d65 7665 6e74 227d 5d                   -event"}]
15:53:54.125677 IP localhost.1234 > localhost.37478: Flags [P.], seq 354:514, ack 610, win 512, options [nop,nop,TS val 106868971 ecr 106868971], length 160
	0x0030:  065e b0eb 817e 009c 5b33 2c22 3222 2c7b  .^...~..[3,"2",{
	0x0040:  2272 6573 706f 6e73 6522 3a7b 2262 6f61  "response":{"boa
	0x0050:  7264 6964 223a 3334 352c 226c 6576 656c  rdid":345,"level
	0x0060:  223a 382c 2262 6f61 7264 223a 5b22 2022  ":8,"board":["."
	0x0070:  2c22 2022 2c22 2022 2c22 2022 2c22 2022  ,".",".",".","."
	0x0080:  2c22 2022 2c22 2022 2c22 2022 2c22 2022  ,".",".",".","."
	0x0090:  5d2c 2268 6973 746f 7279 223a 5b5d 7d2c  ],"history":[]},
	0x00a0:  226a 7479 7065 223a 2261 6662 2d72 6570  "jtype":"afb-rep
	0x00b0:  6c79 222c 2272 6571 7565 7374 223a 7b22  ly","request":{"
	0x00c0:  7374 6174 7573 223a 2273 7563 6365 7373  status":"success
	0x00d0:  227d 7d5d                                "}}]



Spieler klickt auf ein Feld im tictactoe-Spielfeld und Browser sendet dies an Server, Server berechnet neues Spielfeld und gibt es an Brwoser zurück:
16:22:56.601699 IP localhost.37478 > localhost.1234: Flags [P.], seq 654:704, ack 674, win 512, options [nop,nop,TS val 108611438 ecr 108078187], length 50
	0x0000:  4500 0066 9f33 4000 4006 9d5c 7f00 0001  E..f.3@.@..\....
	0x0010:  7f00 0001 9266 04d2 173c 8298 24b6 60a9  .....f...<..$.`.
	0x0020:  8018 0200 fe5a 0000 0101 080a 0679 476e  .....Z.......yGn
	0x0030:  0671 246b 81ac c984 72ef 92b6 5ecd fda6  .q$k....r...^...
	0x0040:  5ecd bded 119b a8e7 0680 acab 1f80 bfe1  ^...............
	0x0050:  50c3 b2a6 1b81 ade1 0acd f3b4 0fc3 ebcc  P...............
	0x0060:  37a3 85cb 50b2                           7...P.

16:22:56.601980 IP localhost.1234 > localhost.37478: Flags [P.], seq 674:736, ack 704, win 512, options [nop,nop,TS val 108611438 ecr 108611438], length 62
	0x0000:  4500 0072 6e43 4000 4006 ce40 7f00 0001  E..rnC@.@..@....
	0x0010:  7f00 0001 04d2 9266 24b6 60a9 173c 82ca  .......f$.`..<..
	0x0020:  8018 0200 fe66 0000 0101 080a 0679 476e  .....f.......yGn
	0x0030:  0679 476e 813c 5b33 2c22 3422 2c7b 226a  .yGn.<[3,"4",{"j
	0x0040:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0050:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0060:  6174 7573 223a 2273 7563 6365 7373 227d  atus":"success"}
	0x0070:  7d5d                                     }]
16:22:56.602022 IP localhost.37478 > localhost.1234: Flags [.], ack 736, win 512, options [nop,nop,TS val 108611438 ecr 108611438], length 0
	0x0000:  4500 0034 9f34 4000 4006 9d8d 7f00 0001  E..4.4@.@.......
	0x0010:  7f00 0001 9266 04d2 173c 82ca 24b6 60e7  .....f...<..$.`.
	0x0020:  8010 0200 fe28 0000 0101 080a 0679 476e  .....(.......yGn
	0x0030:  0679 476e                                .yGn
16:22:56.604488 IP localhost.37478 > localhost.1234: Flags [P.], seq 704:748, ack 822, win 512, options [nop,nop,TS val 108611441 ecr 108611439], length 44
	0x0000:  4500 0060 9f36 4000 4006 9d5f 7f00 0001  E..`.6@.@.._....
	0x0010:  7f00 0001 9266 04d2 173c 82ca 24b6 613d  .....f...<..$.a=
	0x0020:  8018 0200 fe54 0000 0101 080a 0679 4771  .....T.......yGq
	0x0030:  0679 476f 81a6 b241 771b e973 5b39 8763  .yGo...Aw..s[9.c
	0x0040:  5b39 c628 146f d322 0374 d76e 1574 d333  [9.(.o.".t.n.t.3
	0x0050:  1339 9e2f 0277 de6d 5553 f70d 3b54 901c  .9./.w.mUS..;T..
16:22:56.604779 IP localhost.1234 > localhost.37478: Flags [P.], seq 822:983, ack 748, win 512, options [nop,nop,TS val 108611441 ecr 108611441], length 161
	0x0000:  4500 00d5 6e45 4000 4006 cddb 7f00 0001  E...nE@.@.......
	0x0010:  7f00 0001 04d2 9266 24b6 613d 173c 82f6  .......f$.a=.<..
	0x0020:  8018 0200 fec9 0000 0101 080a 0679 4771  .............yGq
	0x0030:  0679 4771 817e 009d 5b33 2c22 3522 2c7b  .yGq.~..[3,"5",{
	0x0040:  2272 6573 706f 6e73 6522 3a7b 2262 6f61  "response":{"boa
	0x0050:  7264 6964 223a 3334 352c 226c 6576 656c  rdid":345,"level
	0x0060:  223a 382c 2262 6f61 7264 223a 5b22 5822  ":8,"board":["X"
	0x0070:  2c22 2022 2c22 2022 2c22 2022 2c22 2022  ,".",".",".","."
	0x0080:  2c22 2022 2c22 2022 2c22 2022 2c22 2022  ,".",".",".","."
	0x0090:  5d2c 2268 6973 746f 7279 223a 5b30 5d7d  ],"history":[0]}
	0x00a0:  2c22 6a74 7970 6522 3a22 6166 622d 7265  ,"jtype":"afb-re
	0x00b0:  706c 7922 2c22 7265 7175 6573 7422 3a7b  ply","request":{
	0x00c0:  2273 7461 7475 7322 3a22 7375 6363 6573  "status":"succes
	0x00d0:  7322 7d7d 5d                             s"}}]


dies wiederholt sich nun fortlaufend bis Spielende!

5.2.
App-Vorlage gedownloaded: ~/Schreibtisch/agl_microservice/AGLapps/mpu6050-agl-qml

---> in HVAC einlesen und objektorientiertes Programmieren QT weitermachen, die App mit html erstellen und anzuzeigen klappt irgendwie nicht.

8.2.:
Vorgehen gemäß datei "3_Creating_a_New_Application.md"
config.cmake erstellt/angepasst   flag -fPIC = gcc creates position independent code
---NOTE: !! in cmake-file wurde "application/vnd.agl.service" als app-Form angegeben !! ----

danach config.xml.in.sample rüberkopiert und autobuild laufen lassen, damit es config.xml.in generiert.
(cmds:
gast@gast-pc:~/Schreibtisch/agl_microservice/AGLapps/selfmade_QTapp/build$ mkdir build;cd build
gast@gast-pc:~/Schreibtisch/agl_microservice/AGLapps/selfmade_QTapp/build$ mkdir cmake ..
gast@gast-pc:~/Schreibtisch/agl_microservice/AGLapps/selfmade_QTapp/build$ make autobuild

main.cpp hinzugefügt und durchgelesen

9.2.
hellocount.qml hinzugefügt
Hellocount.qrc hinzugefügt
cd ..; ./autobuild/agl/autobuild build ;  ./autobuild package
das erzeugt wgt kann nicht auf qemu installiert werden

beim Builden von HVAC trat Fehler auf:
"Project ERROR: Unknown module(s) in QT: aglextras"

Makefile INCpath anpassen mit "/home/gast/Schreibtisch/agl_microservice/qtaglextras/src/hmi" und 
qtaglextraglobal.h

build agl-extras:
gast@gast-pc:~/Schreibtisch/agl_microservice/qtaglextras$ qmake CONFIG+=debug_and_release
Info: creating stash file /home/gast/Schreibtisch/agl_microservice/qtaglextras/.qmake.stash
Info: creating cache file /home/gast/Schreibtisch/agl_microservice/qtaglextras/.qmake.cache

Running configuration tests...
Checking for LibHomescreen... yes
Checking for LibWindowManager... no
Checking for wgtpkg-pack... yes
Done running configuration tests.

Configure summary:

Qt AGLExtras:
  LibHomeScreen .......................... yes
  LibWindowManager ....................... no
  AGL HMI Framework ...................... no
  wgtpkg-pack ............................ yes

Qt is now configured for building. Just run 'make'.
Once everything is built, you must run 'make install'.
Qt will be installed into '/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr'.

Prior to reconfiguration, make sure you remove any leftovers from
the previous build.

Fehler bei  src/aglextras/hmi/aglwmclient.h:#include <QtAGLExtras/aglextrasglobal.h>  beheben durch manuelle Pfadangabe 
gast@gast-pc:~/Schreibtisch/agl_microservice/qtaglextras$ export C_PLUSINCLUDE_PATH=/home/gast/Schreibtisch/agl_microservice/qtaglextras/src:$CPLUS_INCLUDE_PATH
gast@gast-pc:~/Schreibtisch/agl_microservice/qtaglextras$ export C_INCLUDE_PATH=/home/gast/Schreibtisch/agl_microservice/qtaglextras/src:$C_INCLUDE_PATH
und anpassen der include-statements als auch das Makefile, worin alles mit examples gelöscht wird.
dann ausführen: make; make install



---> install AGL HMI framework and LibWindowManager ?!
NOTE windowmanager: Only single-surface Qt applications are support through the
    libwindowmanager library. This is a limitation of how Qt creates surface
    IDs for the ivi-application interface. !!!

 
gast@gast-pc:~/Schreibtisch/agl_microservice/agl-service-windowmanager-2017-6887035/build$ cmake ..
-- Toolchain file defaulted to '/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/share/cmake/OEToolchainConfig.cmake'
-- The C compiler identification is GNU 9.3.0
-- The CXX compiler identification is GNU 9.3.0
-- Check for working C compiler: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/x86_64-agl-linux/x86_64-agl-linux-gcc
-- Check for working C compiler: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/x86_64-agl-linux/x86_64-agl-linux-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/x86_64-agl-linux/x86_64-agl-linux-g++
-- Check for working CXX compiler: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/x86_64-agl-linux/x86_64-agl-linux-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found PkgConfig: /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/bin/pkg-config (found version "0.29.2") 
-- Checking for module 'wayland-client>=1.11.0'
--   Found wayland-client, version 1.18.0
-- Checking for module 'afb-daemon'
--   Found afb-daemon, version 10.90.0
-- Checking for module 'libsystemd>=222'
--   Found libsystemd, version 244
-- Configuring done
-- Generating done
-- Build files have been written to: /home/gast/Schreibtisch/agl_microservice/agl-service-windowmanager-2017-6887035/build

gast@gast-pc:~/Schreibtisch/agl_microservice/agl-service-windowmanager-2017-6887035/build$ make

to do:
HVAC.wgt auf qemu installieren und testen   ---> fehlgeschlagen, wegen fehlender QTlibsExtra Lib

aus github HVAC und self_hvac downloaden, bei letzterem muss bei qemu noch required: self_hvac.service angepasst werden

10.2.
den "build"-Folder gelöscht weil darin noch alte Pfade lagen mit /home/cloud/...

das rüberkopierte self_hvac.wgt aus dem package-ordner läuft in QEMU, lediglich das runde Anzeig-Icon wird nicht dargestellt.
----> Weiterarbeiten it self_hvac

Analyse Aufbau 
self_hvac
---> app: source-Datei (main.cpp, translator.cpp), qml-Dateien, qrc-Datei, app.pro (qmake ruft diese Datei auf) und app.pri (wird inkludiert von app.pro) 
   --> images: alle Bild-Dateien außer icon.svg und images.qrc 
   (--> translations: .ts-Dateien zur Übersetzung in Japanisch/Französisch) 
---> autobuild:  build-file with target "package" and others
---> hvac.pro (project-file for qmake) 
---> package: config.xml (configuration file) , icon.svg, package.pro ( project-file for building wgt)


ich habe qtcreator installiert und es wurde qt5 verwendet ---> Projekt in QTcreator erstellen/übernehmen

11.2
( afm-client is a HTML5 UI that allows to install/uninstall applications as well as starting/pausing them as already demonstrated with afm-util. )

gast@gast-pc:~/Schreibtisch/agl_microservice/AGLapps/self_hvac$ qmlscene app/HVAC.qml 
file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml:19 module "QtQuick.Controls" version 2.0 is not installed

--> sudo apt-get install qml-module-qtquick-controls2
aber: bei gast@gast-pc:~/Schreibtisch/agl_microservice$ qmlscene afb-daemon/app-framework-binder/test/token-websock.qml  bekomme ich keine Fehler

Versuch: alles mit "translator" aus self_hvac zu entfernen ---> scheint geklappt zu haben, autobuild package hat gebuildet ohne Fehler
neuer Fehler: module "AGL.Demo.Controls" is not installed  ---> gast@gast-pc:~/Schreibtisch/agl_microservice/qtquickcontrols2-agl-9b1ac84$ qmake;make;make install

gast@gast-pc:~/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/qml/AGL/Demo/Controls$ cat qmldir
ToggleButton 1.0 ToggleButton.qml
ImageButton 1.0 ImageButton.qml
Keyboard 1.0 Keyboard.qml


Der Import-name beginnt nach sdk/sysroots/corei7-64-agl-linux/usr/lib -->  sdk/sysroots/corei7-64-agl-linux/usr/lib/qml/QtQuick/Controls.2
wird zu "import QtQuick.Controls 2.0". Aber im Ordner Controls2.0 findet sich eine .so Datei.

zum Debuggen:	gast@gast-pc:~/Schreibtisch/agl_microservice/AGLapps/self_hvac$ export QML_IMPORT_TRACE=1

---> gast@gast-pc:~/Schreibtisch/agl_microservice/AGLapps/self_hvac$ qmlscene app/HVAC.qml 
QQmlImportDatabase::addImportPath: "/usr/lib/x86_64-linux-gnu/qt5/qml"
QQmlImportDatabase::addImportPath: "qrc:/qt-project.org/imports"
QQmlImportDatabase::addImportPath: "/usr/lib/qt5/bin"
QQmlImports(file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml)::addLibraryImport: "QtQuick" 2.6 as ""
QQmlImports(file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml)::importExtension: loaded "/usr/lib/x86_64-linux-gnu/qt5/qml/QtQuick.2/qmldir"
QQmlImportDatabase::registerPluginTypes: "QtQuick" from "/usr/lib/x86_64-linux-gnu/qt5/qml/QtQuick.2"
QQmlImports(file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml)::addLibraryImport: "QtQuick.Layouts" 1.1 as ""
QQmlImports(file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml)::importExtension: loaded "/usr/lib/x86_64-linux-gnu/qt5/qml/QtQuick/Layouts/qmldir"
QQmlImportDatabase::registerPluginTypes: "QtQuick.Layouts" from "/usr/lib/x86_64-linux-gnu/qt5/qml/QtQuick/Layouts"
QQmlImports(file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml)::addLibraryImport: "QtQuick.Controls" 2.0 as ""
QQmlImports(file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml)::importExtension: loaded "/usr/lib/x86_64-linux-gnu/qt5/qml/QtQuick/Controls.2/qmldir"
QQmlImportDatabase::registerPluginTypes: "QtQuick.Controls" from "/usr/lib/x86_64-linux-gnu/qt5/qml/QtQuick/Controls.2"
QQmlImports(file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml)::addLibraryImport: "QtQuick.Window" 2.0 as ""
QQmlImports(file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml)::importExtension: loaded "/usr/lib/x86_64-linux-gnu/qt5/qml/QtQuick/Window.2/qmldir"
QQmlImportDatabase::registerPluginTypes: "QtQuick.Window" from "/usr/lib/x86_64-linux-gnu/qt5/qml/QtQuick/Window.2"
file:///home/gast/Schreibtisch/agl_microservice/AGLapps/self_hvac/app/HVAC.qml:21 module "AGL.Demo.Controls" is not installed

Unterschied qml <---> qmlc : das qmlc file entsteht nachdem qml erfolgreich mit qmlscene gestartet wurde

neuer Versuch:	gast@gast-pc:~/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/qml$ sudo cp -r AGL /usr/lib/x86_64-linux-gnu/qt5/qml/

Hat geklappt (ich hatte testweise AGL Demo Controls von version 1.0 auf 1.1 gesetzt und vergessen zurückzusetzen.)
qt install:  sudo apt-get install qt5-default
Qt tutorial durcharbeiten (https://wiki.qt.io/Qt_for_Beginners)  --> Projekt-import klappt nicht, Per Hand rüberkopieren

12.2.
ich bilde mal nur den ordner hvac/app nach zum Testen	---> in QT tauchen immer Fehler zu fehlenden Modulen o.Ä. auf, ich bleibe besser bei qmlscene, eingaben sind dort auch möglich,
wenn in einem anderen Terminal das Binding gestartet wurde

QT_Fehler cannot find module quick qml:	apt-get install qtdeclarative5-dev libqt5websockets5-dev

pro-file angepasst, main.cpp testlauf bloß app.exec, mit Herausnahme von hvac.h klappt Kompilieren/debuggen ---> Grundgerüst steht !

Fehler:
" This application failed to start because it could not find or load the Qt platform plugin "wayland"
in "".
Available platform plugins are: eglfs, linuxfb, minimal, minimalegl, offscreen, vnc, xcb.
Reinstalling the application may fix this problem. " --> vorerst setenv auskommentiert

15.2:
für debugging die Argumente port 1234 und token 123456 beim start mitgeben, in zweitem Terminal:	afb-daemon --port=1234 --token=123456

buiding erfolgt mir qmake wie folgt:
/usr/lib/qt5/bin/qmake -o Makefile ../Debug_test_app2/Debug_test_app2.pro -spec linux-g++ CONFIG+=debug CONFIG+=qml_debug
g++ -c -pipe -g -Wall -W -D_REENTRANT -fPIC -DQT_QML_DEBUG -DQT_QUICK_LIB -DQT_GUI_LIB -DQT_QML_LIB -DQT_WEBSOCKETS_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -I../Debug_test_app2 -I. -isystem /usr/include/x86_64-linux-gnu/c++/7 -isystem /usr/include/x86_64-linux-gnu -isystem /usr/include/x86_64-linux-gnu/qt5 -isystem /usr/include/x86_64-linux-gnu/qt5/QtQuick -isystem /usr/include/x86_64-linux-gnu/qt5/QtGui -isystem /usr/include/x86_64-linux-gnu/qt5/QtQml -isystem /usr/include/x86_64-linux-gnu/qt5/QtWebSockets -isystem /usr/include/x86_64-linux-gnu/qt5/QtNetwork -isystem /usr/include/x86_64-linux-gnu/qt5/QtCore -I. -isystem /usr/include/libdrm -I/usr/lib/x86_64-linux-gnu/qt5/mkspecs/linux-g++ -o main.o ../Debug_test_app2/main.cpp
g++  -o hvac main.o moc_hvac.o   -lQt5Quick -lQt5Gui -lQt5Qml -lQt5WebSockets -lQt5Network -lQt5Core -lGL -lpthread 


16.2.
orientieren an mpu6050-agl-qml, weil mit klassenheader reinkommen zu schwierig ?! --> install "qtquickcontrols2-5-dev"

17.2.
nach hINzufügen des QML-Moduls in .pro-Datei und qrc-File klappt Debugging mit Bildausgabe, obwohl Ausgabe in QML komt mit "bindingaddress is not defined"

wenn ich main.cpp starte, keine Ausgabe in tcpdump , test mit:	afb-client-demo ws://localhost:1234/api?token=123456 --> klappt nur mit laufendem afb-dameon (=server)

frage 1: wann genau öffnet sich das QML-Fenster? --> bei "engine.load(QUrl(QStringLiteral("qrc:/mpu-temp.qml")));"  wird schwarzes Fenster geladen und bei app.exec ist anwendung sichtbar

 wenn ich über afb-client demo den Port eingebe, den qml-debugging erwaret, kommt:
QML debugging is enabled. Only use this in a safe environment.
QML Debugger: Waiting for connection on port 44123... --> unter Einstellungen qml-debugging ausschalten und diese Nachricht verschwindet

websocket-client ausführen mit wscat -l "ws://localhost:1234"

---> Das debugging wird vor QURL bindingAddress abgebrochen ?! Wenn ich Port manuell setze klappt es, 
19.2.
main.cpp soweit verstanden, jetzt dem QML-File widmen und herausfinden wie Daten ausgetauscht werden (websockets?) ---> über Funktion: void sendTextMessage(string message) //Send message to server.
qml-File befindet sich ausschließlich in "onStatusChanged" , sendbytes = 0 wird ausgegeben ---> warum keine Daten gesendet ?

qml: here: onStatusChanged
qml: [2,"9999","mpu6050/temp",""]
qml: request_str:  [2,9999,mpu6050/temp,]
qml: json.stringify:  [2,"9999","mpu6050/temp",""]
qml: str_len of JSON...:  28
qml: debug - number sendbytes: 0

---> vielleicht fehlt die Server-Anwendung ?! --> deinstalliere wscat und installiere "npm ws", dann server schreiben und starten mit node ws-server.js

gast@gast-pc:/usr/lib$ sudo npm uninstall wscat
removed 9 packages in 0.222s
gast@gast-pc:/usr/lib$ npm list -g --depth=0
/usr/lib
└── npm@6.13.4



funktioniert:
gast@gast-pc:~/Schreibtisch/agl_microservice$ node ws_server.js 
received: [2,"9999","mpu6050/temp","X"]

in QT: sendbytes 28


Für AGL-entwicklung:
<
http://old-docs.automotivelinux.org/docs/en/icefish/devguides/reference/afb-helpers/qafbwebsocketclient.html
A WebSocket client to an Application Framework Binder
QAfbWebsocketClient(QObject* parent = nullptr)

Default constructor.

    parent: Parent object.

QAbstractSocket::SocketError error()

Get and return the last error code.
QString errorString()

Get and return the last error as a string.
bool isValid()

Check if connection is ready or not.

Returns true if the connected is ready to read and write, false otherwise.
void call(const QString& api, const QString& verb, const QJsonValue& arg = QJsonValue(), closure_t closure = nullptr)

Call an api’s verb with an argument.

    api: Api to call.
    verb: Verb to call.
    arg: Argument to pass.
    closure: callback function to call at the verb reply

void QAfbWebsocketClient::sendTextMessage(QString msg)

Send a text message over the websocket.

This is use for test only, you should not use this method because it sent text as-is, so you have to follow the binder’s protocol by your self.

    msg: Message to send.
>


22.2.
in QML ein Chat-Fenster kreieren  (zB nach Vorlage HVAC.qml), der Nachrichtenaustausch erfolgt später

23.2.
Tutorial for an chat-app as start/inspiration: https://doc.qt.io/qt-5/qtquickcontrols-chattutorial-example.html  
die ersten 3 Chapter durchgearbeitet

24.2.
to do: chapter weiter durcharbeiten (Chapter 4 SQL, skipped), material dark theme auch nicht so interessant

testweise Text per Websocket senden  
if-Abfrage in QML auf einmal nicht mehr möglich aber davor schon (mpu-temp.qml ?!) --> verwirrend da qml java-based on page/window usw. möglihc ist

bei mpu-tmep.qml habe ich mit Window QML Type gearbeitet --> beibehalten und anhand dessen chat-app erstellen !
Ich kann Window und ApplicationWindow verwenden als QML-Type aber muss unter websocket: "active: true" setzen um bytes zu versenden.

Senden klappt für mpu-test-qml und mpu-chat.qml

tutorial für Interaktion zwischen qml und c++:	https://doc.qt.io/qt-5/qtqml-tutorials-extending-qml-example.html
						https://doc.qt.io/qt-5/qtqml-cppintegration-exposecppattributes.html

26.2.
Das Tutorial für den PieChart wirft Fehler aus, aber ich habe etwas mehr Theoriewissen erlangt
https://phone.docs.ubuntu.com/en/apps/qml/tutorials-add-cpp-backend-your-qml-app

https://github.com/eyllanesc/stackoverflow/tree/master/questions/50609108  (falls nicht klappt, AGL-apps anschauen )

wichtig: onTextChanged um eingegebens zu verarbeiten

<<
Unterschiede cmake vs qmake:
Both are build systems, but they're not very similar at all. If your project uses Qt, you're probably best off using qmake. CMake is more generic, and fits pretty much any type of project.

Both qmake and CMake generate a Makefile, which is read by make to build the project. Not all build systems generate a Makefile, but many do. Even a Makefile is a type of build system; it tells the compiler and linker what to do, in order to create an executable (or a dynamic or static library).

If your project uses Qt, but you don't want to use qmake, you'll have to do a few more things yourself:

    running the Meta Object Compiler (MOC)
    include paths (tell the compiler where to look for Qt headers)
    linking (tell the linker where to look for Qt libraries)

So, you'll have to do a bit more work to build a Qt project without qmake, but it is possible and it will teach you a lot about how Qt and qmake do things.
>>

QML-input test klappt, ich muss vor normalem build mit hammer wegen main.moc zuerst rechtsklick aufs Projekt und qmake build auswählen
Für Positionierung lassen sich sogenannte anchors verwenden (in main.moc stehen Deklarationen und Definitionen zur erstellten Klasse, hier Backend) 

Text parsing klappt für QML_input_test


29.2.
Mit binding-address verbinden, um eingabe an websocket zu senden --> an websocket: active: true denken und _websocket.sendtext
(in MPU-app steht auch ein passendes example binding für AGL )

das Senden an Websocket klappt ---> next: das empfangen von Nachrichten aus websocket-server 

<< testfunktion ws_server.js:
const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 1234 });

wss.on('connection', function connection(ws) {
  ws.on('message', function incoming(message) {
    console.log('received: %s', message);
  });
ws.send('something');
});	>>


Nachrichtenaustausch zwischen ws_server-js und qml_test klappt, wichtig bei QML-get-Functions die Klammer hinten wegzulassen und argument-name aus info googeln.

2.3.
Layout-Idee: Hintergrund rot wenn nicht verbunden, grün wenn verbunden;
Hintergrund-Bild wird angezeigt
auswählen Protokolle: bluetooth, MQTT usw. ?	Priorität: erst Kommunikation etablieren mit Sprache und Bluetooth, danach layout verfeinern, verschiedene Sprachen usw.

3.3.: versuch empfangene Nachrichten darzustellen nach gleichem Schema mit Backend-classe --> funktioniert.
Next: versuchen QML-input als wgt für AGL zu builden, /home/gast/Schreibtisch/agl_microservice/app_self_QML entsprechend umbauen;  touchpanel öffnen zur Dateneingabe
(testen mit abf-daemon und afb-client-demo klappt nicht, dazu ist wohl binding mit Verb nötig )

geänderte Dateien: package/config.xml, package/package.pro, app/app.pro
ersetzte Dateien: main.cpp, main.qml, main.qrc
neu hinzugefügt: main.moc
komplett gelöscht: Ordner images
------------------------------------------> 'autobbuild package' der app self_qml klappt ---> auf qemu testen
----> in app2_self_qml gleicher build ohne main.moc in app

passendes binding für self-qml programmieren und dann in qemu testen, Beispiele unter: ~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/bindings$ 

das config.xml des .wgt muss benötigte bindings angeben --> vorerst dummy-binding angegeben und das layout wird angezeigt, wenn auch etwas verschoben.
To do: eine Text-/Spracheingabe verwenden ( --> ich verwende einen Testsend-Button), binding erstellen

8.3.
zu binding, wie connection erstellen mit ws, open socket ?

für build:
gast@gast-pc:~/Schreibtisch/agl_microservice/app_self_QML_srvc$ export LIBRARY_PATH=/home/gast/local/lib/pkgconfig:/home/gast/local/lib:$LIBRARY_PATH
gast@gast-pc:~/Schreibtisch/agl_microservice/app_self_QML_srvc$ ldconfig
gast@gast-pc:~/Schreibtisch/agl_microservice/app_self_QML_srvc$ gcc -fPIC -shared -Wall -g3 self_QML_binding.c -o self_QML_binding.so $(pkg-config --cflags --libs afb-daemon libafbwsc) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include

"gast@gast-pc:~/Schreibtisch/agl_microservice/app_self_QML_srvc$ afb-daemon --binding ./self_QML_binding.so --port 1234 --token 123456"
 tut sich gar nichts;

Erklärung:   ws-server=xxxx
---> Provides a binder afb-binder service through WebSocket. The value of xxxx is either a unix naming socket, of the form “unix:path/api”, or an internet socket, of the form “host:port/api”.

"node ws-server.js" öffnet:
gast@gast-pc:~$ sudo netstat -tulpn | grep 1234
tcp6       0      0 :::1234                 :::*                    LISTEN      21526/node       

aber afb-daemon ohne ws-server öffnet:
gast@gast-pc:~$ sudo netstat -tulpn | grep 1234
tcp        0      0 0.0.0.0:1234            0.0.0.0:*               LISTEN      21604/afb-daemon    

mit "lsof | grep 1234" die uid rausfinden und unter /proc/uid/fd Infos zu socket-deskriptor auslesen

aus https://iot.bzh/download/public/2018/UBS/presentation-AGL.pdf Folie 42 --->	ws://localhost:5555/api?x-afb-token=HELLO  

9.3.
in helloworld-native-application.c steht websocket client connection-aufbau, --> auf server münzen ?!
unter afb-proto-ws.h interessante struct: afb_proto_ws_server_itf 
in afb-stub-ws ist server-socket/stub beschrieben
--->mit helloworld-native-app websocket nachvollziehen, also helloworld_natapp und hello_world_service.c

Websockets:
WebSockets communicate over a TCP (Transmission Control Protocol) connection. https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_server

tcpdump für ws_server.js und INput_test_QML zeigt:

11:24:29.824925 IP localhost.52652 > localhost.1234: Flags [S], seq 2471981679, win 65495, options [mss 65495,sackOK,TS val 626004018 ecr 0,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c d8a0 4000 4006 6419 7f00 0001 7f00  .<..@.@.d.......
	0x0020:  0001 cdac 04d2 9357 726f 0000 0000 a002  .......Wro......
	0x0030:  ffd7 fe30 0000 0204 ffd7 0402 080a 2550  ...0..........%P
	0x0040:  1032 0000 0000 0103 0307                 .2........
11:24:29.824947 IP localhost.1234 > localhost.52652: Flags [S.], seq 3742138263, ack 2471981680, win 65483, options [mss 65495,sackOK,TS val 626004018 ecr 626004018,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 0000 4000 4006 3cba 7f00 0001 7f00  .<..@.@.<.......
	0x0020:  0001 04d2 cdac df0c 7f97 9357 7270 a012  ...........Wrp..
	0x0030:  ffcb fe30 0000 0204 ffd7 0402 080a 2550  ...0..........%P
	0x0040:  1032 2550 1032 0103 0307                 .2%P.2....
11:24:29.824955 IP localhost.52652 > localhost.1234: Flags [.], ack 1, win 512, options [nop,nop,TS val 626004018 ecr 626004018], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 d8a1 4000 4006 6420 7f00 0001 7f00  .4..@.@.d.......
	0x0020:  0001 cdac 04d2 9357 7270 df0c 7f98 8010  .......Wrp......
	0x0030:  0200 fe28 0000 0101 080a 2550 1032 2550  ...(......%P.2%P
	0x0040:  1032                                     .2
11:24:29.826554 IP localhost.52652 > localhost.1234: Flags [P.], seq 1:170, ack 1, win 512, options [nop,nop,TS val 626004020 ecr 626004018], length 169
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  00dd d8a2 4000 4006 6376 7f00 0001 7f00  ....@.@.cv......
	0x0020:  0001 cdac 04d2 9357 7270 df0c 7f98 8018  .......Wrp......
	0x0030:  0200 fed1 0000 0101 080a 2550 1034 2550  ..........%P.4%P
	0x0040:  1032 4745 5420 2f61 7069 3f74 6f6b 656e  .2GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 6c6f 6361 6c68 6f73  ..Host:.localhos
	0x0070:  743a 3132 3334 0d0a 5570 6772 6164 653a  t:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d4b  .Sec-WebSocket-K
	0x00b0:  6579 3a20 6375 4e44 376e 4a6e 5076 754b  ey:.cuND7nJnPvuK
	0x00c0:  7832 7058 476e 574c 7041 3d3d 0d0a 5365  x2pXGnWLpA==..Se
	0x00d0:  632d 5765 6253 6f63 6b65 742d 5665 7273  c-WebSocket-Vers
	0x00e0:  696f 6e3a 2031 330d 0a0d 0a              ion:.13....
11:24:29.826560 IP localhost.1234 > localhost.52652: Flags [.], ack 170, win 511, options [nop,nop,TS val 626004020 ecr 626004020], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 a263 4000 4006 9a5e 7f00 0001 7f00  .4.c@.@..^......
	0x0020:  0001 04d2 cdac df0c 7f98 9357 7319 8010  ...........Ws...
	0x0030:  01ff fe28 0000 0101 080a 2550 1034 2550  ...(......%P.4%P
	0x0040:  1034                                     .4
11:24:29.829662 IP localhost.1234 > localhost.52652: Flags [P.], seq 1:130, ack 170, win 512, options [nop,nop,TS val 626004023 ecr 626004020], length 129
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  00b5 a264 4000 4006 99dc 7f00 0001 7f00  ...d@.@.........
	0x0020:  0001 04d2 cdac df0c 7f98 9357 7319 8018  ...........Ws...
	0x0030:  0200 fea9 0000 0101 080a 2550 1037 2550  ..........%P.7%P
	0x0040:  1034 4854 5450 2f31 2e31 2031 3031 2053  .4HTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 436f 6e6e 6563 7469  socket..Connecti
	0x0080:  6f6e 3a20 5570 6772 6164 650d 0a53 6563  on:.Upgrade..Sec
	0x0090:  2d57 6562 536f 636b 6574 2d41 6363 6570  -WebSocket-Accep
	0x00a0:  743a 2038 6330 3350 4878 4a4b 6c45 3337  t:.8c03PHxJKlE37
	0x00b0:  4361 2b6f 594e 2b6e 2b36 4b32 4877 3d0d  Ca+oYN+n+6K2Hw=.
	0x00c0:  0a0d 0a                                  ...
11:24:29.829669 IP localhost.52652 > localhost.1234: Flags [.], ack 130, win 511, options [nop,nop,TS val 626004023 ecr 626004023], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 d8a3 4000 4006 641e 7f00 0001 7f00  .4..@.@.d.......
	0x0020:  0001 cdac 04d2 9357 7319 df0c 8019 8010  .......Ws.......
	0x0030:  01ff fe28 0000 0101 080a 2550 1037 2550  ...(......%P.7%P
	0x0040:  1037                                     .7
11:24:29.834087 IP localhost.1234 > localhost.52652: Flags [P.], seq 130:140, ack 170, win 512, options [nop,nop,TS val 626004028 ecr 626004023], length 10
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003e a265 4000 4006 9a52 7f00 0001 7f00  .>.e@.@..R......
	0x0020:  0001 04d2 cdac df0c 8019 9357 7319 8018  ...........Ws...
	0x0030:  0200 fe32 0000 0101 080a 2550 103c 2550  ...2......%P.<%P
	0x0040:  1037 8108 6865 6c6c 6f31 3233            .7..hello123



für hello_world_service und ..natapp.c:
11:37:31.870195 IP localhost.52668 > localhost.1234: Flags [S], seq 3687052366, win 65495, options [mss 65495,sackOK,TS val 626786053 ecr 0,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 4d53 4000 4006 ef66 7f00 0001 7f00  .<MS@.@..f......
	0x0020:  0001 cdbc 04d2 dbc3 f44e 0000 0000 a002  .........N......
	0x0030:  ffd7 fe30 0000 0204 ffd7 0402 080a 255b  ...0..........%[
	0x0040:  ff05 0000 0000 0103 0307                 ..........
11:37:31.870213 IP localhost.1234 > localhost.52668: Flags [S.], seq 212297330, ack 3687052367, win 65483, options [mss 65495,sackOK,TS val 626786053 ecr 626786053,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 0000 4000 4006 3cba 7f00 0001 7f00  .<..@.@.<.......
	0x0020:  0001 04d2 cdbc 0ca7 6672 dbc3 f44f a012  ........fr...O..
	0x0030:  ffcb fe30 0000 0204 ffd7 0402 080a 255b  ...0..........%[
	0x0040:  ff05 255b ff05 0103 0307                 ..%[......
11:37:31.870229 IP localhost.52668 > localhost.1234: Flags [.], ack 1, win 512, options [nop,nop,TS val 626786053 ecr 626786053], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 4d54 4000 4006 ef6d 7f00 0001 7f00  .4MT@.@..m......
	0x0020:  0001 cdbc 04d2 dbc3 f44f 0ca7 6673 8010  .........O..fs..
	0x0030:  0200 fe28 0000 0101 080a 255b ff05 255b  ...(......%[..%[
	0x0040:  ff05                                     ..
11:37:31.870596 IP localhost.52668 > localhost.1234: Flags [P.], seq 1:227, ack 1, win 512, options [nop,nop,TS val 626786053 ecr 626786053], length 226
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0116 4d55 4000 4006 ee8a 7f00 0001 7f00  ..MU@.@.........
	0x0020:  0001 cdbc 04d2 dbc3 f44f 0ca7 6673 8018  .........O..fs..
	0x0030:  0200 ff0a 0000 0101 080a 255b ff05 255b  ..........%[..%[
	0x0040:  ff05 4745 5420 2f61 7069 3f74 6f6b 656e  ..GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 302e 302e 302e 303a  ..Host:.0.0.0.0:
	0x0070:  3132 3334 0d0a 5570 6772 6164 653a 2077  1234..Upgrade:.w
	0x0080:  6562 736f 636b 6574 0d0a 436f 6e6e 6563  ebsocket..Connec
	0x0090:  7469 6f6e 3a20 5570 6772 6164 650d 0a53  tion:.Upgrade..S
	0x00a0:  6563 2d57 6562 536f 636b 6574 2d56 6572  ec-WebSocket-Ver
	0x00b0:  7369 6f6e 3a20 3133 0d0a 5365 632d 5765  sion:.13..Sec-We
	0x00c0:  6253 6f63 6b65 742d 4b65 793a 204d 6670  bSocket-Key:.Mfp
	0x00d0:  4956 4730 3832 6a46 5456 3753 7854 4e4e  IVG082jFTV7SxTNN
	0x00e0:  696a 513d 3d0d 0a53 6563 2d57 6562 536f  ijQ==..Sec-WebSo
	0x00f0:  636b 6574 2d50 726f 746f 636f 6c3a 2078  cket-Protocol:.x
	0x0100:  2d61 6662 2d77 732d 6a73 6f6e 310d 0a43  -afb-ws-json1..C
	0x0110:  6f6e 7465 6e74 2d4c 656e 6774 683a 2030  ontent-Length:.0
	0x0120:  0d0a 0d0a                                ....
11:37:31.870609 IP localhost.1234 > localhost.52668: Flags [.], ack 227, win 510, options [nop,nop,TS val 626786053 ecr 626786053], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 dabd 4000 4006 6204 7f00 0001 7f00  .4..@.@.b.......
	0x0020:  0001 04d2 cdbc 0ca7 6673 dbc3 f531 8010  ........fs...1..
	0x0030:  01fe fe28 0000 0101 080a 255b ff05 255b  ...(......%[..%[
	0x0040:  ff05                                     ..
11:37:31.870851 IP localhost.1234 > localhost.52668: Flags [P.], seq 1:207, ack 227, win 512, options [nop,nop,TS val 626786054 ecr 626786053], length 206
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0102 dabe 4000 4006 6135 7f00 0001 7f00  ....@.@.a5......
	0x0020:  0001 04d2 cdbc 0ca7 6673 dbc3 f531 8018  ........fs...1..
	0x0030:  0200 fef6 0000 0101 080a 255b ff06 255b  ..........%[..%[
	0x0040:  ff05 4854 5450 2f31 2e31 2031 3031 2053  ..HTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 5365 632d 5765 6253  socket..Sec-WebS
	0x0080:  6f63 6b65 742d 5072 6f74 6f63 6f6c 3a20  ocket-Protocol:.
	0x0090:  782d 6166 622d 7773 2d6a 736f 6e31 0d0a  x-afb-ws-json1..
	0x00a0:  5365 632d 5765 6253 6f63 6b65 742d 4163  Sec-WebSocket-Ac
	0x00b0:  6365 7074 3a20 6635 4932 6835 3368 4273  cept:.f5I2h53hBs
	0x00c0:  5435 4553 3345 4868 6e78 414a 326e 7173  T5ES3EHhnxAJ2nqs
	0x00d0:  773d 0d0a 436f 6e6e 6563 7469 6f6e 3a20  w=..Connection:.
	0x00e0:  5570 6772 6164 650d 0a44 6174 653a 2057  Upgrade..Date:.W
	0x00f0:  6564 2c20 3130 204d 6172 2032 3032 3120  ed,.10.Mar.2021.
	0x0100:  3130 3a33 373a 3331 2047 4d54 0d0a 0d0a  10:37:31.GMT....
11:37:31.870959 IP localhost.52668 > localhost.1234: Flags [.], ack 207, win 511, options [nop,nop,TS val 626786054 ecr 626786054], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 4d56 4000 4006 ef6b 7f00 0001 7f00  .4MV@.@..k......
	0x0020:  0001 cdbc 04d2 dbc3 f531 0ca7 6741 8010  .........1..gA..
	0x0030:  01ff fe28 0000 0101 080a 255b ff06 255b  ...(......%[..%[
	0x0040:  ff06                                     ..
11:37:31.872032 IP localhost.52668 > localhost.1234: Flags [P.], seq 227:264, ack 207, win 512, options [nop,nop,TS val 626786055 ecr 626786054], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 4d57 4000 4006 ef45 7f00 0001 7f00  .YMW@.@..E......
	0x0020:  0001 cdbc 04d2 dbc3 f531 0ca7 6741 8018  .........1..gA..
	0x0030:  0200 fe4d 0000 0101 080a 255b ff07 255b  ...M......%[..%[
	0x0040:  ff06 8123 5b32 2c22 3939 3939 3939 222c  ...#[2,"999999",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]
11:37:31.872118 IP localhost.1234 > localhost.52668: Flags [P.], seq 207:311, ack 264, win 512, options [nop,nop,TS val 626786055 ecr 626786055], length 104
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  009c dabf 4000 4006 619a 7f00 0001 7f00  ....@.@.a.......
	0x0020:  0001 04d2 cdbc 0ca7 6741 dbc3 f556 8018  ........gA...V..
	0x0030:  0200 fe90 0000 0101 080a 255b ff07 255b  ..........%[..%[
	0x0040:  ff07 8166 5b33 2c22 3939 3939 3939 222c  ...f[3,"999999",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 302c 226a  {"response":0,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2030 227d 7d5d                 nt.=.0"}}]
11:37:31.914087 IP localhost.52668 > localhost.1234: Flags [.], ack 311, win 512, options [nop,nop,TS val 626786097 ecr 626786055], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 4d58 4000 4006 ef69 7f00 0001 7f00  .4MX@.@..i......
	0x0020:  0001 cdbc 04d2 dbc3 f556 0ca7 67a9 8010  .........V..g...
	0x0030:  0200 fe28 0000 0101 080a 255b ff31 255b  ...(......%[.1%[
	0x0040:  ff07                                     ..
11:37:41.873076 IP localhost.52668 > localhost.1234: Flags [P.], seq 264:301, ack 311, win 512, options [nop,nop,TS val 626796056 ecr 626786055], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 4d59 4000 4006 ef43 7f00 0001 7f00  .YMY@.@..C......
	0x0020:  0001 cdbc 04d2 dbc3 f556 0ca7 67a9 8018  .........V..g...
	0x0030:  0200 fe4d 0000 0101 080a 255c 2618 255b  ...M......%\&.%[
	0x0040:  ff07 8123 5b32 2c22 3939 3939 3938 222c  ...#[2,"999998",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]
11:37:41.873310 IP localhost.1234 > localhost.52668: Flags [P.], seq 311:415, ack 301, win 512, options [nop,nop,TS val 626796056 ecr 626796056], length 104
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  009c dac0 4000 4006 6199 7f00 0001 7f00  ....@.@.a.......
	0x0020:  0001 04d2 cdbc 0ca7 67a9 dbc3 f57b 8018  ........g....{..
	0x0030:  0200 fe90 0000 0101 080a 255c 2618 255c  ..........%\&.%\
	0x0040:  2618 8166 5b33 2c22 3939 3939 3938 222c  &..f[3,"999998",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 312c 226a  {"response":1,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2031 227d 7d5d                 nt.=.1"}}]


------------> für websockets ist ein Websocket-Handshake nötig.
herausfinden wie genau websocket-handshake stattfindet über gdb und für hello_world_service und ..natapp.c:
bei helloworld_natapp, egal ob 127.0.0.1 oder ws://0.0.0.0 oder ws://127.0.0.1: , das entspricht alles immer localhost

in natapp:
wsj1 = afb_ws_client_connect_wsj1(loop, uri, &itf, NULL);  

15:46:18.663525 IP localhost.52918 > localhost.1234: Flags [S], seq 1094387353, win 65495, options [mss 65495,sackOK,TS val 641712583 ecr 0,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 1e45 4000 4006 1e75 7f00 0001 7f00  .<.E@.@..u......
	0x0020:  0001 ceb6 04d2 413b 0699 0000 0000 a002  ......A;........
	0x0030:  ffd7 fe30 0000 0204 ffd7 0402 080a 263f  ...0..........&?
	0x0040:  c1c7 0000 0000 0103 0307                 ..........
15:46:18.663551 IP localhost.1234 > localhost.52918: Flags [S.], seq 3629518092, ack 1094387354, win 65483, options [mss 65495,sackOK,TS val 641712583 ecr 641712583,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 0000 4000 4006 3cba 7f00 0001 7f00  .<..@.@.<.......
	0x0020:  0001 04d2 ceb6 d856 0d0c 413b 069a a012  .......V..A;....
	0x0030:  ffcb fe30 0000 0204 ffd7 0402 080a 263f  ...0..........&?
	0x0040:  c1c7 263f c1c7 0103 0307                 ..&?......
15:46:18.663573 IP localhost.52918 > localhost.1234: Flags [.], ack 1, win 512, options [nop,nop,TS val 641712583 ecr 641712583], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 1e46 4000 4006 1e7c 7f00 0001 7f00  .4.F@.@..|......
	0x0020:  0001 ceb6 04d2 413b 069a d856 0d0d 8010  ......A;...V....
	0x0030:  0200 fe28 0000 0101 080a 263f c1c7 263f  ...(......&?..&?
	0x0040:  c1c7                                     ..

/* the request*/                                                                                                                                │
call(api, verb, data);
                            ....
15:47:54.405158 IP localhost.52918 > localhost.1234: Flags [P.], seq 227:264, ack 207, win 512, options [nop,nop,TS val 641808322 ecr 641712583], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 1e49 4000 4006 1e54 7f00 0001 7f00  .Y.I@.@..T......
	0x0020:  0001 ceb6 04d2 413b 077c d856 0ddb 8018  ......A;.|.V....
	0x0030:  0200 fe4d 0000 0101 080a 2641 37c2 263f  ...M......&A7.&?
	0x0040:  c1c7 8123 5b32 2c22 3939 3939 3939 222c  ...#[2,"999999",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]
15:47:54.405410 IP localhost.1234 > localhost.52918: Flags [P.], seq 207:311, ack 264, win 512, options [nop,nop,TS val 641808323 ecr 641808322], length 104
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  009c 1055 4000 4006 2c05 7f00 0001 7f00  ...U@.@.,.......
	0x0020:  0001 04d2 ceb6 d856 0ddb 413b 07a1 8018  .......V..A;....
	0x0030:  0200 fe90 0000 0101 080a 2641 37c3 2641  ..........&A7.&A
	0x0040:  37c2 8166 5b33 2c22 3939 3939 3939 222c  7..f[3,"999999",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 302c 226a  {"response":0,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2030 227d 7d5d                 nt.=.0"}}]
15:47:54.405431 IP localhost.52918 > localhost.1234: Flags [.], ack 311, win 512, options [nop,nop,TS val 641808323 ecr 641808323], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 1e4a 4000 4006 1e78 7f00 0001 7f00  .4.J@.@..x......
	0x0020:  0001 ceb6 04d2 413b 07a1 d856 0e43 8010  ......A;...V.C..
	0x0030:  0200 fe28 0000 0101 080a 2641 37c3 2641  ...(......&A7.&A
	0x0040:  37c3                                     7.



in afb-ws-client.c kann man connection-aufbau rauslesen, erst tcp ---> http --> websocket

ws-handshake:
17:05:47.582568 IP localhost.53006 > localhost.1234: Flags [P.], seq 1:229, ack 1, win 512, options [nop,nop,TS val 646481427 ecr 646481426], length 228
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0118 8021 4000 4006 bbbc 7f00 0001 7f00  ...!@.@.........
	0x0020:  0001 cf0e 04d2 5734 094c 737b c668 8018  ......W4.Ls{.h..
	0x0030:  0200 ff0c 0000 0101 080a 2688 8613 2688  ..........&...&.
	0x0040:  8612 4745 5420 2f61 7069 3f74 6f6b 656e  ..GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
	0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
	0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
	0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
	0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
	0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
	0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
	0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1: .
	0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
	0x0120:  2030 0d0a 0d0a                           .0....

(manchmal) darauf Antwort:
17:07:44.453301 IP localhost.1235 > localhost.41726: Flags [P.], seq 1:207, ack 230, win 512, options [nop,nop,TS val 646598296 ecr 646598295], length 206
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0102 994f 4000 4006 a2a4 7f00 0001 7f00  ...O@.@.........
	0x0020:  0001 04d3 a2fe ace2 db74 c611 7f0d 8018  .........t......
	0x0030:  0200 fef6 0000 0101 080a 268a 4e98 268a  ..........&.N.&.
	0x0040:  4e97 4854 5450 2f31 2e31 2031 3031 2053  N.HTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 5365 632d 5765 6253  socket..Sec-WebS
	0x0080:  6f63 6b65 742d 5072 6f74 6f63 6f6c 3a20  ocket-Protocol:.
	0x0090:  782d 6166 622d 7773 2d6a 736f 6e31 0d0a  x-afb-ws-json1..
	0x00a0:  5365 632d 5765 6253 6f63 6b65 742d 4163  Sec-WebSocket-Ac
	0x00b0:  6365 7074 3a20 6635 4932 6835 3368 4273  cept:.f5I2h53hBs
	0x00c0:  5435 4553 3345 4868 6e78 414a 326e 7173  T5ES3EHhnxAJ2nqs
	0x00d0:  773d 0d0a 436f 6e6e 6563 7469 6f6e 3a20  w=..Connection:.
	0x00e0:  5570 6772 6164 650d 0a44 6174 653a 2057  Upgrade..Date:.W
	0x00f0:  6564 2c20 3130 204d 6172 2032 3032 3120  ed,.10.Mar.2021.
	0x0100:  3136 3a30 373a 3434 2047 4d54 0d0a 0d0a  16:07:44.GMT....


für QML mit ws_server.js:
17:26:21.708258 IP localhost.53028 > localhost.1234: Flags [P.], seq 1:170, ack 1, win 512, options [nop,nop,TS val 647715532 ecr 647715530], length 169
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  00dd 8a66 4000 4006 b1b2 7f00 0001 7f00  ...f@.@.........
	0x0020:  0001 cf24 04d2 7043 5c44 b01e 552b 8018  ...$..pC\D..U+..
	0x0030:  0200 fed1 0000 0101 080a 269b 5acc 269b  ..........&.Z.&.
	0x0040:  5aca 4745 5420 2f61 7069 3f74 6f6b 656e  Z.GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 6c6f 6361 6c68 6f73  ..Host:.localhos
	0x0070:  743a 3132 3334 0d0a 5570 6772 6164 653a  t:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d4b  .Sec-WebSocket-K
	0x00b0:  6579 3a20 554d 5279 6c2f 5a31 4f74 7838  ey:.UMRyl/Z1Otx8
	0x00c0:  4b36 7752 6f48 3075 4751 3d3d 0d0a 5365  K6wRoH0uGQ==..Se
	0x00d0:  632d 5765 6253 6f63 6b65 742d 5665 7273  c-WebSocket-Vers
	0x00e0:  696f 6e3a 2031 330d 0a0d 0a              ion:.13....
17:26:21.714825 IP localhost.1234 > localhost.53028: Flags [P.], seq 1:130, ack 170, win 512, options [nop,nop,TS val 647715538 ecr 647715532], length 129
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  00b5 9711 4000 4006 a52f 7f00 0001 7f00  ....@.@../......
	0x0020:  0001 04d2 cf24 b01e 552b 7043 5ced 8018  .....$..U+pC\...
	0x0030:  0200 fea9 0000 0101 080a 269b 5ad2 269b  ..........&.Z.&.
	0x0040:  5acc 4854 5450 2f31 2e31 2031 3031 2053  Z.HTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 436f 6e6e 6563 7469  socket..Connecti
	0x0080:  6f6e 3a20 5570 6772 6164 650d 0a53 6563  on:.Upgrade..Sec
	0x0090:  2d57 6562 536f 636b 6574 2d41 6363 6570  -WebSocket-Accep
	0x00a0:  743a 2041 7338 756a 434f 556b 532b 704d  t:.As8ujCOUkS+pM
	0x00b0:  454c 4533 7041 5337 5664 3478 7751 3d0d  ELE3pAS7Vd4xwQ=.
	0x00c0:  0a0d 0a                                  ...



----> vielleicht klappt QML mit afb-daemon helloworldservice nicht, weil Websocket-Protokoll nicht "x-afb-ws-json1" entspricht ?
helloworld_natapp auf ws_server.js klappt schon, aber ws_server.js kann nicht antworten, weil es afb-ws-json nicht kennt --> 
client (QML / helloworld_natapp) initiiert anscheinend Sitzung und gibt nachdem http-Verbindung aufgebaut wurde upgrade mit WS-protokol an.
---> QafbWebsocket in QML einbauen oder den Anfangstext aus protocol-x-afb-ws-json1 / afb-ws-client rauskopieren und irgendwo in QML eingeben ?!

unter /usr/include/x86_64-linux-gnu/qt5/QtWebSockets
oder ls /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/QtWebSockets   durchsuchen wie websocket-text zusammengestellt wird ?!

12.3.
herausfinden wie QML Http-request schickt:	QML Websocket-connection-aufbau erst nach dem ersten app.exec

aus afb-ws-client:
	int rc = asprintf(request,
			"GET %s HTTP/1.1\r\n"
			"Host: %s\r\n"
			"Upgrade: websocket\r\n"
			"Connection: Upgrade\r\n"
			"Sec-WebSocket-Version: 13\r\n"
			"Sec-WebSocket-Key: %s\r\n"
			"Sec-WebSocket-Protocol: %s\r\n"
			"Content-Length: 0\r\n"
			"\r\n"
			, path
			, host
			, key
			, protocols
		);

HTTP 1.1\r\n
Host: 127.0.0.1:1234\r\n
Upgrade: websocket\r\n
Connection: Upgrade\r\n
Sec-WebSocket-Version: 13\r\n
Sec-WebSocket-Key: MfpIVG082jFTV7SxTNNijQ==\r\n
Sec-WebSocket-Protocol: x-afb-ws-json1\r\n
Content-Length: 0\r\n
\r\n

---> als einfachen Text zu schicken websocket sendtext klappt nicht.

test mit afb-daemon --hello-world-service und QML zum Websocket-Handshake; der client, also hier Websocket sendet zuerst Anfrage an Server(afb-daemon) --> 
herausfinden wie ich in CLient-Anfrage als Protokoll websocket bestimmen kann
	

Schritt für Schritt Handshake aus afb-daemon Sicht:

websocket-handshake findet vor aufruf von hello_world_service binding statt, deshalb kann ich afb-dameon auch ohne binding starten für websocket

#3  0x00005555555830e5 in upgrade_to_websocket (cls=0x5555557b04c0, connection=<optimized out>, con_cls=<optimized out>, extra_in=<optimized out>, extra_in_size=<optimized out>, sock=<optimized out>,
    urh=0x5555557ceaa0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:155


afb-daemon mit qml:
18:05:05.052384 IP localhost.55530 > localhost.1234: Flags [P.], seq 1:170, ack 1, win 512, options [nop,nop,TS val 713914995 ecr 713914994], length 169
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  00dd b060 4000 4006 8bb8 7f00 0001 7f00  ...`@.@.........
	0x0020:  0001 d8ea 04d2 ae79 7eb5 ebdd c1c1 8018  .......y~.......
	0x0030:  0200 fed1 0000 0101 080a 2a8d 7a73 2a8d  ..........*.zs*.
	0x0040:  7a72 4745 5420 2f61 7069 3f74 6f6b 656e  zrGET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 6c6f 6361 6c68 6f73  ..Host:.localhos
	0x0070:  743a 3132 3334 0d0a 5570 6772 6164 653a  t:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d4b  .Sec-WebSocket-K
	0x00b0:  6579 3a20 6b6b 2f6a 4d74 5378 6c4f 6855  ey:.kk/jMtSxlOhU
	0x00c0:  4458 776f 656a 6645 6967 3d3d 0d0a 5365  DXwoejfEig==..Se
	0x00d0:  632d 5765 6253 6f63 6b65 742d 5665 7273  c-WebSocket-Vers
	0x00e0:  696f 6e3a 2031 330d 0a0d 0a              ion:.13....
18:05:05.052394 IP localhost.1234 > localhost.55530: Flags [.], ack 170, win 511, options [nop,nop,TS val 713914995 ecr 713914995], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 da92 4000 4006 622f 7f00 0001 7f00  .4..@.@.b/......
	0x0020:  0001 04d2 d8ea ebdd c1c1 ae79 7f5e 8010  ...........y.^..
	0x0030:  01ff fe28 0000 0101 080a 2a8d 7a73 2a8d  ...(......*.zs*.
	0x0040:  7a73                                     zs
18:05:05.052542 IP localhost.1234 > localhost.55530: Flags [P.], seq 1:207, ack 170, win 512, options [nop,nop,TS val 713914996 ecr 713914995], length 206
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0102 da93 4000 4006 6160 7f00 0001 7f00  ....@.@.a`......
	0x0020:  0001 04d2 d8ea ebdd c1c1 ae79 7f5e 8018  ...........y.^..
	0x0030:  0200 fef6 0000 0101 080a 2a8d 7a74 2a8d  ..........*.zt*.
	0x0040:  7a73 4854 5450 2f31 2e31 2031 3031 2053  zsHTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 5365 632d 5765 6253  socket..Sec-WebS
	0x0080:  6f63 6b65 742d 5072 6f74 6f63 6f6c 3a20  ocket-Protocol:.
	0x0090:  782d 6166 622d 7773 2d6a 736f 6e31 0d0a  x-afb-ws-json1..
	0x00a0:  5365 632d 5765 6253 6f63 6b65 742d 4163  Sec-WebSocket-Ac
	0x00b0:  6365 7074 3a20 5531 6b75 4351 3578 7143  cept:.U1kuCQ5xqC
	0x00c0:  342b 337a 6b4d 6d6b 6c6a 7632 3941 664a  4+3zkMmkljv29AfJ
	0x00d0:  303d 0d0a 436f 6e6e 6563 7469 6f6e 3a20  0=..Connection:.
	0x00e0:  5570 6772 6164 650d 0a44 6174 653a 2046  Upgrade..Date:.F
	0x00f0:  7269 2c20 3132 204d 6172 2032 3032 3120  ri,.12.Mar.2021.
	0x0100:  3137 3a30 353a 3035 2047 4d54 0d0a 0d0a  17:05:05.GMT....


afb-dameon mit natapp:

18:09:34.248946 IP localhost.55534 > localhost.1234: Flags [P.], seq 1:229, ack 1, win 512, options [nop,nop,TS val 714184188 ecr 714184188], length 228
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0118 9e2f 4000 4006 9dae 7f00 0001 7f00  .../@.@.........
	0x0020:  0001 d8ee 04d2 9ea3 d11b 17a2 d3eb 8018  ................
	0x0030:  0200 ff0c 0000 0101 080a 2a91 95fc 2a91  ..........*...*.
	0x0040:  95fc 4745 5420 2f61 7069 3f74 6f6b 656e  ..GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
	0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
	0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
	0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
	0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
	0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
	0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
	0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
	0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
	0x0120:  2030 0d0a 0d0a                           .0....
18:09:34.249384 IP localhost.1234 > localhost.55534: Flags [P.], seq 1:207, ack 229, win 512, options [nop,nop,TS val 714184188 ecr 714184188], length 206
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0102 4b55 4000 4006 f09e 7f00 0001 7f00  ..KU@.@.........
	0x0020:  0001 04d2 d8ee 17a2 d3eb 9ea3 d1ff 8018  ................
	0x0030:  0200 fef6 0000 0101 080a 2a91 95fc 2a91  ..........*...*.
	0x0040:  95fc 4854 5450 2f31 2e31 2031 3031 2053  ..HTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 5365 632d 5765 6253  socket..Sec-WebS
	0x0080:  6f63 6b65 742d 5072 6f74 6f63 6f6c 3a20  ocket-Protocol:.
	0x0090:  782d 6166 622d 7773 2d6a 736f 6e31 0d0a  x-afb-ws-json1..
	0x00a0:  5365 632d 5765 6253 6f63 6b65 742d 4163  Sec-WebSocket-Ac
	0x00b0:  6365 7074 3a20 6635 4932 6835 3368 4273  cept:.f5I2h53hBs
	0x00c0:  5435 4553 3345 4868 6e78 414a 326e 7173  T5ES3EHhnxAJ2nqs
	0x00d0:  773d 0d0a 436f 6e6e 6563 7469 6f6e 3a20  w=..Connection:.
	0x00e0:  5570 6772 6164 650d 0a44 6174 653a 2046  Upgrade..Date:.F
	0x00f0:  7269 2c20 3132 204d 6172 2032 3032 3120  ri,.12.Mar.2021.
	0x0100:  3137 3a30 393a 3334 2047 4d54 0d0a 0d0a  17:09:34.GMT....



-------------> Der Client (QML/natapp) klopft zuerst an server und sendet websocket-Details --> ich muss herausfinden wo/wie die Websocket-Details bei qml eingespeist werden !! 
mögliche Pfade:	/usr/include/x86_64-linux-gnu/qt5/QtWebSockets,	/usr/lib/x86_64-linux-gnu/qt5/qml/QtWebSockets,	/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/QtWebSockets


in microhttpd.h kommt websockets_stub vor:
/* Standard.      RFC6455 */
#define MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT "Sec-WebSocket-Accept"
/* Standard.      RFC6455 */
#define MHD_HTTP_HEADER_SEC_WEBSOCKET_EXTENSIONS "Sec-WebSocket-Extensions"
/* Standard.      RFC6455 */
#define MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY "Sec-WebSocket-Key"
/* Standard.      RFC6455 */
#define MHD_HTTP_HEADER_SEC_WEBSOCKET_PROTOCOL "Sec-WebSocket-Protocol"
/* Standard.      RFC6455 */
#define MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION "Sec-WebSocket-Version"

ABER: MHD_HTTP_HEADER_SEC_WEBSOCKET_PROTOCOL kommt nur in diesem Header vor, in keinem source-code

< side-note:	in usr/lib../AGL/Demo befindet sich unter anderem keyboard qml ,
c++ und qml interface:	https://retifrav.github.io/blog/2018/03/08/qt-client-server-qml		>

Lösung?:	https://github.com/iotbzh/qtafbclient/blob/master/qafbwebsocketclient.cpp 
--->Versuchen qafbwebsocket in QML_test zu implementieren

16.3.
Build mit QAFBWebsocket klappt, next: testen/rumspielen

QWebSocket currently does not support WebSocket Extensions and WebSocket Subprotocols.

QWebSocket only supports version 13 of the WebSocket protocol, as outlined in RFC 6455. --> statt QWebSocket auf QAbstractSockets umsteigen ?!

https://developer.mozilla.org/de/docs/Web/API/WebSockets_API/Writing_WebSocket_servers
--> unter Abschnitt Subprotocols in Sec-Websocket-Protocol durchlesen !

https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications		---> implementieren für QT
Establishing a WebSocket relies on the HTTP Upgrade mechanism, so the request for the protocol upgrade is implicit when we address the web server as ws://www.example.com
A connection upgrade must be requested by the client; if the server wants to enforce an upgrade it may send a 426 Upgrade Required response. 
The client can then send a new request with the appropriate upgrade headers while keeping the connection open. 
WebSocket also uses this mechanism to set up a connection with a HTTP server in a compatible way. The WebSocket Protocol has two parts: a handshake to establish the upgraded connection, 
then the actual data transfer. First, a client requests a WebSocket connection by using the Upgrade: WebSocket and Connection: Upgrade headers, 
along with a few protocol-specific headers to establish the version being used and set up a handshake. The server, if it supports the protocol, 
replies with the same Upgrade: WebSocket and Connection: Upgrade headers and completes the handshake.

<
Anmerkungen zum Thema websocket subrpotocol IANA:	https://lists.linuxfoundation.org/pipermail/automotive-discussions/2018-April/005968.html
I chose to base my implementation on OCPP 2.0
(http://www.gir.fr/ocppjs/ocpp_srpc_spec.shtml) because the
implementation is more efficient than json-rpc for example
(http://www.jsonrpc.org/specification)
The current implementation of the websocket subprotocol is a superset
of the spec OCPP 2.0. I just added the ID 5 for events and the transfer
of the session id. It is called "x-afb-ws-json1".
>

den http-client gemäß https://github.com/retifrav/qt-client-server implementieren	---> tcpclient funktionsfähig  test mit "nc -l -p 1234" erfolgreich. 
next: tcp ausbauen zu http mit https://www.bogotobogo.com/Qt/Qt5_QTcpSocket_Signals_Slots.php

wenn ich in QML "127.0.0.1" statt localhost schreibe klappt die Verbindung mit Server

--> evtl port 1234 für http zu niedrig?
--> klappt weiterhin nicht, evtl mal vorgefertigten http-client für qml suchen


18.3.
Bei Verwendung von xmlhttp-request reagiert http-server zumindest

http-Methoden open() und setRequestHeader():
https://developer.mozilla.org/de/docs/Web/API/XMLHttpRequest#open()  --> diese Alternative failed !


( Tipp für QT: wenn "vtable for xy missing" als Fehler erscheint, nach der main-loop #include "<main.moc>" einfügen


-------> anscheinend upgrade auf websocket mit vorgefertigten Klassen nicht möglich. 
Eigenen string schreiben !


ip-Paket:
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0118 9e2f 4000 4006 9dae 7f00 0001 7f00  .../@.@.........
	0x0020:  0001 d8ee 04d2 9ea3 d11b 17a2 d3eb 8018  ................
	0x0030:  0200 ff0c 0000 0101 080a 2a91 95fc 2a91  ..........*...*.
	0x0040:  95fc 4745 5420 2f61 7069 3f74 6f6b 656e  ..GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
	0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
	0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
	0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
	0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
	0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
	0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
	0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
	0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
	0x0120:  2030 0d0a 0d0a                           .0....


---> bereits existierendes TCPsocket daten senden und analysieren, ob man darauf aufbauen kann ?



http-header sendet websocket-anfrage an afb-daemon:
12:14:42.935877 IP localhost.35670 > localhost.1234: Flags [P.], seq 1:229, ack 1, win 512, options [nop,nop,TS val 850919117 ecr 850913133], length 228
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0118 1228 4000 4006 29b6 7f00 0001 7f00  ...(@.@.).......
	0x0020:  0001 8b56 04d2 6b37 5d3a 8800 1bff 8018  ...V..k7]:......
	0x0030:  0200 ff0c 0000 0101 080a 32b7 fecd 32b7  ..........2...2.
	0x0040:  e76d 4745 5420 2f61 7069 3f74 6f6b 656e  .mGET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2031 2e31  =123456.HTTP.1.1
	0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
	0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
	0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
	0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
	0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
	0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
	0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
	0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
	0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
	0x0120:  2030 0d0a 0d0a                           .0....


afb-dameon mit natapp:
18:09:34.248946 IP localhost.55534 > localhost.1234: Flags [P.], seq 1:229, ack 1, win 512, options [nop,nop,TS val 714184188 ecr 714184188], length 228
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0118 9e2f 4000 4006 9dae 7f00 0001 7f00  .../@.@.........
	0x0020:  0001 d8ee 04d2 9ea3 d11b 17a2 d3eb 8018  ................
	0x0030:  0200 ff0c 0000 0101 080a 2a91 95fc 2a91  ..........*...*.
	0x0040:  95fc 4745 5420 2f61 7069 3f74 6f6b 656e  ..GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
	0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
	0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
	0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
	0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
	0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
	0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
	0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
	0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
	0x0120:  2030 0d0a 0d0a                           .0....


Aufbau Ip-Header (natapp):
Version (4b):		x4	--> IPv4
Kopflänge (4b):		x5	--> 5*32b=20B
ToS (8b):		x00
Paketlänge (16b):	x0118	--> 280B 
Id. (16b):		x9e2f
Flags+Fragm (16b):	x4000
TTL (8b):		x40
Protocol (8b):		x06	--> TCP
Header-CS (16b):	x9dae
Source-IP (32b):	x7f00 0001 --> localhost
Dest.-IP (32b):		x7f00 0001
Optionen (max. 32b):    --> leer

Aufbau Ip-Header (QML):
Version (4b):		x4	--> IPv4
Kopflänge (4b):		x5	--> 5*32b=20B
ToS (8b):		x00
Paketlänge (16b):	x0118	--> 280B 
Id. (16b):		x1228
Flags+Fragm (16b):	x4000
TTL (8b):		x40
Protocol (8b):		x06	--> TCP
Header-CS (16b):	x29b6
Source-IP (32b):	x7f00 0001 --> localhost
Dest.-IP (32b):		x7f00 0001
Optionen (max. 32b):    --> leer

Aufbau TCP-Header (natapp):
Source-Port (16b):		xd8ee
Dest.-Port (16b):		x04d2
Seq.-Nr. (32b):			x9ea3 d11b
Ack.-Nr. (32b):			x17a2 d3eb
Offset/Len Header(4b):		x8		--> 8*32b=32B	
resrvd/Flags (12b):		x018
Windowsize (16b):		x0200
Checksum (16b):			xff0c
Urgent-Ptr. (16b):		x0000
Options (32b):			x0101 080a	?!

Aufbau TCP-Header(QML):
Source-Port (16b):		x8b56
Dest.-Port (16b):		x04d2
Seq.-Nr. (32b):			x6b37 5d3a
Ack.-Nr. (32b):			x8800 1bff
Offset/Len Header(4b):		x8		--> 8*32b=32B	
resrvd/Flags (12b):		x018
Windowsize (16b):		x0200
Checksum (16b):			xff0c
Urgent-Ptr. (16b):		x0000
Options (32b):			x0101 080a	?!



HTTP-Paket (natapp):
				  2a91 95fc 2a91  ..........*...*.
0x0040:  95fc 4745 5420 2f61 7069 3f74 6f6b 656e  ..GET./api?token
0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
0x0120:  2030 0d0a 0d0a                           .0....


HTTP-Paket (QML):
				  32b7 fecd 32b7  ..........2...2.
0x0040:  e76d 4745 5420 2f61 7069 3f74 6f6b 656e  .mGET./api?token
0x0050:  3d31 3233 3435 3620 4854 5450 2031 2e31  =123456.HTTP.1.1
0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
0x0120:  2030 0d0a 0d0a                           .0....


---> eigentlich identisch --->  herausfinden über gdb warum afb-dameon einmal antwortet und einmal ablehnt

bei npm:	node_modules/http-proxy/lib/http-proxy/passes/ws-incoming.js
für AFB: irgendwas mit microhttpd

sehr wahrscheinlich in afb-daemon/app-framework-binder/src/afb-websock.c  unter static void upgrade_to_websocket  oder static int check_websocket_upgrade 
oder int afb_websock_check_upgrade, oder afb_ws_create oder websock_create_v13

bei natapp erst erfolgreicher Http-handshake nach dem zweiten/dritten Senden

richtiger Zeitpunkt:
Breakpoint 2, upgrade_to_websocket (cls=0x5555557b04c0, connection=0x5555557ce150, con_cls=0x5555557ce320, extra_in=0x5555557d5f44 "",
    extra_in_size=0, sock=9, urh=0x5555557ce8f0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:144



kompletter Handshake von natapp und afb-daemon ohne verb oder api zu schicken etc.
17:41:25.047084 IP localhost.36502 > localhost.1234: Flags [S], seq 637030003, win 65495, options [mss 65495,sackOK,TS val 866964396 ecr 0,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 5f9a 4000 4006 dd1f 7f00 0001 7f00  .<_.@.@.........
	0x0020:  0001 8e96 04d2 25f8 4e73 0000 0000 a002  ......%.Ns......
	0x0030:  ffd7 fe30 0000 0204 ffd7 0402 080a 33ac  ...0..........3.
	0x0040:  d3ac 0000 0000 0103 0307                 ..........
17:41:25.047110 IP localhost.1234 > localhost.36502: Flags [S.], seq 1763255643, ack 637030004, win 65483, options [mss 65495,sackOK,TS val 866964396 ecr 866964396,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 0000 4000 4006 3cba 7f00 0001 7f00  .<..@.@.<.......
	0x0020:  0001 04d2 8e96 6919 255b 25f8 4e74 a012  ......i.%[%.Nt..
	0x0030:  ffcb fe30 0000 0204 ffd7 0402 080a 33ac  ...0..........3.
	0x0040:  d3ac 33ac d3ac 0103 0307                 ..3.......
17:41:25.047133 IP localhost.36502 > localhost.1234: Flags [.], ack 1, win 512, options [nop,nop,TS val 866964396 ecr 866964396], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 5f9b 4000 4006 dd26 7f00 0001 7f00  .4_.@.@..&......
	0x0020:  0001 8e96 04d2 25f8 4e74 6919 255c 8010  ......%.Nti.%\..
	0x0030:  0200 fe28 0000 0101 080a 33ac d3ac 33ac  ...(......3...3.
	0x0040:  d3ac                                     ..
17:41:25.047745 IP localhost.36502 > localhost.1234: Flags [P.], seq 1:229, ack 1, win 512, options [nop,nop,TS val 866964397 ecr 866964396], length 228
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0118 5f9c 4000 4006 dc41 7f00 0001 7f00  .._.@.@..A......
	0x0020:  0001 8e96 04d2 25f8 4e74 6919 255c 8018  ......%.Nti.%\..
	0x0030:  0200 ff0c 0000 0101 080a 33ac d3ad 33ac  ..........3...3.
	0x0040:  d3ac 4745 5420 2f61 7069 3f74 6f6b 656e  ..GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
	0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
	0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
	0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
	0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
	0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
	0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
	0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
	0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
	0x0120:  2030 0d0a 0d0a                           .0....
17:41:25.047755 IP localhost.1234 > localhost.36502: Flags [.], ack 229, win 510, options [nop,nop,TS val 866964397 ecr 866964397], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 4b1d 4000 4006 f1a4 7f00 0001 7f00  .4K.@.@.........
	0x0020:  0001 04d2 8e96 6919 255c 25f8 4f58 8010  ......i.%\%.OX..
	0x0030:  01fe fe28 0000 0101 080a 33ac d3ad 33ac  ...(......3...3.
	0x0040:  d3ad                                     ..
17:41:25.048165 IP localhost.1234 > localhost.36502: Flags [P.], seq 1:207, ack 229, win 512, options [nop,nop,TS val 866964397 ecr 866964397], length 206
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0102 4b1e 4000 4006 f0d5 7f00 0001 7f00  ..K.@.@.........
	0x0020:  0001 04d2 8e96 6919 255c 25f8 4f58 8018  ......i.%\%.OX..
	0x0030:  0200 fef6 0000 0101 080a 33ac d3ad 33ac  ..........3...3.
	0x0040:  d3ad 4854 5450 2f31 2e31 2031 3031 2053  ..HTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 5365 632d 5765 6253  socket..Sec-WebS
	0x0080:  6f63 6b65 742d 5072 6f74 6f63 6f6c 3a20  ocket-Protocol:.
	0x0090:  782d 6166 622d 7773 2d6a 736f 6e31 0d0a  x-afb-ws-json1..
	0x00a0:  5365 632d 5765 6253 6f63 6b65 742d 4163  Sec-WebSocket-Ac
	0x00b0:  6365 7074 3a20 6635 4932 6835 3368 4273  cept:.f5I2h53hBs
	0x00c0:  5435 4553 3345 4868 6e78 414a 326e 7173  T5ES3EHhnxAJ2nqs
	0x00d0:  773d 0d0a 436f 6e6e 6563 7469 6f6e 3a20  w=..Connection:.
	0x00e0:  5570 6772 6164 650d 0a44 6174 653a 2046  Upgrade..Date:.F
	0x00f0:  7269 2c20 3139 204d 6172 2032 3032 3120  ri,.19.Mar.2021.
	0x0100:  3136 3a34 313a 3235 2047 4d54 0d0a 0d0a  16:41:25.GMT....
17:41:25.048838 IP localhost.36502 > localhost.1234: Flags [.], ack 207, win 511, options [nop,nop,TS val 866964398 ecr 866964397], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 5f9d 4000 4006 dd24 7f00 0001 7f00  .4_.@.@..$......
	0x0020:  0001 8e96 04d2 25f8 4f58 6919 262a 8010  ......%.OXi.&*..
	0x0030:  01ff fe28 0000 0101 080a 33ac d3ae 33ac  ...(......3...3.
	0x0040:  d3ad                                     ..
17:41:25.049659 IP localhost.36502 > localhost.1234: Flags [F.], seq 229, ack 207, win 512, options [nop,nop,TS val 866964399 ecr 866964397], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 5f9e 4000 4006 dd23 7f00 0001 7f00  .4_.@.@..#......
	0x0020:  0001 8e96 04d2 25f8 4f58 6919 262a 8011  ......%.OXi.&*..
	0x0030:  0200 fe28 0000 0101 080a 33ac d3af 33ac  ...(......3...3.
	0x0040:  d3ad                                     ..
17:41:25.092265 IP localhost.1234 > localhost.36502: Flags [.], ack 230, win 512, options [nop,nop,TS val 866964442 ecr 866964399], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 4b1f 4000 4006 f1a2 7f00 0001 7f00  .4K.@.@.........
	0x0020:  0001 04d2 8e96 6919 262a 25f8 4f59 8010  ......i.&*%.OY..
	0x0030:  0200 fe28 0000 0101 080a 33ac d3da 33ac  ...(......3...3.
	0x0040:  d3af                                     ..



gdb
Breakpoint 4, afb_websock_check_upgrade (hreq=0x5555557ce320, apiset=0x5555557cd4d0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:243

(gdb) backtrace
#0  afb_websock_check_upgrade (hreq=0x5555557ce320, apiset=0x5555557cd4d0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:243
#1  0x000055555557b72e in access_handler (cls=0x5555557d58a0, connection=0x5555557ce150, url=<optimized out>, methodstr=<optimized out>, version=<optimized out>, upload_data=<optimized out>,
    upload_data_size=0x7fffffffcdc0, recordreq=0x5555557ce1a8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-hsrv.c:239
#2  0x00007ffff7508e25 in call_connection_handler (connection=connection@entry=0x5555557ce150) at connection.c:2166
#3  0x00007ffff750a728 in MHD_connection_handle_idle (connection=connection@entry=0x5555557ce150) at connection.c:3343
#4  0x00007ffff750c866 in call_handlers (con=con@entry=0x5555557ce150, read_ready=<optimized out>, write_ready=<optimized out>, force_close=<optimized out>) at daemon.c:1215
#5  0x00007ffff7511640 in MHD_epoll (daemon=0x5555557d5990, may_block=<optimized out>) at daemon.c:4602
#6  0x00007ffff751254d in MHD_run (daemon=0x5555557d5990) at daemon.c:4690
#7  0x000055555557b4e8 in do_run (signum=signum@entry=0, arg=arg@entry=0x5555557d58a0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-hsrv.c:276
#8  0x0000555555588cdb in monitor (timeout=0, function=0x55555557b4b0 <do_run>, arg=0x5555557d58a0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/sig-monitor.c:225
#9  0x000055555558688d in thread_run_internal (me=me@entry=0x7fffffffdd30) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:388
#10 0x0000555555586abf in thread_main () at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:450
#11 0x000055555558758e in jobs_start (allowed_count=<optimized out>, start_count=0, waiter_count=100, start=0x5555555677c0 <start>, arg=0x0)



Breakpoint 3, check_websocket_upgrade (hreq=0x5555557ce320, apiset=0x5555557cd4d0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:251

zwischen diesen beiden Breakpoints schicket server websocket upgrade antwort herum

Breakpoint 2, upgrade_to_websocket (cls=0x5555557b04c0, connection=0x5555557ce150, con_cls=0x5555557ce320, extra_in=0x5555557d5f44 "", extra_in_size=0, sock=9, urh=0x5555557ce8f0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:144

to do:
breakpoint auf check_websocket_upgrade bzw. afb_websock_check_upgrade legen und ab dann durchsteppen  ---> erst wird in afb_websock_check_upgrad geprüft ob GET angefragt ist 


22.3.
Erstmal noch afbclient testen, falls nicht klappt dann debuggen -->QAfbWebsock klappt nicht, weil es auf normalem QT-Websocket aufbaut.
Datenpaket wie von natapp verwenden um zu sehen ob es klappt --> 
						
							  [3,"999999",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 302c 226a  {"response":0,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2030 227d 7d5d                 nt.=.0"}}]


[3,"999999", {"response":0,"jtype":"afb-reply","request":{"status":"success","info":"Ping count = 0"}}]	--> klappt auch nicht, jetzt debuggen.



flow:
afb_websock_check_upgrade --> check_websocket_upgrade --> make_accept_value 


QML-test:
$1 = {xreq = {request = {itf = 0x5555557ac000 <xreq_itf>, api = 0x0, vcbdata = 0x0, called_api = 0x0, called_verb = 0x0}, context = {session = 0x5555557ce940, token = 0x5555557ce910,
      credentials = 0x0, api_key = 0x0, super = 0x0, {flags = 1, {created = 1, validated = 0, invalidated = 0, closing = 0, closed = 0}}}, apiset = 0x0, json = 0x0,
    queryitf = 0x5555557abbe0 <afb_hreq_xreq_query_itf>, refcount = 1, replied = 0, hookflags = 0, hookindex = 0, caller = 0x0}, hsrv = 0x5555557d58a0, cacheTimeout = 0x5555557af720 "100000",
  connection = 0x5555557ce660, method = 1, reqid = 1, scanned = 1, suspended = 0, replied = 0, version = 0x5555557d5e7b "1.1", lang = 0x0, url = 0x5555557d5e64 "/api", lenurl = 4,
  tail = 0x5555557d5e68 "", lentail = 0, postform = 0x0, data = 0x0, json = 0x0, tokener = 0x0}

(gdb) p *hreq
$1 = {xreq = {request = {itf = 0x5555557ac000 <xreq_itf>, api = 0x0, vcbdata = 0x0, called_api = 0x0, called_verb = 0x0}, context = {session = 0x5555557ce430, token = 0x5555557b0400,
      credentials = 0x0, api_key = 0x0, super = 0x0, {flags = 1, {created = 1, validated = 0, invalidated = 0, closing = 0, closed = 0}}}, apiset = 0x0, json = 0x0,
    queryitf = 0x5555557abbe0 <afb_hreq_xreq_query_itf>, refcount = 1, replied = 0, hookflags = 0, hookindex = 0, caller = 0x0}, hsrv = 0x5555557d58a0, cacheTimeout = 0x5555557af720 "100000",
  connection = 0x5555557ce150, method = 1, reqid = 1, scanned = 1, suspended = 0, replied = 0, version = 0x5555557d5e76 "HTTP/1.1", lang = 0x0, url = 0x5555557d5e64 "/api", lenurl = 4,
  tail = 0x5555557d5e68 "", lentail = 0, postform = 0x0, data = 0x0, json = 0x0, tokener = 0x0}


Unterschied liegt in Version, QML hat 1.1 und natapp hatte "HTTP/1.1" ----> Connect to server klappt nun :-))))

To do:
Aber einzelen json-nachricht senden noch nicht. --> sendClicked evtl anpassen, mit QbYteArray QDataStream

Payload Datenaustausch:
12:38:54.802732 IP localhost.39584 > localhost.1234: Flags [P.], seq 1:229, ack 1, win 512, options [nop,nop,TS val 944448362 ecr 944448362], length 228
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0118 04f1 4000 4006 36ed 7f00 0001 7f00  ....@.@.6.......
	0x0020:  0001 9aa0 04d2 b56d 6268 441e 1286 8018  .......mbhD.....
	0x0030:  0200 ff0c 0000 0101 080a 384b 236a 384b  ..........8K#j8K
	0x0040:  236a 4745 5420 2f61 7069 3f74 6f6b 656e  #jGET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
	0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
	0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
	0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
	0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
	0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
	0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
	0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
	0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
	0x0120:  2030 0d0a 0d0a                           .0....
12:38:54.802777 IP localhost.1234 > localhost.39584: Flags [.], ack 229, win 510, options [nop,nop,TS val 944448362 ecr 944448362], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 28eb 4000 4006 13d7 7f00 0001 7f00  .4(.@.@.........
	0x0020:  0001 04d2 9aa0 441e 1286 b56d 634c 8010  ......D....mcL..
	0x0030:  01fe fe28 0000 0101 080a 384b 236a 384b  ...(......8K#j8K
	0x0040:  236a                                     #j
12:38:54.803041 IP localhost.1234 > localhost.39584: Flags [P.], seq 1:207, ack 229, win 512, options [nop,nop,TS val 944448363 ecr 944448362], length 206
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0102 28ec 4000 4006 1308 7f00 0001 7f00  ..(.@.@.........
	0x0020:  0001 04d2 9aa0 441e 1286 b56d 634c 8018  ......D....mcL..
	0x0030:  0200 fef6 0000 0101 080a 384b 236b 384b  ..........8K#k8K
	0x0040:  236a 4854 5450 2f31 2e31 2031 3031 2053  #jHTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 5365 632d 5765 6253  socket..Sec-WebS
	0x0080:  6f63 6b65 742d 5072 6f74 6f63 6f6c 3a20  ocket-Protocol:.
	0x0090:  782d 6166 622d 7773 2d6a 736f 6e31 0d0a  x-afb-ws-json1..
	0x00a0:  5365 632d 5765 6253 6f63 6b65 742d 4163  Sec-WebSocket-Ac
	0x00b0:  6365 7074 3a20 6635 4932 6835 3368 4273  cept:.f5I2h53hBs
	0x00c0:  5435 4553 3345 4868 6e78 414a 326e 7173  T5ES3EHhnxAJ2nqs
	0x00d0:  773d 0d0a 436f 6e6e 6563 7469 6f6e 3a20  w=..Connection:.
	0x00e0:  5570 6772 6164 650d 0a44 6174 653a 2057  Upgrade..Date:.W
	0x00f0:  6564 2c20 3234 204d 6172 2032 3032 3120  ed,.24.Mar.2021.
	0x0100:  3131 3a33 383a 3534 2047 4d54 0d0a 0d0a  11:38:54.GMT....
12:38:54.803437 IP localhost.39584 > localhost.1234: Flags [.], ack 207, win 511, options [nop,nop,TS val 944448363 ecr 944448363], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 04f2 4000 4006 37d0 7f00 0001 7f00  .4..@.@.7.......
	0x0020:  0001 9aa0 04d2 b56d 634c 441e 1354 8010  .......mcLD..T..
	0x0030:  01ff fe28 0000 0101 080a 384b 236b 384b  ...(......8K#k8K
	0x0040:  236b                                     #k
12:38:54.803946 IP localhost.39584 > localhost.1234: Flags [P.], seq 229:266, ack 207, win 512, options [nop,nop,TS val 944448364 ecr 944448363], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 04f3 4000 4006 37aa 7f00 0001 7f00  .Y..@.@.7.......
	0x0020:  0001 9aa0 04d2 b56d 634c 441e 1354 8018  .......mcLD..T..
	0x0030:  0200 fe4d 0000 0101 080a 384b 236c 384b  ...M......8K#l8K
	0x0040:  236b 8123 5b32 2c22 3939 3939 3939 222c  #k.#[2,"999999",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]
12:38:54.804182 IP localhost.1234 > localhost.39584: Flags [P.], seq 207:311, ack 266, win 512, options [nop,nop,TS val 944448364 ecr 944448364], length 104
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  009c 28ed 4000 4006 136d 7f00 0001 7f00  ..(.@.@..m......
	0x0020:  0001 04d2 9aa0 441e 1354 b56d 6371 8018  ......D..T.mcq..
	0x0030:  0200 fe90 0000 0101 080a 384b 236c 384b  ..........8K#l8K
	0x0040:  236c 8166 5b33 2c22 3939 3939 3939 222c  #l.f[3,"999999",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 302c 226a  {"response":0,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2030 227d 7d5d                 nt.=.0"}}]


Vergleich QML:
12:50:22.567203 IP localhost.39596 > localhost.1234: Flags [P.], seq 1:229, ack 1, win 512, options [nop,nop,TS val 945136116 ecr 945136114], length 228
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0118 0f41 4000 4006 2c9d 7f00 0001 7f00  ...A@.@.,.......
	0x0020:  0001 9aac 04d2 38cd 022c 7e79 790a 8018  ......8..,~yy...
	0x0030:  0200 ff0c 0000 0101 080a 3855 a1f4 3855  ..........8U..8U
	0x0040:  a1f2 4745 5420 2f61 7069 3f74 6f6b 656e  ..GET./api?token
	0x0050:  3d31 3233 3435 3620 4854 5450 2f31 2e31  =123456.HTTP/1.1
	0x0060:  0d0a 486f 7374 3a20 3132 372e 302e 302e  ..Host:.127.0.0.
	0x0070:  313a 3132 3334 0d0a 5570 6772 6164 653a  1:1234..Upgrade:
	0x0080:  2077 6562 736f 636b 6574 0d0a 436f 6e6e  .websocket..Conn
	0x0090:  6563 7469 6f6e 3a20 5570 6772 6164 650d  ection:.Upgrade.
	0x00a0:  0a53 6563 2d57 6562 536f 636b 6574 2d56  .Sec-WebSocket-V
	0x00b0:  6572 7369 6f6e 3a20 3133 0d0a 5365 632d  ersion:.13..Sec-
	0x00c0:  5765 6253 6f63 6b65 742d 4b65 793a 204d  WebSocket-Key:.M
	0x00d0:  6670 4956 4730 3832 6a46 5456 3753 7854  fpIVG082jFTV7SxT
	0x00e0:  4e4e 696a 513d 3d0d 0a53 6563 2d57 6562  NNijQ==..Sec-Web
	0x00f0:  536f 636b 6574 2d50 726f 746f 636f 6c3a  Socket-Protocol:
	0x0100:  2078 2d61 6662 2d77 732d 6a73 6f6e 310d  .x-afb-ws-json1.
	0x0110:  0a43 6f6e 7465 6e74 2d4c 656e 6774 683a  .Content-Length:
	0x0120:  2030 0d0a 0d0a                           .0....
12:50:22.567222 IP localhost.1234 > localhost.39596: Flags [.], ack 229, win 510, options [nop,nop,TS val 945136116 ecr 945136116], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 0c68 4000 4006 305a 7f00 0001 7f00  .4.h@.@.0Z......
	0x0020:  0001 04d2 9aac 7e79 790a 38cd 0310 8010  ......~yy.8.....
	0x0030:  01fe fe28 0000 0101 080a 3855 a1f4 3855  ...(......8U..8U
	0x0040:  a1f4                                     ..
12:50:22.567697 IP localhost.1234 > localhost.39596: Flags [P.], seq 1:207, ack 229, win 512, options [nop,nop,TS val 945136116 ecr 945136116], length 206
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0102 0c69 4000 4006 2f8b 7f00 0001 7f00  ...i@.@./.......
	0x0020:  0001 04d2 9aac 7e79 790a 38cd 0310 8018  ......~yy.8.....
	0x0030:  0200 fef6 0000 0101 080a 3855 a1f4 3855  ..........8U..8U
	0x0040:  a1f4 4854 5450 2f31 2e31 2031 3031 2053  ..HTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 5365 632d 5765 6253  socket..Sec-WebS
	0x0080:  6f63 6b65 742d 5072 6f74 6f63 6f6c 3a20  ocket-Protocol:.
	0x0090:  782d 6166 622d 7773 2d6a 736f 6e31 0d0a  x-afb-ws-json1..
	0x00a0:  5365 632d 5765 6253 6f63 6b65 742d 4163  Sec-WebSocket-Ac
	0x00b0:  6365 7074 3a20 6635 4932 6835 3368 4273  cept:.f5I2h53hBs
	0x00c0:  5435 4553 3345 4868 6e78 414a 326e 7173  T5ES3EHhnxAJ2nqs
	0x00d0:  773d 0d0a 436f 6e6e 6563 7469 6f6e 3a20  w=..Connection:.
	0x00e0:  5570 6772 6164 650d 0a44 6174 653a 2057  Upgrade..Date:.W
	0x00f0:  6564 2c20 3234 204d 6172 2032 3032 3120  ed,.24.Mar.2021.
	0x0100:  3131 3a35 303a 3232 2047 4d54 0d0a 0d0a  11:50:22.GMT....
12:50:22.567750 IP localhost.39596 > localhost.1234: Flags [.], ack 207, win 511, options [nop,nop,TS val 945136116 ecr 945136116], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 0f42 4000 4006 2d80 7f00 0001 7f00  .4.B@.@.-.......
	0x0020:  0001 9aac 04d2 38cd 0310 7e79 79d8 8010  ......8...~yy...
	0x0030:  01ff fe28 0000 0101 080a 3855 a1f4 3855  ...(......8U..8U
	0x0040:  a1f4                                     ..
12:50:24.949616 IP localhost.39596 > localhost.1234: Flags [P.], seq 229:264, ack 207, win 512, options [nop,nop,TS val 945138498 ecr 945136116], length 35
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0057 0f43 4000 4006 2d5c 7f00 0001 7f00  .W.C@.@.-\......
	0x0020:  0001 9aac 04d2 38cd 0310 7e79 79d8 8018  ......8...~yy...
	0x0030:  0200 fe4b 0000 0101 080a 3855 ab42 3855  ...K......8U.B8U
	0x0040:  a1f4 5b32 2c22 3939 3939 3939 222c 2268  ..[2,"999999","h
	0x0050:  656c 6c6f 776f 726c 642f 7069 6e67 222c  elloworld/ping",
	0x0060:  7472 7565 5d                             true]

vgl. natapp:
12:38:54.803437 IP localhost.39584 > localhost.1234: Flags [.], ack 207, win 511, options [nop,nop,TS val 944448363 ecr 944448363], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 04f2 4000 4006 37d0 7f00 0001 7f00  .4..@.@.7.......
	0x0020:  0001 9aa0 04d2 b56d 634c 441e 1354 8010  .......mcLD..T..
	0x0030:  01ff fe28 0000 0101 080a 384b 236b 384b  ...(......8K#k8K
	0x0040:  236b                                     #k
12:38:54.803946 IP localhost.39584 > localhost.1234: Flags [P.], seq 229:266, ack 207, win 512, options [nop,nop,TS val 944448364 ecr 944448363], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 04f3 4000 4006 37aa 7f00 0001 7f00  .Y..@.@.7.......
	0x0020:  0001 9aa0 04d2 b56d 634c 441e 1354 8018  .......mcLD..T..
	0x0030:  0200 fe4d 0000 0101 080a 384b 236c 384b  ...M......8K#l8K
	0x0040:  236b 8123 5b32 2c22 3939 3939 3939 222c  #k.#[2,"999999",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]


Aufbau Ip-Header (natapp):
Version (4b):		x4	--> IPv4
Kopflänge (4b):		x5	--> 5*32b=20B
ToS (8b):		x00
Paketlänge (16b):	x0059	--> 89B 
Id. (16b):		x04f3
Flags+Fragm (16b):	x4000
TTL (8b):		x40
Protocol (8b):		x06	--> TCP
Header-CS (16b):	x37aa
Source-IP (32b):	x7f00 0001 --> localhost
Dest.-IP (32b):		x7f00 0001 --> localhost
Optionen (max. 32b):    --> leer

Aufbau Ip-Header (QML):
Version (4b):		x4	--> IPv4
Kopflänge (4b):		x5	--> 5*32b=20B
ToS (8b):		x00
Paketlänge (16b):	x0057	--> 87B	-----> Unterschied !? 
Id. (16b):		x0f43
Flags+Fragm (16b):	x4000
TTL (8b):		x40
Protocol (8b):		x06	--> TCP
Header-CS (16b):	x2d5c
Source-IP (32b):	x7f00 0001 --> localhost
Dest.-IP (32b):		x7f00 0001
Optionen (max. 32b):    --> leer


Aufbau TCP-Header (natapp):
Source-Port (16b):		x9aa0
Dest.-Port (16b):		x04d2
Seq.-Nr. (32b):			xb56d 634c
Ack.-Nr. (32b):			x441e 1354
Offset/Len Header(4b):		x8		--> 8*32b=32B	
resrvd/Flags (12b):		x018
Windowsize (16b):		x0200
Checksum (16b):			xfe4d
Urgent-Ptr. (16b):		x0000
Options (32b):			x0101 080a	
(Zusatz (64b):			x384b 236c 384b 236b ) 

Aufbau TCP-Header(QML):
Source-Port (16b):		x9aac
Dest.-Port (16b):		x04d2
Seq.-Nr. (32b):			x38cd 0310
Ack.-Nr. (32b):			x7e79 79d8
Offset/Len Header(4b):		x8		--> 8*32b=32B	
resrvd/Flags (12b):		x018
Windowsize (16b):		x0200
Checksum (16b):			xfe4b
Urgent-Ptr. (16b):		x0000
Options (32b):			x0101 080a	?!
( Zusatz (64b):			x3855 ab42 3855 a1f4 )

HTTP-Teil (natapp):
Payload (35B):		x8123 5b32 2c22 3939 3939 3939 222c 2268 656c 6c6f 776f 726c 642f 7069 6e67 222c 7472 7565 5d --> [2,"999999","helloworld/ping",true]

HTTP-Teil (QML):
Payload (33B):		x5b32 2c22 3939 3939 3939 222c 2268 656c 6c6f 776f 726c 642f 7069 6e67 222c 7472 7565 5d      --> [2,"999999","helloworld/ping",true]


---> Payload an sich gleich, evtl schneidt QT zwei Byte ab ?!

26.3.: 
wenn ich an http-message hinten zwei Punkte anhänge, kann ich byte-größe des IP-Header strecken aber erhalte nachwievor keine Antwort


read_header für natapp:
read_header (ws=ws@entry=0x5555557d6690) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:277
(gdb) s
(gdb) p *ws
$5 = {state = 1, maxlength = 1048500, lenhead = 0, szhead = 2, length = 0, mask = 0, header = "\201#", '\000' <repeats 11 times>, itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d6650}

(gdb) s
read_header (ws=ws@entry=0x5555557d6690) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
(gdb) s
(gdb) p *ws
$6 = {state = 2, maxlength = 1048500, lenhead = 2, szhead = 2, length = 0, mask = 0, header = "\201#", '\000' <repeats 11 times>, itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d6650}
(gdb) s

_____________________________________________________	--> unterschiedliche start der Zeichenkette: Zustand(state) ändert sich von 1 auf 2 und [2  <--> \201# 



wsj1_send_issot (i1=2, t1=0x0, wsj1=0x5555557578d0, o1=0x5555555552bd "true", s2=0x7fffffffc210 "helloworld/ping", s1=0x555555757e98 "999999")
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:530
(gdb) s
afb_wsj1_call_s (wsj1=0x5555557578d0, api=0x5555555552c2 "helloworld", verb=<optimized out>, object=0x5555555552bd "true", on_reply=0x555555555030 <on_reply>,
    closure=0x555555757570) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:573
(gdb) s
call (api=0x5555555552c2 "helloworld", verb=0x5555555552b8 "ping", object=0x5555555552bd "true") at helloworld_natapp.c:151 


Versuch:
Einbauen von websocketclient::call, falls nicht klappt obige Spur weiter verfolgen:
void call(const QString& api, const QString& verb, const QJsonValue& arg = QJsonValue(), closure_t closure = nullptr)
Call an api’s verb with an argument.

    api: Api to call.
    verb: Verb to call.
    arg: Argument to pass.
    closure: callback function to call at the verb reply

obwohl payload und Länge exakt übereinstimmen erkennt afb-daemon den Payload nicht --> erst versuchen mit call-funktion zu arbeiten, und natapp-payload mit qml-payload ersetzen für testzwecke

31.3.
---> bester ansatz debuggen und vergleichen ?  Protokoll falsch, weil ich direkt [2,..] sende ? --> abgleichen was natapp rausschickt

Vergleich des Programmflows zwischen natapp und QT:

Start bei aws_on_readable


Vergleich:
__________________________________________________________________________
natapp:
Breakpoint 2, fdevcb (ws=0x5555557d6800, revents=<optimized out>, fdev=0x5555557cf560) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:138
(gdb) bt
#0  fdevcb (ws=0x5555557d6800, revents=<optimized out>, fdev=0x5555557cf560) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:138
#1  0x0000555555585f4e in handler (s=<optimized out>, fd=<optimized out>, revents=<optimized out>, userdata=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/fdev-systemd.c:29
#2  0x00007ffff7759e50 in ?? () from /lib/x86_64-linux-gnu/libsystemd.so.0
#3  0x00007ffff775b1ea in sd_event_dispatch () from /lib/x86_64-linux-gnu/libsystemd.so.0
#4  0x00005555555924e7 in evmgr_run (evmgr=0x5555557af720) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/evmgr.c:83
#5  0x0000555555588cdb in monitor (timeout=0, function=0x555555592610 <evmgr_job_run>, arg=0x5555557af720)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/sig-monitor.c:225
#6  0x0000555555586a1d in thread_run_internal (me=me@entry=0x7fffffffc4b0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:403
#7  0x0000555555586abf in thread_main () at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:450
#8  0x000055555558758e in jobs_start (allowed_count=<optimized out>, start_count=0, waiter_count=100, start=0x5555555677c0 <start>, arg=0x0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:911
#9  0x0000555555566acf in main (argc=<optimized out>, argv=0x7fffffffc6f8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:986

websock_dispatch (ws=0x5555557d6840, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:301
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6864, ws=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275

QT
#0  aws_on_readable (ws=0x5555557d6800) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:420
#1  fdevcb (ws=0x5555557d6800, revents=<optimized out>, fdev=0x5555557cf560) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:138
#2  0x0000555555585f4e in handler (s=<optimized out>, fd=<optimized out>, revents=<optimized out>, userdata=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/fdev-systemd.c:29
#3  0x00007ffff7759e50 in ?? () from /lib/x86_64-linux-gnu/libsystemd.so.0
#4  0x00007ffff775b1ea in sd_event_dispatch () from /lib/x86_64-linux-gnu/libsystemd.so.0
#5  0x00005555555924e7 in evmgr_run (evmgr=0x5555557af720) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/evmgr.c:83
#6  0x0000555555588cdb in monitor (timeout=0, function=0x555555592610 <evmgr_job_run>, arg=0x5555557af720)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/sig-monitor.c:225
#7  0x0000555555586a1d in thread_run_internal (me=me@entry=0x7fffffffc4b0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:403
#8  0x0000555555586abf in thread_main () at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:450
#9  0x000055555558758e in jobs_start (allowed_count=<optimized out>, start_count=0, waiter_count=100, start=0x5555555677c0 <start>, arg=0x0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:911
#10 0x0000555555566acf in main (argc=<optimized out>, argv=0x7fffffffc6f8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:986

websock_dispatch (ws=0x5555557d6840, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:301
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6864, ws=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275

__________________________________________________________________________  ----> stimmt überein

natapp:

ws_readv
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:276
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6864, ws=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
ws_readv (ws=0x5555557d6840, ws=0x5555557d6840, iovcnt=1, iov=0x7fffffffc1d0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:276
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6864, ws=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
ws_readv (ws=0x5555557d6840, ws=0x5555557d6840, iovcnt=1, iov=0x7fffffffc1d0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
aws_readv (ws=0x5555557d6800, iov=0x7fffffffc1d0, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
__GI___readv (fd=9, iov=0x7fffffffc1d0, iovcnt=1) at ../sysdeps/unix/sysv/linux/readv.c:26

QT:
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:276
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6864, ws=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
ws_readv (ws=0x5555557d6840, ws=0x5555557d6840, iovcnt=1, iov=0x7fffffffc1d0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:276
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6864, ws=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
ws_readv (ws=0x5555557d6840, ws=0x5555557d6840, iovcnt=1, iov=0x7fffffffc1d0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
aws_readv (ws=0x5555557d6800, iov=0x7fffffffc1d0, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
__GI___readv (fd=9, iov=0x7fffffffc1d0, iovcnt=1) at ../sysdeps/unix/sysv/linux/readv.c:26

_________________________________________________________________________ ---------> stimmt überein


natapp:
aws_readv (ws=0x5555557d6800, iov=0x7fffffffc1d0, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:405
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:277
websock_dispatch (ws=0x5555557d6840, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:315
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
websock_dispatch (ws=0x5555557d6840, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:354
aws_on_text (ws=0x5555557d6800, last=1, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:513

QT:
aws_readv (ws=0x5555557d6800, iov=0x7fffffffc1d0, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:405
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:277
websock_dispatch (ws=0x5555557d6840, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:315
read_header (ws=ws@entry=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
websock_dispatch (ws=0x5555557d6840, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:354
websock_error (ws=ws@entry=0x5555557d6840, code=code@entry=1002, data=data@entry=0x0, size=size@entry=0)

___________________________________________________________________________ ------------> Fehler wahrscheinlich in read_header, jetzt genauer analysieren


natapp:
aws_continue (ws=0x5555557d6800, last=1, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:494
aws_read (size=35, ws=0x5555557d6800) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:437
aws_read (ws=0x5555557d6800, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:431
websock_read (ws=0x5555557d6840, buffer=0x5555557cf1e0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:523
ws_read (buffer_size=<optimized out>, buffer=<optimized out>, ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:90
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
ws_read (buffer_size=35, buffer=0x5555557cf1e0, ws=0x5555557d6840) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:91
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=1, iov=0x7fffffffc160) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
aws_readv (ws=0x5555557d6800, iov=0x7fffffffc160, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
__GI___readv (fd=9, iov=0x7fffffffc160, iovcnt=1) at ../sysdeps/unix/sysv/linux/readv.c:26
aws_readv (ws=0x5555557d6800, iov=0x7fffffffc160, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:405
websock_read (ws=0x5555557d6840, buffer=0x5555557cf1e0, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:533
aws_read (ws=0x5555557d6800, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:444
aws_continue (ws=0x5555557d6800, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:498
aws_pick_buffer (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:98
aws_continue (ws=0x5555557d6800, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:501
aws_pick_buffer (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:98
aws_continue (ws=0x5555557d6800, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:502
aws_pick_buffer (ws=0x5555557d6800) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:99
aws_continue (ws=0x5555557d6800, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:504
aws_pick_buffer (ws=0x5555557d6800) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:101
aws_continue (ws=0x5555557d6800, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:504
wsj1_on_text (wsj1=0x5555557cf6a0, text=0x5555557cf1e0 "[2,\"999999\",\"helloworld/ping\",true]", size=35)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:381
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cf6a0, text=0x5555557cf1e0 "[2,\"999999\",\"helloworld/ping\",true]", size=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:294
wsj1_msg_scan (items=<optimized out>, text=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:235

QT:
websock_close (...)

______________________________________________________________________________


< "sudo tcpdump -XX -i lo port 1234"  beduetet nur pakete mit zielport 1234 filtern: sudo tcpdump -XX -i lo src port 1234 or dst port 1234 >

                                 ..

in afb_ws_texts
(gdb) p s
$2 = 0x7fffffffc2c6 "2"
(gdb) p s
$5 = 0x555555757e98 "999999"
(gdb) p s
$6 = 0x7fffffffc270 "helloworld/ping"
(gdb) p s
$9 = 0x5555555552bd "true"

(gdb) p *ws
$13 = {fd = 4, state = waiting, itf = 0x7ffff7dd22c0 <wsj1_itf>, closure = 0x5555557578d0, ws = 0x555555757e30, fdev = 0x555555757790, buffer = {buffer = 0x0, size = 0}}
(gdb) p ws->ws
$14 = (struct websock *) 0x555555757e30
(gdb) p *ws->ws
$15 = {state = 0, maxlength = 1048500, lenhead = 0, szhead = 0, length = 0, mask = 0, header = '\000' <repeats 13 times>, itf = 0x7ffff7dd2260 <aws_itf>, closure = 0x555555757df0}

websock_text_v (ws=0x555555757e30, last=1, iovec=0x7fffffffbfc0, count=9) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:241
(gdb) s
websock_send_v (count=9, iovec=0x7fffffffbfc0, opcode=1, rsv3=0, rsv2=0, rsv1=0, last=1, ws=0x555555757e30) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:240

 prüfe Nutzen: FRAME_SET_OPCODE(opcode)); ---> FRAME_SET_OPCODE(1) ==>  1 & 0X0F = 0x1

unsigned char first = (unsigned char)(FRAME_SET_FIN(1) | FRAME_SET_RSV1(0) | FRAME_SET_RSV1(0) | FRAME_SET_RSV1(0) | FRAME_SET_OPCODE(1));
				==>  (0b 1000 0000      | 0b 0000 0000	   | 0x00		|	0x00	   |	0x01)	=  0b1000 0001 = 0x81 = 129  ---> stimmt überein mit unten!


(gdb) s
websock_send_internal_v (ws=0x555555757e30, first=129 '\201', iovec=0x7fffffffbfc0, count=9) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:104
---> sehr interessant, weil darin header erstellt und bei size<35 anscheinend gepaddet 

(gdb) p first
$35 = 129 '\201'
(gdb) p header
$36 = "\201#", '@' <repeats 14 times>, 'Z' <repeats 16 times>
(gdb) s
ws_writev (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:79
(gdb) s
ws_writev (ws=0x555555757e30, ws=0x555555757e30, iovcnt=10, iov=0x7fffffffbd60) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:79
(gdb) s
ws_writev (ws=0x555555757e30, ws=0x555555757e30, iovcnt=10, iov=0x7fffffffbd60) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:79
(gdb) s
aws_writev (ws=0x555555757df0, iov=0x7fffffffbd60, iovcnt=10) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:341
(gdb) s
(gdb) p dsz
$52 = 37
(gdb) s
__GI___writev (fd=4, iov=iov@entry=0x7fffffffbd60, iovcnt=iovcnt@entry=10) at ../sysdeps/unix/sysv/linux/writev.c:26

20:17:28.030876 IP localhost.56664 > localhost.1234: Flags [P.], seq 229:266, ack 207, win 512, options [nop,nop,TS val 3962085342 ecr 3960460487], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 9782 4000 4006 a51a 7f00 0001 7f00  .Y..@.@.........
	0x0020:  0001 dd58 04d2 c66a b2dd 0d8e b55a 8018  ...X...j.....Z..
	0x0030:  0200 fe4d 0000 0101 080a ec28 9fde ec0f  ...M.......(....
	0x0040:  d4c7 8123 5b32 2c22 3939 3939 3939 222c  ...#[2,"999999",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]
20:17:28.031054 IP localhost.1234 > localhost.56664: Flags [P.], seq 207:311, ack 266, win 512, options [nop,nop,TS val 3962085342 ecr 3962085342], length 104
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  009c b1ff 4000 4006 8a5a 7f00 0001 7f00  ....@.@..Z......
	0x0020:  0001 04d2 dd58 0d8e b55a c66a b302 8018  .....X...Z.j....
	0x0030:  0200 fe90 0000 0101 080a ec28 9fde ec28  ...........(...(
	0x0040:  9fde 8166 5b33 2c22 3939 3939 3939 222c  ...f[3,"999999",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 302c 226a  {"response":0,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2030 227d 7d5d                 nt.=.0"}}]
20:17:28.031067 IP localhost.56664 > localhost.1234: Flags [.], ack 311, win 512, options [nop,nop,TS val 3962085342 ecr 3962085342], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 9783 4000 4006 a53e 7f00 0001 7f00  .4..@.@..>......
	0x0020:  0001 dd58 04d2 c66a b302 0d8e b5c2 8010  ...X...j........
	0x0030:  0200 fe28 0000 0101 080a ec28 9fde ec28  ...(.......(...(
	0x0040:  9fde                                     ..

(gdb) s
aws_writev (ws=0x555555757df0, iov=0x7fffffffbd60, iovcnt=10) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:365
(gdb) p rc
$54 = 37  (das dürfte die Anzahl an Bytes sein, die gesendet wurden mit writev)


vor Breakpoint 1, websock_send_internal_v (ws=0x555555757e30, first=129 '\201', iovec=0x7fffffffbfc0, count=9)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:104
20:49:56.017874 IP localhost.56726 > localhost.1234: Flags [S], seq 588161397, win 65495, options [mss 65495,sackOK,TS val 3964033234 ecr 0,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 5808 4000 4006 e4b1 7f00 0001 7f00  .<X.@.@.........
	0x0020:  0001 dd96 04d2 230e a175 0000 0000 a002  ......#..u......
	0x0030:  ffd7 fe30 0000 0204 ffd7 0402 080a ec46  ...0...........F
	0x0040:  58d2 0000 0000 0103 0307                 X.........
20:49:56.017884 IP localhost.1234 > localhost.56726: Flags [S.], seq 1117795763, ack 588161398, win 65483, options [mss 65495,sackOK,TS val 3964033234 ecr 3964033234,nop,wscale 7], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  003c 0000 4000 4006 3cba 7f00 0001 7f00  .<..@.@.<.......
	0x0020:  0001 04d2 dd96 42a0 35b3 230e a176 a012  ......B.5.#..v..
	0x0030:  ffcb fe30 0000 0204 ffd7 0402 080a ec46  ...0...........F
	0x0040:  58d2 ec46 58d2 0103 0307                 X..FX.....
20:49:56.017892 IP localhost.56726 > localhost.1234: Flags [.], ack 1, win 512, options [nop,nop,TS val 3964033234 ecr 3964033234], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 5809 4000 4006 e4b8 7f00 0001 7f00  .4X.@.@.........
	0x0020:  0001 dd96 04d2 230e a176 42a0 35b4 8010  ......#..vB.5...
	0x0030:  0200 fe28 0000 0101 080a ec46 58d2 ec46  ...(.......FX..F
	0x0040:  58d2                                     X.



(gdb) p header[0]
$11 = 129 '\201'
(gdb) p size
$12 = 35
(gdb) p header[1]
$13 = 64 '@'
(gdb) p header[2]
$14 = 64 '@'
(gdb) p header
$15 = "\201", '@' <repeats 15 times>, 'Z' <repeats 16 times>
(gdb) p header
$17 = "\201#", '@' <repeats 14 times>, 'Z' <repeats 16 times>
(gdb) p header[1]
$18 = 35 '#'
(gdb) p pos
$19 = 2
(gdb) p header[0]
$20 = 129 '\201'
(gdb) p header[1]
$21 = 35 '#'
(gdb) p header[2]
$22 = 64 '@'

(gdb) x/20x &iov[0]
0x7fffffffbd60: 0xf7ff5358      0x00007fff      0xffffbea8      0x00007fff
0x7fffffffbd70: 0xf7bcfab6      0x00007fff      0x00000001      0x00000000
0x7fffffffbd80: 0xffffc2c6      0x00007fff      0x00000001      0x00000000
0x7fffffffbd90: 0xf7bcfabc      0x00007fff      0x00000002      0x00000000
0x7fffffffbda0: 0x55757e98      0x00005555      0x00000006      0x00000000
(gdb) x/20x &header
0x7fffffffbf60: 0x40402381      0x40404040      0x40404040      0x40404040
0x7fffffffbf70: 0x5a5a5a5a      0x5a5a5a5a      0x5a5a5a5a      0x5a5a5a5a
0x7fffffffbf80: 0x20202020      0x20202020      0xe1e7e500      0xa39f6b3c
0x7fffffffbf90: 0xffffffff      0xffff0000      0xf7bca454      0x00007fff
0x7fffffffbfa0: 0x00000000      0x00000000      0x00000030      0x00000000

(gdb) p iov[0]
$44 = {iov_base = 0x7fffffffbf60, iov_len = 2}
(gdb) p header
$45 = "\201#", '@' <repeats 14 times>, 'Z' <repeats 16 times>
(gdb) p &header
$46 = (unsigned char (*)[32]) 0x7fffffffbf60
(gdb) x/10x 0x7fffffffbf60
0x7fffffffbf60: 0x40402381      0x40404040      0x40404040      0x40404040
0x7fffffffbf70: 0x5a5a5a5a      0x5a5a5a5a      0x5a5a5a5a      0x5a5a5a5a
0x7fffffffbf80: 0x20202020      0x20202020
(gdb) s
ws_writev (ws=0x555555757e30, ws=0x555555757e30, iovcnt=10, iov=0x7fffffffbd60) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:79
(gdb) s
aws_writev (ws=0x555555757df0, iov=0x7fffffffbd60, iovcnt=10) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:341
(gdb) s ....
(gdb) p dsz  (wahrscheinlich datasize)
$52 = 37
(gdb) s
__GI___writev (fd=4, iov=iov@entry=0x7fffffffbd60, iovcnt=iovcnt@entry=10) at ../sysdeps/unix/sysv/linux/writev.c:26

direkt danach:
21:14:46.743618 IP localhost.56726 > localhost.1234: Flags [P.], seq 229:266, ack 207, win 512, options [nop,nop,TS val 3965523976 ecr 3964033234], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 580c 4000 4006 e490 7f00 0001 7f00  .YX.@.@.........
	0x0020:  0001 dd96 04d2 230e a25a 42a0 3682 8018  ......#..ZB.6...
	0x0030:  0200 fe4d 0000 0101 080a ec5d 1808 ec46  ...M.......]...F
	0x0040:  58d2 8123 5b32 2c22 3939 3939 3939 222c  X..#[2,"999999",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]
21:14:46.743814 IP localhost.1234 > localhost.56726: Flags [P.], seq 207:311, ack 266, win 512, options [nop,nop,TS val 3965523976 ecr 3965523976], length 104
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  009c 6ec1 4000 4006 cd98 7f00 0001 7f00  ..n.@.@.........
	0x0020:  0001 04d2 dd96 42a0 3682 230e a27f 8018  ......B.6.#.....
	0x0030:  0200 fe90 0000 0101 080a ec5d 1808 ec5d  ...........]...]
	0x0040:  1808 8166 5b33 2c22 3939 3939 3939 222c  ...f[3,"999999",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 302c 226a  {"response":0,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2030 227d 7d5d                 nt.=.0"}}]
21:14:46.743827 IP localhost.56726 > localhost.1234: Flags [.], ack 311, win 512, options [nop,nop,TS val 3965523976 ecr 3965523976], length 0
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0034 580d 4000 4006 e4b4 7f00 0001 7f00  .4X.@.@.........
	0x0020:  0001 dd96 04d2 230e a27f 42a0 36ea 8010  ......#...B.6...
	0x0030:  0200 fe28 0000 0101 080a ec5d 1808 ec5d  ...(.......]...]
	0x0040:  1808                                     ..

---> der header 0x...2381 findet sich auch in tcpdump, in anderer reihenfolge: 0x0040: 8123 


AAAAber: bei QT fehlt die Kombi 8123 ---> 
21:18:48.188541 IP localhost.56744 > localhost.1234: Flags [P.], seq 229:266, ack 207, win 512, options [nop,nop,TS val 3965765414 ecr 3965763719], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 55ab 4000 4006 e6f1 7f00 0001 7f00  .YU.@.@.........
	0x0020:  0001 dda8 04d2 611d 474a 1690 f166 8018  ......a.GJ...f..
	0x0030:  0200 fe4d 0000 0101 080a ec60 c726 ec60  ...M.......`.&.`
	0x0040:  c087 2e23 5b32 2c22 3939 3939 3939 222c  ...#[2,"999999",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]


bestimmt verbirgt sich Fehler dort!
--> QAfbClient einbinden und testnachrichten senden --> klappt auch nicht trotz verschiedener Datentypen

1.4.
Es klaaappt ---> wichtig genau gleiche Länge und Anfangsbits 0x8123
14:50:25.921659 IP localhost.57504 > localhost.1234: Flags [P.], seq 488:525, ack 935, win 512, options [nop,nop,TS val 3988615353 ecr 3988615201], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 9c54 4000 4006 a048 7f00 0001 7f00  .Y.T@.@..H......
	0x0020:  0001 e0a0 04d2 8d1e a7dd 5b85 db3e 8018  ..........[..>..
	0x0030:  0200 fe4d 0000 0101 080a edbd 70b9 edbd  ...M........p...
	0x0040:  7021 8123 5b32 2c22 3939 3939 3939 222c  p!.#[2,"999999",
	0x0050:  2268 656c 6c6f 776f 726c 642f 7069 6e67  "helloworld/ping
	0x0060:  222c 7472 7565 5d                        ",true]
14:50:25.921874 IP localhost.1234 > localhost.57504: Flags [P.], seq 935:1039, ack 525, win 512, options [nop,nop,TS val 3988615353 ecr 3988615353], length 104
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  009c ddb9 4000 4006 5ea0 7f00 0001 7f00  ....@.@.^.......
	0x0020:  0001 04d2 e0a0 5b85 db3e 8d1e a802 8018  ......[..>......
	0x0030:  0200 fe90 0000 0101 080a edbd 70b9 edbd  ............p...
	0x0040:  70b9 8166 5b33 2c22 3939 3939 3939 222c  p..f[3,"999999",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 372c 226a  {"response":7,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2037 227d 7d5d                 nt.=.7"}}]



next:
- Verbindungsaufbau-Software übernehmen für QML_input_test und die Files dann in app2_self rüberkopieren um damit wgt zu erstellen
- eigenes binding für QT schreiben;

QML_input_test kann sich mit afb-daemon verbinden und nachrichten hinschicken (keine erhalten)   
binding schreiben --> self_qml_binding.c  ---> Verbindung mit QT klappt nachdem api angepasst wurde mit "helloworld"
gast@gast-pc:~/Schreibtisch/agl_microservice/app_self_QML_srvc$ afb-daemon --verbose --binding ./self_QML_binding.so --port 1234 --token '123456'

next:   - Antworten erhalten und anzeigen
	- rudimentäres Keyboard in App bereitstellen 

Für receive: zuerstmal herausfinden wie receive bei TCP-packet erfolgt
tcpSocket->bytesAvailable() 
readyread klappt, am Ende wird hasReadSome(str) aufgerufen ---> wie in QML ausgeben? über hasreadSome ?

clientstuff::readyreaad in receivedSomething von Backend übernehmen
receivedSomething wird nicht aufgerufen --> Versuch Backend und CLientstuff in eine Klasse zu wurschteln ?!

merged_QML_... kann daten an AFB-daemon senden, jetzt schauen wie receive klappt: genau an Send data orientieren und adaptieren

Q_PROPERTY richtig implementieren !

---> receive Nachrichten klappt!, jetzt noch kurz Nachrichten anpassen, dann KeyBoard angehen
beachte: /AGL/Demo/Controls befindet sich unter anderem Keyboard.qml, Key.qml aber bisher geht nur Keyboard

QML verwendet AGL/Demo/Controls unter Pfad /usr/... statt sdk/...  und ich habe in Key.qml "property string selectedText" hinzugefügt
---> Debuggen was genau bei Tastendruck passiert --> klappt nicht wegen QML:
QML debugging is enabled. Only use this in a safe environment.
qml: onClicked
qml: !checkable-function
qml: insert-function
qml: clear selected text
qml: input: null
file:///usr/lib/x86_64-linux-gnu/qt5/qml/AGL/Demo/Controls/Key.qml:43: TypeError: Cannot read property 'selectedText' of null

----> Fehler in Zeile: 
var input = keyboard.target ---> abgefangen durch if-Abfrage,  der angeklickte Buchstabe taucht in label.text auf ---> neuer Fehler durch "input.cursorPosition"

---> wahrscheinlich einfacher Keyboard selbst zu schreiben

<qml: the expression "property alias xxx" creates a bi-directional binding, means when one value changes the aliased one gets also changed too>

Keyboard-problem:  die Migrierung auf MoTalk_XXX hat geklappt, jetzt innerhalb nach Fehler suchen
Keyboard sichtbar und auswählbar, jetzt Text einlesen und dann "abspecken" sowie Redundanzen vermeiden 
(manchmal QML Fehler, wenn ganzer Display Keyboard-Hintergrund hat, manchmal auch einzelne QML-Files nach speichern nicht neu, schließen udn neu öffnen in projekt)

Keyboard klappt, bloß noch 'label.text' einbinden misslingt --> Versuch über QProperty zu handeln --> dummy-Versuch emit UserInputChanged() unter sendMessage eingefügt.
--> klappt immer noch nicht
Tipp: _afbBackend.UserInput scheint Wert zu speichern und dann zu löschen, nachschauen wie bei hello/ping das einlesen der Eingabe klappte
--> einlesen in Variable klappt, aber Wiedergabe in QML-Window nicht, weil eingabe wieder überschrieben wird --> Schritt für Schritt debuggen ?!

schauen ob watchpoint auf m_userInput möglich ist

debuggen:
sendkeyBoardiNPut wird doppelt geöffnet, einmal beim Button klicken und einmal beim bloßen Tippen --> aber debug hilft nicht bei Fehlersuche.

Durchlesen QT Property/property binding, beispiele suchen und anpassen, auch WRTIE READ beachten
You also should have a change signal defined after NOTIFY in there, to notify QML about property changes --> beduetet für Keyboard brauch ich kein Notify, weil QML ja C++ triggern soll

In QML:	myObject.client_name  <----> in c++: QString name = myObject->property("client_name").toString();

um von QML zurück nach C++ level benötigt man einen Setter

---> QML signal and handler-events kann helfen, in Abstract_Keyboard einpflegen


KeyPressreceived wird nur einmal afgerufen, brauche evtl ein emit --> lesen QMetaObject::invokeMethod

signal and slots, mit Farben drücken adaptieren --> keyboard.Input... --> in mergedQML integrieren  
Fehler:
qrc:/Calculator.qml:12 Invalid signal parameter type: text --> Fehlerbehebung: QtObject vor keytext einfügen)

--> KeyboardInputTest klappt jetzt, next adaptieren für keyboard --> nur rudimentäre Tasten von MoTalk_Keyboard übernehmen zum Testen
Tasten werden rudimentär angezeigt, jetzt koppeln mit Click

Test: in MoTalk_Keyboard property alias .. wie in Calculator einfügen  (repeater vervielfältigt ein Item, hat aber keine id, evtl itemAt(2) verwenden, sonst aber einzeln instantiieren)

SingleKey-Input klappt ---> übernehmen in mergedQML --> done

next: parsen der Eingabe nach main.cpp	--> https://doc.qt.io/qt-5/qtqml-cppintegration-exposecppattributes.html ---> klappt einfach mit setAuthor ohne das in main.cpp einzugeben :-)


05.05.:
to do:
neues widget erstellen und testen, am besten mit service für afb-daemon, Vorlage: app_self_QML
alles in app3_self_qml gepackt, jetzt environment sourcen und "agl/autobuild pacakge" starten --> hat geklappt --> self_qml2.wgt

6.5.:
keyinput klappt, layout schlecht, besser die Buttons unter den TextInput zu setzen ? --> Layout anpassen, done! --> main.qml ind app3_self_qml übernommen

binding direkt in Package einbinden ? --> services und socket file nachschauen und evtl so verpacken, damit automatisch Zugriff besteht
( siehe hierzu https://agl-gsod-2020-demo-mkdocs.readthedocs.io/en/latest/master/apis_services/reference/af-main/2.2-config.xml/ )
 
binding muss in lib-Ordner, testweise probieren autobuild --> klappt nicht so ganz --> erst mit wgtpkg versuchen und sonst bash-skript schreiben mit allen service-files, Ordnern usw.

widget-erstellung:  erst alles in passender Ordnerstruktur in Ordner package ablegen, und dann Befehl "wgtpkg-pack -f -o app_attempt4.wgt package/ --verbose" ausführen
--> test auf qemu

wenn ich den Namen der API verändere, kann ihc nicht mehr kommunizieren.


---> wieder debuggen, Vermutung dass es am Key liegt, aber nicht sicher
aber erstmal auf qemu test mit api "helloworld" --> klappt mit Angabe von "helloworld" im config.xml aber Port ist falsch, keine Nachrichtenasutausch möglich

wenn ich mit "afm-util" ein Widget installiere, wird afm-unit.conf aufgerufen und wandelt die Angaben in config.xml um in die .service/socket-Files
----> siehe dazu: http://old-docs.automotivelinux.org/docs/en/guppy/apis_services/reference/af-main/2.2-config.xml.html 
The variables starting with X-AFM- but not with X-AFM-- are the public variables and can be seen with "afm-util detail".Variables   starting   with  X-AFM--  are   private   to   the   framework.   By   example, X-AFM--http-port is used to record the allocated port for applications.

evtl mal testen "afm-util --verbose install/start *.wgt"   

<
nach start von afb-daemon:
gast@gast-pc:~/Schreibtisch/agl_microservice/app_self_QML_srvc$ afb-daemon --verbose --binding ./motalk_binding.so --port 1234 --token 123456
NOTICE: API monitor starting...
NOTICE: API motalk starting...
NOTICE: Serving rootdir=. uploaddir=.
NOTICE: Listening interface *:1234
NOTICE: Browser URL= http://localhost:1234

gast@gast-pc:~/Schreibtisch/agl_microservice$ sudo netstat -tulpn
Aktive Internetverbindungen (Nur Server)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:1234            0.0.0.0:*               LISTEN      12417/afb-daemon    
 

erstmal testen ohne bestimmten port und token --> geht nicht, afb-daemon startet port 1234 per default


zu binding (agl-service-motalk fällt wohl unter kategorie application binding):
When anapplication is started by the AGL application framework, a dedicate binder is started that loads/activates application binding(s).
API expose by application-binding are executed within corresponding application security context.
Afb-daemon parses URI requests to extract the API(binding name) and the VERB(method to activate). As an example, URI foo/bar translates to binding namedfoo and method named bar.
To serve such a request,  afb-daemon looks for an active binding named foo and then within this binding for a method named bar.
Afb-daemon is case-insensitive when parsing URI. (für Beispiel HVAC - hvac)
The name of a given binding is also known as the name of the API prefix that defines the binding. For example, when a client of afb-daemon calls a URI named foo/bar. 
Afb-daemon extracts the prefix foo and the suffix bar. foo must match a binding name and barhas to match a VERB attached to some method.
Merke, eine API heißt "binding", das komplette File heißt service oder so

Auf Test-PC mal versuchen bei eigen erstelltem File den Port auf 1234 zu ändern. 

in afb-ws-client.c liegen bereits einige vorberechnete secWebsocket-Keys ---> WebSocketKey ist egal, ich kann auch leer lassen und trotzdem Websocket-pings senden
für API passende Funktion:	afb_ws_client_connect_api ?!

wenn ich ein anderes Verb als "ping" verwende, klappt nachrichtenempfang auch nicht. Wenn ich [1,"999999","helloworld/ping",true] statt [2,"999999","helloworld/ping",true] verwende,
erhalte ich ebenfalls keine Antwort. 
To do: JSON-Nachrichten nachlesen --> afb-daemon/app-framework-binder/test/monitoring/AFB.js --> "2" = Call, also müsste passen 
To do: Debuggen um heruaszufinden, warum API umbenennen von helloworld auf motalk nicht klappt


Verlauf bei APIs jeweils mit helloworld:
Breakpoint 2, afb_websock_check_upgrade (hreq=0x5555557cf600, apiset=0x5555557cdc10) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:243

helloworld-API:
helloworld minutiös Funktion für Funktion:
Breakpoint 2, afb_websock_check_upgrade (hreq=0x5555557cf640, apiset=0x5555557cdc50)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:243
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:177
MHD_lookup_connection_value (connection=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599e58 "Upgrade") at connection.c:478
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599e58 "Upgrade", key_size=7,
    value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0) at connection.c:521
MHD_str_equal_caseless_bin_n_ (str1=str1@entry=0x555555599e58 "Upgrade", str2=0x5555557d6d46 "Upgrade", len=len@entry=7) at mhd_str.c:414
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599e58 "Upgrade", key_size=7,
    value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0) at connection.c:539
MHD_lookup_connection_value (connection=0x5555557cf470, kind=<optimized out>, key=<optimized out>) at connection.c:489
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:182
MHD_lookup_connection_value (connection=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599e60 "Connection") at connection.c:478
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599e60 "Connection", key_size=10,
    value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0) at connection.c:521
----------------->wird zum zweiten Mal aufgerufen, erst wegen Abgleich Upgrade und nun connection

MHD_str_equal_caseless_bin_n_ (str1=str1@entry=0x555555599e60 "Connection", str2=0x5555557d6d5a "Connection", len=len@entry=10) at mhd_str.c:414
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599e60 "Connection", key_size=10,
    value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0) at connection.c:539
MHD_lookup_connection_value (connection=0x5555557cf470, kind=<optimized out>, key=<optimized out>) at connection.c:489
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
headerhas (needle=<optimized out>, header=<optimized out>)
--- viel kleinscheiss zum byte-schubsen ----
headerhas (needle=<optimized out>, header=0x5555557d6d66 "Upgrade")
--- nochmal kleinvieh ----
headerhas (needle=<optimized out>, header=0x5555557d6d66 "Upgrade")
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:188
MHD_lookup_connection_value (connection=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599f30 <sec_websocket_key_s> "Sec-WebSocket-Key")
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599f30 <sec_websocket_key_s> "Sec-WebSocket-Key",
    key_size=17, value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0) at connection.c:521
MHD_str_equal_caseless_bin_n_ (str1=str1@entry=0x555555599f30 <sec_websocket_key_s> "Sec-WebSocket-Key", str2=0x5555557d6d8a "Sec-WebSocket-Key", len=len@entry=17)
    at mhd_str.c:414
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599f30 <sec_websocket_key_s> "Sec-WebSocket-Key",
    key_size=17, value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0) at connection.c:539
MHD_lookup_connection_value (connection=0x5555557cf470, kind=<optimized out>, key=<optimized out>) at connection.c:489
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
MHD_lookup_connection_value (connection=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599f10 <sec_websocket_version_s> "Sec-WebSocket-Version")
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599f10 <sec_websocket_version_s> "Sec-WebSocket-Version",
    key_size=21, value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0)
MHD_str_equal_caseless_bin_n_ (str1=str1@entry=0x555555599f10 <sec_websocket_version_s> "Sec-WebSocket-Version", str2=0x5555557d6d6f "Sec-WebSocket-Version",
    len=len@entry=21)
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599f10 <sec_websocket_version_s> "Sec-WebSocket-Version",
    key_size=21, value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0) at connection.c:539
MHD_lookup_connection_value (connection=0x5555557cf470, kind=<optimized out>, key=<optimized out>) at connection.c:489
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:195
afb_websock_check_upgrade (hreq=0x5555557cf640, apiset=0x5555557cdc50)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:251
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:204
MHD_lookup_connection_value (connection=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599ed0 <sec_websocket_protocol_s> "Sec-WebSocket-Protocol")
    at connection.c:478
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND,
    key=0x555555599ed0 <sec_websocket_protocol_s> "Sec-WebSocket-Protocol", key_size=22, value_ptr=value_ptr@entry=0x7fffffffb370,
    value_size_ptr=value_size_ptr@entry=0x0) at connection.c:521
MHD_str_equal_caseless_bin_n_ (str1=str1@entry=0x555555599ed0 <sec_websocket_protocol_s> "Sec-WebSocket-Protocol", str2=0x5555557d6db7 "Sec-WebSocket-Protocol",
    len=len@entry=22) at mhd_str.c:414
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND,
    key=0x555555599ed0 <sec_websocket_protocol_s> "Sec-WebSocket-Protocol", key_size=22, value_ptr=value_ptr@entry=0x7fffffffb370,
    value_size_ptr=value_size_ptr@entry=0x0) at connection.c:539
MHD_lookup_connection_value (connection=0x5555557cf470, kind=<optimized out>, key=<optimized out>) at connection.c:489
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:205
search_proto (protodefs=<optimized out>, protocols=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:107
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
search_proto (protodefs=0x5555557ac5a0 <protodefs>, protocols=0x5555557d6dcf "x-afb-ws-json1")
search_proto (protodefs=0x5555557ac5a0 <protodefs>, protocols=0x5555557d6dcf "x-afb-ws-json1")
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
MHD_create_response_for_upgrade (upgrade_handler=0x5555555830a0 <upgrade_to_websocket>, upgrade_handler_cls=0x5555557b0260) at response.c:1173
MHD_add_response_header (response=0x5555557cf810, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:136
MHD_str_equal_caseless_ (str1=str1@entry=0x7ffff751d89d "Connection", str2=str2@entry=0x7ffff751d8e7 "Transfer-Encoding") at mhd_str.c:348
MHD_add_response_header (response=0x5555557cf810, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:150
MHD_str_equal_caseless_ (str1=str1@entry=0x7ffff751d89d "Connection", str2=str2@entry=0x7ffff751d902 "Content-Length") at mhd_str.c:348
MHD_str_equal_caseless_ (str1=0x7ffff751d8a0 "nection", str1@entry=0x7ffff751d89d "Connection", str2=0x7ffff751d905 "tent-Length",
    str2@entry=0x7ffff751d902 "Content-Length") at mhd_str.c:355
MHD_add_response_header (response=0x5555557cf810, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:151
add_response_entry (response=0x5555557cf810, kind=MHD_HEADER_KIND, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") 

---- fertig, auf tcpdump sieht man nun auch die AcceptResponse

für motalk:
...
MHD_str_equal_caseless_bin_n_ (str1=str1@entry=0x555555599e60 "Connection", str2=0x5555557d6d5a "Connection", len=len@entry=10) at mhd_str.c:414
MHD_lookup_connection_value_n (connection=connection@entry=0x5555557cf470, kind=MHD_HEADER_KIND, key=0x555555599e60 "Connection", key_size=10,
    value_ptr=value_ptr@entry=0x7fffffffb370, value_size_ptr=value_size_ptr@entry=0x0) at connection.c:539
MHD_lookup_connection_value (connection=0x5555557cf470, kind=<optimized out>, key=<optimized out>) at connection.c:489
check_websocket_upgrade (protodefs=0x5555557ac5a0 <protodefs>, apiset=0x5555557cdc50, hreq=0x5555557cf640, con=0x5555557cf470)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:183
headerhas (needle=<optimized out>, header=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-websock.c:86
...

Ende von motalk:
MHD_str_equal_caseless_ (str1=str1@entry=0x7ffff751d89d "Connection", str2=str2@entry=0x7ffff751d8e7 "Transfer-Encoding") at mhd_str.c:353
MHD_add_response_header (response=0x5555557cf810, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:150
MHD_str_equal_caseless_ (str1=str1@entry=0x7ffff751d89d "Connection", str2=str2@entry=0x7ffff751d902 "Content-Length") at mhd_str.c:348
MHD_str_equal_caseless_ (str1=0x7ffff751d8a0 "nection", str1@entry=0x7ffff751d89d "Connection", str2=0x7ffff751d905 "tent-Length",
    str2@entry=0x7ffff751d902 "Content-Length") at mhd_str.c:355
MHD_add_response_header (response=0x5555557cf810, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:151
add_response_entry (response=0x5555557cf810, kind=MHD_HEADER_KIND, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:90
add_response_entry (response=0x5555557cf810, kind=MHD_HEADER_KIND, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:95
add_response_entry (response=0x5555557cf810, kind=MHD_HEADER_KIND, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:96
add_response_entry (response=0x5555557cf810, kind=MHD_HEADER_KIND, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:97
add_response_entry (response=0x5555557cf810, kind=MHD_HEADER_KIND, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at resp
add_response_entry (response=0x5555557cf810, kind=MHD_HEADER_KIND, header=0x7ffff751d89d "Connection", content=0x7ffff752024b "Upgrade") at response.c:103
__GI___strdup (s=s@entry=0x7ffff751d89d "Connection") at strdup.c:40
__GI___strdup (s=s@entry=0x7ffff751d89d "Connection") at strdup.c:42


---------------> Protokoll-Packet ging doch noch raus für MoTalk:
17:09:45.243933 IP localhost.1234 > localhost.39874: Flags [P.], seq 1:207, ack 229, win 512, options [nop,nop,TS val 932636874 ecr 931376652], length 206
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0102 cb0d 4000 4006 70e6 7f00 0001 7f00  ....@.@.p.......
	0x0020:  0001 04d2 9bc2 d4fd a401 e1b2 7174 8018  ............qt..
	0x0030:  0200 fef6 0000 0101 080a 3796 e8ca 3783  ..........7...7.
	0x0040:  ae0c 4854 5450 2f31 2e31 2031 3031 2053  ..HTTP/1.1.101.S
	0x0050:  7769 7463 6869 6e67 2050 726f 746f 636f  witching.Protoco
	0x0060:  6c73 0d0a 5570 6772 6164 653a 2077 6562  ls..Upgrade:.web
	0x0070:  736f 636b 6574 0d0a 5365 632d 5765 6253  socket..Sec-WebS
	0x0080:  6f63 6b65 742d 5072 6f74 6f63 6f6c 3a20  ocket-Protocol:.
	0x0090:  782d 6166 622d 7773 2d6a 736f 6e31 0d0a  x-afb-ws-json1..
	0x00a0:  5365 632d 5765 6253 6f63 6b65 742d 4163  Sec-WebSocket-Ac
	0x00b0:  6365 7074 3a20 6635 4932 6835 3368 4273  cept:.f5I2h53hBs
	0x00c0:  5435 4553 3345 4868 6e78 414a 326e 7173  T5ES3EHhnxAJ2nqs
	0x00d0:  773d 0d0a 436f 6e6e 6563 7469 6f6e 3a20  w=..Connection:.
	0x00e0:  5570 6772 6164 650d 0a44 6174 653a 2054  Upgrade..Date:.T
	0x00f0:  7565 2c20 3235 204d 6179 2032 3032 3120  ue,.25.May.2021.
	0x0100:  3135 3a30 393a 3435 2047 4d54 0d0a 0d0a  15:09:45.GMT....
17:09:45.243943 IP localhost.39874 > localhost.1234: Flags [.], ack 207, win 

Senden geht auch raus, aber kein response!  ---> liegt evtl am File unter /tmp ?!
17:11:42.100757 IP localhost.39874 > localhost.1234: Flags [P.], seq 229:262, ack 207, win 512, options [nop,nop,TS val 932753731 ecr 932636874], length 33
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0055 471d 4000 4006 f583 7f00 0001 7f00  .UG.@.@.........
	0x0020:  0001 9bc2 04d2 e1b2 7174 d4fd a4cf 8018  ........qt......
	0x0030:  0200 fe49 0000 0101 080a 3798 b143 3796  ...I......7..C7.
	0x0040:  e8ca 8123 5b32 2c22 3939 3939 3939 222c  ...#[2,"999999",
	0x0050:  226d 6f74 616c 6b2f 7069 6e67 222c 7472  "motalk/ping",tr
	0x0060:  7565 5d                                  ue]


to do:
Vorläufiges Fazit:  das Protocol Switching klappt, aber die Methode "ping" unter motalk_binding.c wird nicht aufgerufen ---> diesbezüglich weiter debuggen

evtl wegen afb_req_success und afb_req_success_f ?  bloß afb_req_success klappt nicht, also nochmal erst helloworld und dann motalk mit gcc debuggen und funktionsverlauf verfolgen


API helloworld:
#0  0x00007ffff3f49a5b in ping () from ./motalk_binding.so
#1  0x00005555555857fc in process_async (signum=<optimized out>, arg=0x5555557d0470) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-xreq.c:831
#2  0x0000555555588cdb in monitor (timeout=20, function=0x5555555857d0 <process_async>, arg=0x5555557d0470)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/sig-monitor.c:225
#3  0x000055555558688d in thread_run_internal (me=me@entry=0x7fffffffc3f0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:388
#4  0x0000555555586abf in thread_main () at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:450
#5  0x000055555558758e in jobs_start (allowed_count=<optimized out>, start_count=0, waiter_count=100, start=0x5555555677c0 <start>, arg=0x0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/jobs.c:911
#6  0x0000555555566acf in main (argc=<optimized out>, argv=0x7fffffffc638) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/main-afb-daemon.c:986

process_async (signum=<optimized out>, arg=0x5555557d1380) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-xreq.c:834
afb_xreq_unhooked_unref (xreq=0x5555557d1380) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-xreq.c:73
process_async (signum=<optimized out>, arg=0x5555557d1380) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-xreq.c:835
afb_xreq_unhooked_unref (xreq=0x5555557d1380) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-xreq.c:74
xreq_finalize (xreq=0x5555557d1380) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-xreq.c:54

(gdb) p *xreq
$1 = {request = {itf = 0x5555557ac000 <xreq_itf>, api = 0x5555557ce580, vcbdata = 0x0, called_api = 0x5555557cf93d "helloworld", called_verb = 0x5555557cf948 "ping"}, context = {
    session = 0x5555557cf750, token = 0x5555557b01a0, credentials = 0x0, api_key = 0x5555557ce658, super = 0x0, {flags = 0, {created = 0, validated = 0, invalidated = 0, 
        closing = 0, closed = 0}}}, apiset = 0x5555557cdc50, json = 0x5555557d1430, queryitf = 0x5555557abec0 <afb_ws_json1_xreq_itf>, refcount = 0, replied = 1, hookflags = 0,
  hookindex = 0, caller = 0x0}

wsreq_destroy (xreq=0x5555557d1380) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws-json1.c:254
afb_context_disconnect (context=context@entry=0x5555557d13a8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-context.c:92
afb_session_unref (session=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:478
afb_context_disconnect (context=context@entry=0x5555557d13a8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-context.c:92
afb_session_unref (session=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:478
session_lock (session=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:186
afb_session_unref (session=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:477
afb_hook_session_unref (session=session@entry=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-hook.c:1610
init_hookid (hookid=0x7fffffffc1b0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-hook.c:148
afb_hook_session_unref (session=session@entry=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-hook.c:1612
afb_session_unref (session=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:484
session_lock (session=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:186
afb_context_disconnect (context=context@entry=0x5555557d13a8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-context.c:100
afb_cred_unref (cred=0x0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-cred.c:170
afb_context_disconnect (context=context@entry=0x5555557d13a8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-context.c:102
afb_token_unref (token=0x5555557b01a0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-token.c:139
afb_context_disconnect (context=context@entry=0x5555557d13a8) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-context.c:103
wsreq_destroy (xreq=0x5555557d1380) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws-json1.c:258
afb_wsj1_msg_unref (msg=0x5555557d1300) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:424
afb_wsj1_msg_unref (msg=0x5555557d1300) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:435
afb_wsj1_unref (wsj1=0x5555557cfdf0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:136
afb_wsj1_msg_unref (msg=0x5555557d1300) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:436
...
api_call_cb (closure=0x5555557ce580, xreq=0x5555557d1c50) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-export.c:1806
afb_api_v3_process_call (api=0x5555557ce540, xreq=0x5555557d1c50) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-api-v3.c:80
search_dynamic_verb (api=<optimized out>, api=<optimized out>, name=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-api-v3.c:69
afb_api_v3_process_call (api=0x5555557ce540, xreq=0x5555557d1c50) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-api-v3.c:90
search_dynamic_verb (api=0x5555557ce540, api=0x5555557ce540, name=0x5555557cf948 "ping")
verb_name_compare (name=0x5555557cf948 "ping", verb=0x7ffff414ad00 <verbs>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-api-v3.c:61

"add_response_entry" wird nur bei connect angesteuert

<
A binding is an independent piece of software. A binding is self contain and exposes application logic as sharable library. A binding is intended to be
dynamically loaded by ***afb-daemon*** to expose application API. Technically, a binder binding does not reference and is not linked with any ***afb-daemon*** library.
>



in der motalk-app wird nur die response angezeigt, evtl macht es doch sinn das aws_readv anzuschauen ?!

Api helloworld:
#0  aws_readv (ws=0x5555557d02f0, iov=0x7fffffffc110, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
#1  0x00005555555928ea in ws_readv (ws=0x5555557d0330, ws=0x5555557d0330, iovcnt=1, iov=0x7fffffffc110)
#2  ws_read (buffer_size=<optimized out>, buffer=<optimized out>, ws=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:92
#3  read_header (ws=ws@entry=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
#4  0x00005555555930fb in websock_dispatch (ws=0x5555557d0330, loop=loop@entry=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:313
#5  0x0000555555591fe8 in aws_on_readable (ws=0x5555557d02f0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:421
#6  fdevcb (ws=0x5555557d02f0, revents=<optimized out>, fdev=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:138
#7  0x0000555555585f4e in handler (s=<optimized out>, fd=<optimized out>, revents=<optimized out>, userdata=<optimized out>)
#8  0x00007ffff7759e50 in ?? () from /lib/x86_64-linux-gnu/libsystemd.so.0
#9  0x00007ffff775b1ea in sd_event_dispatch () from /lib/x86_64-linux-gnu/libsystemd.so.0
#10 0x00005555555924e7 in evmgr_run (evmgr=0x5555557afa20) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/evmgr.c:83


__GI___readv (fd=9, iov=iov@entry=0x7fffffffc110, iovcnt=iovcnt@entry=1) at ../sysdeps/unix/sysv/linux/readv.c:26
	< rc aus readv gibt Rückgabewert 2 >
read_header (ws=ws@entry=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:277
websock_dispatch (ws=0x5555557d0330, loop=loop@entry=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:315
read_header (ws=ws@entry=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
websock_dispatch (ws=0x5555557d0330, loop=loop@entry=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:354
aws_on_text (ws=0x5555557d02f0, last=1, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:513
aws_continue (ws=0x5555557d02f0, last=1, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:494
aws_read (size=35, ws=0x5555557d02f0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:437
aws_read (ws=ws@entry=0x5555557d02f0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:431
aws_read (ws=ws@entry=0x5555557d02f0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:439
poll (__timeout=<optimized out>, __nfds=<optimized out>, __fds=<optimized out>) at /usr/include/x86_64-linux-gnu/bits/poll2.h:46
aws_read (ws=ws@entry=0x5555557d02f0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:442
websock_read (ws=0x5555557d0330, buffer=0x5555557cf930, size=size@entry=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:523
ws_read (buffer_size=<optimized out>, buffer=<optimized out>, ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:90
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>)
ws_read (buffer_size=35, buffer=0x5555557cf930, ws=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:91
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=1, iov=0x7fffffffc0a0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
__GI___readv (fd=9, iov=iov@entry=0x7fffffffc0a0, iovcnt=iovcnt@entry=1) at ../sysdeps/unix/sysv/linux/readv.c:26
aws_readv (ws=0x5555557d02f0, iov=0x7fffffffc0a0, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:405
websock_read (ws=0x5555557d0330, buffer=0x5555557cf930, size=size@entry=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:533
aws_read (ws=ws@entry=0x5555557d02f0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:444
aws_continue (ws=0x5555557d02f0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:498
aws_pick_buffer (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:98
aws_continue (ws=0x5555557d02f0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:501
aws_pick_buffer (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:98
aws_continue (ws=0x5555557d02f0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:502
aws_pick_buffer (ws=0x5555557d02f0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:99
aws_continue (ws=0x5555557d02f0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:504
aws_pick_buffer (ws=0x5555557d02f0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:101
aws_continue (ws=0x5555557d02f0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:504
wsj1_on_text (wsj1=0x5555557cfdf0, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]", size=35)
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfdf0, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]", size=<optimized out>)
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfdf0, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]", size=<optimized out>)
wsj1_msg_scan (items=<optimized out>, text=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:235
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfdf0, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]", size=<optimized out>)
wsj1_msg_scan (items=<optimized out>, text=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:263
		< wiederholt sich etliche male >
wsj1_msg_parse_string (size=8, offset=3, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]") at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:287
wsj1_msg_parse_extract (size=6, offset=4, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]") at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:281
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfdf0, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]", size=<optimized out>)
wsj1_msg_parse_string (size=<optimized out>, offset=4, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]")
wsj1_msg_parse_extract (size=<optimized out>, offset=4, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]")
....
afb_wsj1_addref (wsj1=0x5555557cfdf0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:130
wsj1_on_text (wsj1=0x5555557cfdf0, text=<optimized out>, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:387
aws_on_call_cb (closure=0x5555557d6cc0, api=0x5555557cf93d "helloworld", verb=0x5555557cf948 "ping", msg=0x5555557d03f0)
afb_wsj1_msg_token (msg=msg@entry=0x5555557d03f0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:508
aws_on_call_cb (closure=0x5555557d6cc0, api=0x5555557cf93d "helloworld", verb=0x5555557cf948 "ping", msg=0x5555557d03f0)
afb_xreq_init (xreq=xreq@entry=0x5555557d0470, queryitf=queryitf@entry=0x5555557abec0 <afb_ws_json1_xreq_itf>)
afb_context_init (context=context@entry=0x5555557d0498, session=0x5555557cf750, token=0x5555557b01a0, cred=0x0)
afb_session_addref (session=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:463
session_lock (session=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:186
afb_session_addref (session=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-session.c:466
afb_hook_session_addref (session=session@entry=0x5555557cf750) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-hook.c:1605
afb_xreq_process (xreq=0x5555557d0470, apiset=0x5555557cdc50) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-xreq.c:863
afb_apiset_lookup_started (set=set@entry=0x5555557cdc50, name=0x5555557cf93d "helloworld", rec=rec@entry=1)
lookup (set=set@entry=0x5555557cdc50, name=0x5555557cf93d "helloworld", rec=rec@entry=1)
search (set=0x5555557cdc50, name=0x5555557cf93d "helloworld") at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-apiset.c:241
start_api (api=0x5555557ce640) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-apiset.c:797
....
job_create (group=0x5555557ce580, timeout=20, callback=0x5555555857d0 <process_async>, arg=0x5555557d0470)



motalk-API:
#0  aws_readv (ws=0x5555557d02f0, iov=0x7fffffffc110, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
#1  0x00005555555928ea in ws_readv (ws=0x5555557d0330, ws=0x5555557d0330, iovcnt=1, iov=0x7fffffffc110)
#2  ws_read (buffer_size=<optimized out>, buffer=<optimized out>, ws=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:92
#3  read_header (ws=ws@entry=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
#4  0x00005555555930fb in websock_dispatch (ws=0x5555557d0330, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:313
#5  0x0000555555591fe8 in aws_on_readable (ws=0x5555557d02f0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:421
#6  fdevcb (ws=0x5555557d02f0, revents=<optimized out>, fdev=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:138
#7  0x0000555555585f4e in handler (s=<optimized out>, fd=<optimized out>, revents=<optimized out>, userdata=<optimized out>)
#8  0x00007ffff7759e50 in ?? () from /lib/x86_64-linux-gnu/libsystemd.so.0
#9  0x00007ffff775b1ea in sd_event_dispatch () from /lib/x86_64-linux-gnu/libsystemd.so.0
#10 0x00005555555924e7 in evmgr_run (evmgr=0x5555557afa20) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/evmgr.c:83
----> gleich zu helloworld-API!

__GI___readv (fd=9, iov=0x7fffffffc110, iovcnt=1) at ../sysdeps/unix/sysv/linux/readv.c:26
---> rc als returnwert gibt wie oben 2
aws_readv (ws=0x5555557d02f0, iov=0x7fffffffc110, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:405
read_header (ws=ws@entry=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:277
websock_dispatch (ws=0x5555557d0330, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:315
read_header (ws=ws@entry=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
websock_dispatch (ws=0x5555557d0330, loop=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:354
aws_on_text (ws=0x5555557d02f0, last=1, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:513
aws_continue (ws=0x5555557d02f0, last=1, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:494
aws_read (size=35, ws=0x5555557d02f0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:437
aws_read (ws=0x5555557d02f0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:431
aws_read (ws=0x5555557d02f0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:439
poll (__timeout=<optimized out>, __nfds=<optimized out>, __fds=<optimized out>) at /usr/include/x86_64-linux-gnu/bits/poll2.h:46
aws_read (ws=0x5555557d02f0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:442
websock_read (ws=0x5555557d0330, buffer=0x5555557cf930, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:523
ws_read (buffer_size=<optimized out>, buffer=<optimized out>, ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:90
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>)
ws_read (buffer_size=35, buffer=0x5555557cf930, ws=0x5555557d0330) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:91

-----------> endlosschleife endet immer bei aws_read2

die funktion aws_pick_buffer erreicht motalk nie, als letztes davor aber noch aws_continue (ws=0x5555557d02f0, last=1, size=35) 


---> Knackpunkt irgendwo um aws_pick_buffer und aws_continue
Helloworld-API:
wsj1_on_text (wsj1=0x5555557cfdf0, text=0x5555557cf930 "[2,\"999999\",\"helloworld/ping\",true]", size=35)

Motalk-API:
wsj1_on_text (wsj1=0x5555557d2860, text=0x5555557d0b20 "[2,\"999999\",\"motalk/ping\",true]\201#[2", size=35)

neuer Test mit API "motalk2021" ----> erfolgreich !!!  Lag an Zeichenlänge der API


to do:  - informieren wie Sounds/Aufnahmen abgespielt und aufgenommen werden können, evtl über binding oder QML ?
	- bluetooth interface testen

24.9.:
für Test:
1.) starte qtcreator mit Befehl qtcreator& und merged_QML_input_test ausführen.
2.) für MItschnitt 'sudo tcpdump -XX -i lo src port 1234 or dst port 1234'
3.) in terminal starten: gast@gast-pc:~/Schreibtisch/agl_microservice/app_self_QML_srvc$ afb-daemon --verbose --binding ./motalk_binding.so --port 1234 --token 123456


---> wenn ich etwas an motalk_binding sende, sehe ich nur hochzählen des COunters aber keine Buchstabenausgabe oder so

nach connect folgende Nachricht:
16:04:34.498127 IP localhost.43714 > localhost.1234: Flags [P.], seq 229:266, ack 207, win 512, options [nop,nop,TS val 4272843912 ecr 4272839920], length 37
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0059 0d46 4000 4006 2f57 7f00 0001 7f00  .Y.F@.@./W......
	0x0020:  0001 aac2 04d2 4938 1135 fa64 dcae 8018  ......I8.5.d....
	0x0030:  0200 fe4d 0000 0101 080a feae 6c88 feae  ...M........l...
	0x0040:  5cf0 8123 5b32 2c22 3939 3939 3939 222c  \..#[2,"999999",
	0x0050:  226d 6f74 616c 6b32 3032 312f 7069 6e67  "motalk2021/ping
	0x0060:  222c 7472 7565 5d                        ",true]
16:04:34.498283 IP localhost.1234 > localhost.43714: Flags [P.], seq 207:311, ack 266, win 512, options [nop,nop,TS val 4272843912 ecr 4272843912], length 104
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  009c ba54 4000 4006 8205 7f00 0001 7f00  ...T@.@.........
	0x0020:  0001 04d2 aac2 fa64 dcae 4938 115a 8018  .......d..I8.Z..
	0x0030:  0200 fe90 0000 0101 080a feae 6c88 feae  ............l...
	0x0040:  6c88 8166 5b33 2c22 3939 3939 3939 222c  l..f[3,"999999",
	0x0050:  7b22 7265 7370 6f6e 7365 223a 302c 226a  {"response":0,"j
	0x0060:  7479 7065 223a 2261 6662 2d72 6570 6c79  type":"afb-reply
	0x0070:  222c 2272 6571 7565 7374 223a 7b22 7374  ","request":{"st
	0x0080:  6174 7573 223a 2273 7563 6365 7373 222c  atus":"success",
	0x0090:  2269 6e66 6f22 3a22 5069 6e67 2063 6f75  "info":"Ping.cou
	0x00a0:  6e74 203d 2030 227d 7d5d                 nt.=.0"}}]

---> Die QT-Anwendung ist auf Port 43714 und sendet [2,"999999","motalk2021/ping",true] und afbdaemon/motalk_binding hört auf Port 1234 und antwortet 
     [3,"999999",{"response":0,"jtype":"afb-reply","request":{"status":"success","info":"Ping.count.=.0"}}]

	[2 (= Call) | "999999" (= ID) | "motalk2021/ping" (= procedure name in form api/verb) | true (=argument to pass to the call)] 
	
	Bereits in motalk_binding.c "afb_req_success_f(req, json_object_new_int(ping_count), "Ping count = 1860 + %d", ping_count)" ist der Formatstring zur Rückantwort mitgegeben


aus motalk_binding:					afb_req_success_f(req, json_object_new_int(ping_count), "Ping count = %d", ping_count);
aus afb-binding-predefs.h mit binding Version 3:	#define afb_req_success_f(r,o,...)	afb_req_reply_f(r,o,0,__VA_ARGS__) 
--> afb_req_reply_f: Same as 'afb_req_reply' but the 'info' is a formatting string followed by arguments.
 *
 * For convenience, the function calls 'json_object_put' for 'obj'.
 * Thus, in the case where 'obj' should remain available after
 * the function returns, the function 'json_object_get' shall be used.
 *
 * @param req the request
 * @param obj the replied object or NULL
 * @param error the error message if it is a reply error or NULL
 * @param info an informative text containing a format as for printf
 * @param ... the arguments to the format as for printf

build binding:
gast@gast-pc:~/Schreibtisch/agl_microservice$ source sdk/environment-setup-corei7-64-agl-linux 
gast@gast-pc:~/Schreibtisch/agl_microservice$ export LIBRARY_PATH=/home/gast/local/lib/pkgconfig:/home/gast/local/lib:$LIBRARY_PATH
gast@gast-pc:~/Schreibtisch/agl_microservice$ ldconfig
gast@gast-pc:~/Schreibtisch/agl_microservice$ cd app_self_QML_srvc
gast@gast-pc:~/Schreibtisch/agl_microservice/app_self_QML_srvc$ gcc -fPIC -shared -Wall -g3 motalk_binding.c -o motalk_binding.so $(pkg-config --cflags --libs afb-daemon libafbwsc) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include

next: App input parsen und ablegen unter Ordner /tmp, aber mit anderer API+Verb

27.9.
MERKE: API+verb muss genau 14 Zeichen lang sein, damit header-Size für Protokoll stimmt, so wie bei "motalk2021"+"ping"!!

Aufbau der JSON-Formats für calls spezifiziert in: protocol-x-afb-ws-json1.md  --> aber besser Lösung mit File-Speicherort weil damit Tonspuren in Zukunft wohl einfacher sind
als Argument den File-Speicherort mitsenden!

4.10.
next: Path-Name über binding-Argument senden, später Media-File über "binding-Argument" senden!
aktuell nur kommunikation möglich, wenn am Ende des Calls ein 'true' steht - warum ?

Argumente:
The function afb_req_value searches in the request req for argument name passed in the second argument. When argument name is not passed, afb_req_value returns NULL.
It is defined as a shortcut to call the function afb_req_get


argument-übergabe klappt nicht,  tcpdump zwischenschalten, danach debuggen


17:35:18.554348 IP localhost.41610 > localhost.1234: Flags [P.], seq 229:275, ack 207, win 512, options [nop,nop,TS val 2203301827 ecr 2203295076], length 46
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0062 b0a8 4000 4006 8beb 7f00 0001 7f00  .b..@.@.........
	0x0020:  0001 a28a 04d2 d03b deb6 412f a96d 8018  .......;..A/.m..
	0x0030:  0200 fe56 0000 0101 080a 8353 b7c3 8353  ...V.......S...S
	0x0040:  9d64 8123 5b32 2c22 3939 3939 3939 222c  .d.#[2,"999999",
	0x0050:  226d 6f74 616c 6b32 3032 312f 7265 7772  "motalk2021/rewr
	0x0060:  222c 7b22 696e 6465 7822 3a22 3622 7d5d  ",{"index":"6"}] 
17:35:18.554513 IP localhost.1234 > localhost.41610: Flags [P.], seq 207:211, ack 275, win 512, options [nop,nop,TS val 2203301827 ecr 2203301827], length 4
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0038 2a94 4000 4006 122a 7f00 0001 7f00  .8*.@.@..*......
	0x0020:  0001 04d2 a28a 412f a96d d03b dee4 8018  ......A/.m.;....
	0x0030:  0200 fe2c 0000 0101 080a 8353 b7c3 8353  ...,.......S...S
	0x0040:  b7c3 8802 03f0                           ......


---> keine Reaktion, also debuggen ob afb_req_value aufgerufen wird  ( gdb --args afb-daemon --binding ./motalk_reawi_binding.so --port 1234 --token '123456' )

Port 1234 ist der Server, also hier das binding.

funktion rewr wird in motalk_reawi_binding überhaupt nicht aufgerufen wenn argument Form {"index":"6"} statt true hat.  

Arguments:
For HTTP requests, this json object uses key names mapped on argument name. Values are either string for common arguments or object ie: { "file": "...", "path": "..." }
For WebSockets requests, returned directly the object as provided by the client.
In fact, for Websockets requests, the function afb_req_value can be seen as a shortcut to json_object_get_string(json_object_object_get(afb_req_json(req), name))
---> das json-Format könnte evtl falsch sein ?!
evtl mal bluetotth beispiel anschauen, ansonsten bleibt nur noch debuggen oder mit afb-client-demo testen:
gast@gast-pc:~/Schreibtisch/agl_microservice$ afb-client-demo ws://localhost:1234/api?token=123456
motalk2021 reawi
{"jtype":"afb-reply","request":{"status":"unknown-verb","info":"verb reawi unknown within api motalk2021"}}
motalk2021 rewr
{"jtype":"afb-reply","request":{"status":"not-replied"}}
motalk2021 rewr {"index":"3"}

Antwort:	NOTICE: [API motalk2021] ReadWrite binding test, (null)
		NOTICE: [API motalk2021] ReadWrite binding test, 3

11:34:29.885808 IP localhost.42314 > localhost.1234: Flags [P.], seq 229:281, ack 207, win 512, options [nop,nop,TS val 2226662732 ecr 2226631973], length 52
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0068 e5c9 4000 4006 56c4 7f00 0001 7f00  .h..@.@.V.......
	0x0020:  0001 a54a 04d2 3cba d8d9 b08e b737 8018  ...J..<......7..
	0x0030:  0200 fe5c 0000 0101 080a 84b8 2d4c 84b7  ...\........-L..
	0x0040:  b525 8132 5b32 2c22 3939 3939 3939 222c  .%.2[2,"999999",
	0x0050:  226d 6f74 616c 6b32 3032 312f 7265 7772  "motalk2021/rewr
	0x0060:  222c 7b22 696e 6465 7822 3a22 626c 7562  ",{"index":"blub
	0x0070:  6265 7222 7d5d                           ber"}]
11:34:29.886015 IP localhost.1234 > localhost.42314: Flags [P.], seq 207:278, ack 281, win 512, options [nop,nop,TS val 2226662732 ecr 2226662732], length 71
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  007b 5129 4000 4006 eb51 7f00 0001 7f00  .{Q)@.@..Q......
	0x0020:  0001 04d2 a54a b08e b737 3cba d90d 8018  .....J...7<.....
	0x0030:  0200 fe6f 0000 0101 080a 84b8 2d4c 84b8  ...o........-L..
	0x0040:  2d4c 8145 5b34 2c22 3939 3939 3939 222c  -L.E[4,"999999",
	0x0050:  7b22 6a74 7970 6522 3a22 6166 622d 7265  {"jtype":"afb-re
	0x0060:  706c 7922 2c22 7265 7175 6573 7422 3a7b  ply","request":{
	0x0070:  2273 7461 7475 7322 3a22 6e6f 742d 7265  "status":"not-re
	0x0080:  706c 6965 6422 7d7d 5d                   plied"}}]

mit QT geht es nicht, mit afb-client-demo schon ?!
12:08:12.949871 IP localhost.42346 > localhost.1234: Flags [P.], seq 229:281, ack 207, win 512, options [nop,nop,TS val 2228685757 ecr 2228683247], length 52
	0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.
	0x0010:  0068 c215 4000 4006 7a78 7f00 0001 7f00  .h..@.@.zx......
	0x0020:  0001 a56a 04d2 16fc 47ee 7eed dd30 8018  ...j....G.~..0..
	0x0030:  0200 fe5c 0000 0101 080a 84d7 0bbd 84d7  ...\............
	0x0040:  01ef 8123 5b32 2c22 3939 3939 3939 222c  ...#[2,"999999",
	0x0050:  226d 6f74 616c 6b32 3032 312f 7265 7772  "motalk2021/rewr
	0x0060:  222c 7b22 696e 6465 7822 3a22 626c 7562  ",{"index":"blub
	0x0070:  6265 7222 7d5d                           ber"}]


---> debuggen
Nachrichten kommen an mit funktion: 
einfach mal beginnen mit ws_read bei afb-client-demo.
b ws_read
#0  read_header (ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
#1  0x00005555555930fb in websock_dispatch (ws=0x5555557d6c00, loop=loop@entry=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:313
#2  0x0000555555591fe8 in aws_on_readable (ws=0x5555557d6bc0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:421
#3  fdevcb (ws=0x5555557d6bc0, revents=<optimized out>, fdev=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:138
#4  0x0000555555585f4e in handler (s=<optimized out>, fd=<optimized out>, revents=<optimized out>, userdata=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/fdev-systemd.c:29
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6c24, ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
(gdb) p *ws
$1 = {state = 1, maxlength = 1048500, lenhead = 0, szhead = 2, length = 0, mask = 0, header = '\000' <repeats 13 times>, itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d6bc0}
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
read_header (ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:276
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6c24, ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
ws_readv (ws=0x5555557d6c00, ws=0x5555557d6c00, iovcnt=1, iov=0x7fffffffc190) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
aws_readv (ws=0x5555557d6bc0, iov=0x7fffffffc190, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
(gdb) p rc
$6 = 2
read_header (ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:277
websock_dispatch (ws=0x5555557d6c00, loop=loop@entry=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:315
read_header (ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
websock_dispatch (ws=0x5555557d6c00, loop=loop@entry=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:354
aws_on_text (ws=0x5555557d6bc0, last=1, size=47) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:513
(gdb) p *ws
$7 = {fd = 9, state = waiting, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557cfa60, ws = 0x5555557d6c00, fdev = 0x5555557cf920, buffer = {buffer = 0x0, size = 0}}
(gdb) p *ws->itf
$9 = {on_close = 0x0, on_text = 0x555555584260 <wsj1_on_text>, on_binary = 0x0, on_error = 0x0, on_hangup = 0x555555584170 <wsj1_on_hangup>}
von state=waiting auf state=reading_text !!
(gdb) p *ws
$10 = {fd = 9, state = reading_text, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557cfa60, ws = 0x5555557d6c00, fdev = 0x5555557cf920, buffer = {buffer = 0x0, size = 0}}
aws_continue (ws=0x5555557d6bc0, last=1, size=47) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:494
aws_read (size=47, ws=0x5555557d6bc0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:437
websock_read (ws=0x5555557d6c00, buffer=0x5555557cf520, size=size@entry=47) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:523
(gdb) p *ws
$12 = {state = 3, maxlength = 1048500, lenhead = 2, szhead = 2, length = 47, mask = 0, header = "\201/", '\000' <repeats 11 times>, itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d6bc0}
(gdb) s

Breakpoint 2, websock_read (ws=0x5555557d6c00, buffer=0x5555557cf520, size=size@entry=47) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:532
ws_read (buffer_size=<optimized out>, buffer=<optimized out>, ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:90
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=1, iov=0x7fffffffc120) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
(gdb) s
aws_readv (ws=0x5555557d6bc0, iov=0x7fffffffc120, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
aws_readv (ws=0x5555557d6bc0, iov=0x7fffffffc120, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:405
(gdb) p rc
$14 = 47
websock_read (ws=0x5555557d6c00, buffer=0x5555557cf520, size=size@entry=47) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:533
(gdb) p *ws
$15 = {state = 3, maxlength = 1048500, lenhead = 2, szhead = 2, length = 47, mask = 0, header = "\201/", '\000' <repeats 11 times>, itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d6bc0}
aws_continue (ws=0x5555557d6bc0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:498
aws_pick_buffer (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:98
aws_continue (ws=0x5555557d6bc0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:501
aws_pick_buffer (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:98
wsj1_msg_scan (items=<optimized out>, text=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:235
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfa60, text=0x5555557cf520 "[2,\"999999\",\"motalk2021/rewr\",{\"index\":\"blob\"}]", size=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:309
wsj1_msg_parse_string (size=8, offset=3, text=0x5555557cf520 "[2,\"999999\",\"motalk2021/rewr\",{\"index\":\"blob\"}]")
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:287
wsj1_on_text (wsj1=0x5555557cfa60, text=<optimized out>, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:387
(gdb) s
aws_on_call_cb (closure=0x5555557d6d70, api=0x5555557cf52d "motalk2021", verb=0x5555557cf538 "rewr", msg=0x5555557cffa0)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws-json1.c:195
afb_wsj1_msg_token (msg=msg@entry=0x5555557cffa0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:508
aws_on_call_cb (closure=0x5555557d6d70, api=0x5555557cf52d "motalk2021", verb=0x5555557cf538 "rewr", msg=0x5555557cffa0)
afb_wsj1_msg_object_j (msg=msg@entry=0x5555557cffa0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:448
afb_xreq_process (xreq=0x5555557d0020, apiset=0x5555557cdc50) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-xreq.c:863


ws_read bei QT
Breakpoint 2, read_header (ws=ws@entry=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6c24, ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
read_header (ws=ws@entry=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:276
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6c24, ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
ws_readv (ws=0x5555557d6c00, ws=0x5555557d6c00, iovcnt=1, iov=0x7fffffffc190) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
read_header (ws=ws@entry=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:276
ws_read (buffer_size=<optimized out>, buffer=0x5555557d6c24, ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:275
aws_readv (ws=0x5555557d6bc0, iov=0x7fffffffc190, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
read_header (ws=ws@entry=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:277
websock_dispatch (ws=0x5555557d6c00, loop=loop@entry=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:315
read_header (ws=ws@entry=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:273
websock_dispatch (ws=0x5555557d6c00, loop=loop@entry=0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:354
aws_on_text (ws=0x5555557d6bc0, last=1, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:513
aws_continue (ws=0x5555557d6bc0, last=1, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:494
aws_read (size=35, ws=0x5555557d6bc0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:437
websock_read (ws=0x5555557d6c00, buffer=0x5555557cf5a0, size=size@entry=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:523

Breakpoint 2, websock_read (ws=0x5555557d6c00, buffer=0x5555557cf5a0, size=size@entry=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:532
ws_read (buffer_size=<optimized out>, buffer=<optimized out>, ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:90
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=<optimized out>, iov=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
ws_read (buffer_size=35, buffer=0x5555557cf5a0, ws=0x5555557d6c00) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:91
ws_readv (ws=<optimized out>, ws=<optimized out>, iovcnt=1, iov=0x7fffffffc120) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:84
aws_readv (ws=0x5555557d6bc0, iov=0x7fffffffc120, iovcnt=1) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:401
(gdb) p rc
$4 = 35
websock_read (ws=0x5555557d6c00, buffer=0x5555557cf5a0, size=size@entry=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/websock.c:533
(gdb) p *ws
$5 = {state = 3, maxlength = 1048500, lenhead = 2, szhead = 2, length = 35, mask = 0, header = "\201#", '\000' <repeats 11 times>, itf = 0x5555557adfa0 <aws_itf>, closure = 0x5555557d6bc0}
aws_read (ws=ws@entry=0x5555557d6bc0, size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:444
(gdb) p *ws
$6 = {fd = 9, state = reading_text, itf = 0x5555557ade80 <wsj1_itf>, closure = 0x5555557cfa60, ws = 0x5555557d6c00, fdev = 0x5555557cf920, buffer = {
    buffer = 0x5555557cf5a0 "[2,\"999999\",\"motalk2021/rewr\",{\"ind", size = 35}}

aws_continue (ws=0x5555557d6bc0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:498
aws_pick_buffer (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:98
aws_continue (ws=0x5555557d6bc0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:501
aws_pick_buffer (ws=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:98
value has been optimized out
aws_continue (ws=0x5555557d6bc0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:502
aws_pick_buffer (ws=0x5555557d6bc0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:99
aws_pick_buffer (ws=0x5555557d6bc0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:101
aws_continue (ws=0x5555557d6bc0, last=1, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:504
wsj1_on_text (wsj1=0x5555557cfa60, text=0x5555557cf5a0 "[2,\"999999\",\"motalk2021/rewr\",{\"ind", size=35) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:381
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfa60, text=0x5555557cf5a0 "[2,\"999999\",\"motalk2021/rewr\",{\"ind", size=<optimized out>)
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfa60, text=0x5555557cf5a0 "[2,\"999999\",\"motalk2021/rewr\",{\"ind", size=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:309
wsj1_msg_scan (items=<optimized out>, text=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:261
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfa60, text=0x5555557cf5a0 "[2,\"999999\",\"motalk2021/rewr\",{\"ind", size=<optimized out>)
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfa60, text=0x5555557cf5a0 "[2,\"999999\",\"motalk2021/rewr\",{\"ind", size=<optimized out>)
    at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:376
wsj1_msg_make (wsj1=wsj1@entry=0x5555557cfa60, text=<optimized out>, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:378
wsj1_on_text (wsj1=0x5555557cfa60, text=<optimized out>, size=<optimized out>) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-wsj1.c:387
afb_ws_close (ws=0x5555557d6bc0, code=1008, reason=0x0) at /home/gast/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder/src/afb-ws.c:221
-> das Argument wird abgeschnitten ! --> Buffer-Größe ändern und neu debuggen mit Breakpoint auf wsj1_on_text

--> nach Änderung auf AfbJson.append("\x81\x2F") passt die Länge jetzt. 

next: variabel anpassen er Länge in main.cpp  --> nur noch hex in string wandeln und als argument verknüpfen mit 0x81...
variables senden klappt nachdem ich jetzt arraysize zu QBytearray.append hinzugefügt habe, aber lange Antworten werden nicht angezeigt in App.
Höchstens blubber12 als value-Argumentlänge, bei "Index" als Key


wenn argument länger als möglich, folgendes Verhalten:

tcpSocket->bytesAvailable():  133  (quint16)sizeof(quint16):  2 

receive_dump before clear:  "HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nSec-WebSocket-Protocol: x-afb-ws-json1\r\nSec-WebSocket-Accept: f5I2h53hBsT5ES3EHhnxAJ2nqsw=\r\nConnection: Upgrade\r\nDate: Fri, 08 Oct 2021 14:57:05 GMT\r\n\r\n" 

receive_dump after clear:  "" 

receive_dump after tcp.append:  "\x81~\x00\x81[3,\"999999\",{\"response\":\"blubber1234\",\"jtype\":\"afb-reply\",\"request\":{\"status\":\"success\",\"info\":\"Gesendeter Index: blubber1234\"}}]" 

m_receivebuffer:  "" 


wenn kürzer:
tcpSocket->bytesAvailable():  127  (quint16)sizeof(quint16):  2 

receive_dump before clear:  "HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nSec-WebSocket-Protocol: x-afb-ws-json1\r\nSec-WebSocket-Accept: f5I2h53hBsT5ES3EHhnxAJ2nqsw=\r\nConnection: Upgrade\r\nDate: Fri, 08 Oct 2021 14:55:25 GMT\r\n\r\n" 

receive_dump after clear:  "" 

receive_dump after tcp.append:  "\x81}[3,\"999999\",{\"response\":\"blubber12\",\"jtype\":\"afb-reply\",\"request\":{\"status\":\"success\",\"info\":\"Gesendeter Index: blubber12\"}}]" 

m_receivebuffer:  "[3,\"999999\",{\"response\":\"blubber12\",\"jtype\":\"afb-reply\",\"request\":{\"status\":\"success\",\"info\":\"Gesendeter Index: blubber12\"}}]" 

tcpSocket->bytesAvailable():  0  (quint16)sizeof(quint16):  2 

m_receivebuffer:  "[3,\"999999\",{\"response\":\"blubber12\",\"jtype\":\"afb-reply\",\"request\":{\"status\":\"success\",\"info\":\"Gesendeter Index: blubber12\"}}]" 

---> mit QT debugger schrittweie funktion durchgehen, Fehler in m_receivebuffer = ((QString)receive_dump).remove(0,2);  evtl cast oder remove ?!

mit Änderung von remove klappt es, aber wird doppelt removed ?!

Websocket-Status connected anzeigen mit Flag (und grüner Ampel in APp ? ) und abfragen bei removing Json-Message,  
(Flag setzen nach Nachrichtenerhalt von 'Sec-WebSocket-Accept' = 0x 5365 632d 5765 6253 6f63 6b65 742d 4163 6365 7074) 

-->in motalk-binding den fall einbeziehen mit argument leer bzw. true --> OK,  senden von QStrings von motalk-App an motalk-binding klappt!
Idee: das Betriebssystem speichert Tonspur in Datei ab, motalk-App sendet binding einen QString mit Speicherort, binding leitet diese tonspur dann anderes Auto.

User-Tasteneingabe übernehmen und an Binding senden --> klappt

next:
App bauen und testen der Hardware, danach bluetooth-Programm durchlesen

alles in app3_self_qml gepackt, jetzt environment sourcen und "agl/autobuild pacakge" starten --> hat geklappt --> self_qml2.wgt
das erstelle des binary-files!

(widget-verpackung:  erst alles in passender Ordnerstruktur in Ordner package ablegen, und dann Befehl "wgtpkg-pack -f -o app_attempt4.wgt package/ --verbose" ausführen)

Analyse Aufbau 
self_hvac
---> app: source-Datei (main.cpp, translator.cpp), qml-Dateien, qrc-Datei, app.pro (qmake ruft diese Datei auf) und app.pri (wird inkludiert von app.pro) 
   --> images: alle Bild-Dateien außer icon.svg und images.qrc 
   (--> translations: .ts-Dateien zur Übersetzung in Japanisch/Französisch) 
---> autobuild:  build-file with target "package" and others
---> hvac.pro (project-file for qmake) 
---> package: config.xml (configuration file) , icon.svg, package.pro ( project-file for building wgt)

builden im Ordner ~/Schreibtisch/agl_microservice/app3_self_QML

ich habe von diesem Ordner einen Backup auf schreibtisch angefertigt und ersetze die Dateien jetzt mit neuem main.cc und QT-files


das Builden vom binary mit "agl/autobuild package" in app3_self_qml klappt nicht. Fehler analysieren oder notfalls autombuild neu erstellen

~/Schreibtisch/agl_microservice$ cat app3_self_QML/app/main.qrc 
<RCC>
    <qresource prefix="/">
        <file>main.qml</file>
        <file>background_frequency.jpg</file>
        <file>MoTalk_Key.qml</file>
        <file>images/Keyboard_Arrow.svg</file>
        <file>images/Keyboard_Back.svg</file>
        <file>images/Keyboard_Shift.svg</file>
        <file>images/Keyboard_Space.svg</file>
        <file>SingleKey.qml</file>
    </qresource>
</RCC>
 -------------> eigentlich brauche ich gar images/Keyboard... gar nicht, oder ? Ich versuchs einfach mal die zu löschen 
--> hat geklappt mit gast@gast-pc:~/Schreibtisch/agl_microservice/app3_self_QML$ ./autobuild/agl/autobuild package --debug

beim Build-Vorgang wird noch viel self_qml genannt -> zumindest namen umändern; die services und sockets tragen nicht zum build bei.
Wichtig ist project-File mit Endung .pro
afm-api-self_QML@.service  afm-api-self_QML@.socket  afm-service-agl-service-self_QML--1.0--main@%i.service spielen wohl keine Rolle beim Build


zum cross-compile für binding:
neue Konsole öffnen, environment sourcen und folgenden Befehl ausführen: gcc -fPIC -shared tuto-1.c -o tuto-1.so $(pkg-config --cflags-only-I afb-daemon) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include

App-Binary läuft nicht auf teststation, das .pro-File prüfen!!  Fehler bei @$(QMAKE) -o Makefile ../motalk.pro CONFIG+=release ?! CONFIG+=CXX ?
---> https://medium.com/nerd-for-tech/cross-compiling-a-sample-application-using-automotive-grade-linux-d432effb297c
 
Cross-Compiler sollte passen:
gast@gast-pc:~/Schreibtisch/agl_microservice/app3_self_QML$ $CC --version
x86_64-agl-linux-gcc (GCC) 9.3.0

19.10. gegen 10:30  motalk-binary gebuildet ohne extra export path und ldconfig  --> läuft jetzt auf Testrechner, aber ein Fehler in Softwar main.qml Zeile 98 - cannot laod/assign property oder so
Test: app.pro noch hinzufügen unter CONFIG+= qmltypes

neu gbeuildet, next übertragen auf testrechner --> Fehler blieb. Als nächstes prüfen, ob alle qml-Files (SingleKey) auf dem neuesten Stand sind ?! --> SingleKey.qml wohl veraltet



bluetooth:
man bluetoothd
systemctl status bluetooth.service
sudo systemctl enable bluetooth
gast@gast-pc:~$ hcitool dev  --> veraltetet
neu: gast@gast-pc:~$ bluetoothctl

gast@gast-pc:~$ cat /etc/group | grep blue
bluetooth:x:113:
gast@gast-pc:~$ sudo usermod -G bluetooth -a gast
gast@gast-pc:~$ cat /etc/group | grep blue
bluetooth:x:113:gast

the command lsusb will not work if bluetooth device is using UART instead of USB (if it is part of a SOC). In this case only dmesg will work.

gast@gast-pc:~$ dmesg | grep -i blue
[  809.982977] Bluetooth: Core ver 2.22
[  809.983026] Bluetooth: HCI device and connection manager initialized
[  809.983029] Bluetooth: HCI socket layer initialized
[  809.983031] Bluetooth: L2CAP socket layer initialized
[  809.983034] Bluetooth: SCO socket layer initialized
[ 1014.945187] Bluetooth: BNEP (Ethernet Emulation) ver 1.3
[ 1014.945188] Bluetooth: BNEP filters: protocol multicast
[ 1014.945190] Bluetooth: BNEP socket layer initialized

rfcomm.conf.dpkg-remove: Einige Programme benötigen zur Kommunikation eine serielle Schnittstelle. Diese wird bei Bluetooth mit rfcomm zur Verfügung gestellt.

bluetoothd -d
D-Bus setup failed: Connection ":1.156" is not allowed to own the service "org.bluez" due to security policies in the configuration file
dbus.service:
Nov 01 15:27:51 gast-pc dbus-daemon[528]: [system] Failed to activate service 'org.bluez': timed out (service_start_timeout=25000ms)

bluetoothctl: No default controller available

This error may happen if the device is blocked by rfkill.

It might also happen with some intel cards (such as the 8260) to not be picked up correctly by the Bluetooth service. In some cases, using the deprecated bluez-utils-compatAUR in lieu of bluez-utils have reportedly fixed the issue.

This might also be caused by power saving measures, in which case adding the kernel parameter btusb.enable_autosuspend=n is a potential solution. See also Red Hat Bugzilla – Bug 1573562. 

journalctl:
Nov 01 15:43:52 gast-pc bluetoothd[4134]: Bluetooth daemon 5.48
Nov 01 15:43:52 gast-pc bluetoothd[4134]: src/main.c:parse_config() parsing /etc/bluetooth/main.conf
Nov 01 15:43:52 gast-pc bluetoothd[4134]: src/main.c:parse_config() Key file does not have key “DiscoverableTimeout” in group “General”
Nov 01 15:43:52 gast-pc bluetoothd[4134]: src/main.c:parse_config() Key file does not have key “PairableTimeout” in group “General”
Nov 01 15:43:52 gast-pc bluetoothd[4134]: src/main.c:parse_config() Key file does not have key “Privacy” in group “General”
Nov 01 15:43:52 gast-pc bluetoothd[4134]: src/main.c:parse_config() Key file does not have key “Name” in group “General”
Nov 01 15:43:52 gast-pc bluetoothd[4134]: src/main.c:parse_config() Key file does not have key “Class” in group “General”
Nov 01 15:43:52 gast-pc bluetoothd[4134]: src/main.c:parse_config() Key file does not have key “DeviceID” in group “General”
Nov 01 15:43:52 gast-pc bluetoothd[4134]: src/main.c:parse_config() Key file does not have key “ReverseServiceDiscovery” in group “General”
Nov 01 15:43:52 gast-pc bluetoothd[4134]: Unable to get on D-Bus

---> gast@gast-pc:~$ sudo nano /etc/bluetooth/main.conf   ausommentiertes einkommentiert

jetzt klappt immerhin: gast@gast-pc:~$ sudo systemctl enable bluetooth.service
Synchronizing state of bluetooth.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable bluetooth
gast@gast-pc:~$ sudo systemctl start bluetooth.service
gast@gast-pc:~$ bluetoothctl show
Agent registered
[bluetooth]# show
No default controller available

Unable to get on D-Bus
dbus-daemon[528]: [system] Rejected send message, 1 matched rules; type="error", sender=":1.81" (uid=1000 pid=2049 comm="/usr/bin/pulseaudio --start --log-target=syslog " label="unconfined") interface="(unset)" member="(unset)" error name="org.freedesktop.DBus.Error.UnknownMethod" requested_reply="0" destination=":1.174" (uid=0 pid=8213 comm="/usr/lib/bluetooth/bluetoothd " label="unconfined")

gast@gast-pc:~$ bluetoothd -d
D-Bus setup failed: Connection ":1.192" is not allowed to own the service "org.bluez" due to security policies in the configuration file
gast@gast-pc:~$ sudo bluetoothd -d
D-Bus setup failed: Name already in use

gast@gast-pc:~$ rfkill list
gast@gast-pc:~$ rfkill block bluetooth
gast@gast-pc:~$ rfkill list
gast@gast-pc:~$ sudo systemctl stop bluetooth
gast@gast-pc:~$ sudo bluetoothd -d

Bluetooth kann nur funktionieren, wenn Sie einen entsprechenden Adapter haben und für diesen Treiber installiert sind.
Wenn dies auch bei angeschlossenen Adapter nicht funktioniert, bedeutet es, wir müssen herausfinden was für ein Modell sie verwenden und viel wichtiger welcher Chip verbaut ist.


Bluetooth anscheinend verbaut laut SINA, schauen ob es auf windows klappt, ansonsten mal Test-PC ausprobieren  --> Bluetooth als Hotplug nicht für Testsitzung zuweisbar !

Erstmal Bluetooth-Service einbinden, selber anpassen dürfte sehr kompliziert werden, darum erstmal komplette App lauffähig bekommen 

Fehler:
onClicked@qrc:SingleKey.qml:213
Passing incompatible arguments to C++ function from JavaScript is dangerous and deprecated. This will throw a JavaScript Type error in future releases of QT.

Dieser Fehler kommt aber nur bei den Keys vor, nicht bei Buttons wie Send, Connect, oder DEL

in SingleKey.qml:
    property alias _t: _keyt.text
    signal click_t(QtObject _t)

um 213:
        MoTalk_Key{
            id: _keyt
            text: 't'
            onClicked: _key_row.click_t(_key_row._t)
        }

in main.qml:
            onClick_t:  _textfield.text += _singlekey._t

----> Wahrscheinlich macht click_t(QtObject _t) Probleme!   --> aber Fehler ignorieren, nicht genug Infos online zu finden und klappt ja trotzdem.


Bluetooth testen:
zuerst das binding builden, wie früher motalk_binding.so, und dann testen mit afb-demo-client.

gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ export LIBRARY_PATH=/home/gast/local/lib/pkgconfig:/home/gast/local/lib:$LIBRARY_PATH; ldconfig
gast@gast-pc:~/Schreibtisch/agl_microservice/bluetooth_motalk/binding$ gcc -fPIC -shared -Wall -g3 bluetooth-api.c -o motalk_bluetooth.so $(pkg-config --cflags --libs afb-daemon libafbwsc) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/glib-2.0 -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/glib-2.0/include

ausführen: gast@gast-pc:~/Schreibtisch/agl_microservice/bluetooth_motalk/binding$ afb-daemon --verbose --no-httpd --binding ./motalk_bluetooth.so

--> aktuell läuft abgespeckte Version, jetzt Schritt für Schritt Sachen hinzufügen
<<
(glib: Its main contents are :
1) C library described in ANSI,c99,c11 standards. It includes macros, symbols, function implementations etc.(printf(),malloc() etc)
2) POSIX standard library. The "userland" glue of system calls. (open(),read() etc. Actually glibc does not "implement" system calls. kernel does it. But glibc provides the user land interface to the services provided by kernel so that user application can use a system call just like a ordinary function. )

GCond,Gmutex usw. ist thread_handling:
Threads act almost like processes, but unlike processes all threads of one process share the same memory. This is good, as it provides easy communication between the involved threads via this shared memory, and it is bad, because strange things (so called "Heisenbugs") might happen if the program is not carefully designed. In particular, due to the concurrent nature of threads, no assumptions on the order of execution of code running in different threads can be made, unless order is explicitly forced by the programmer through synchronization primitives. 
>>

not loadable - undefined symbol sehr wahrscheinlich ein Fehler mit Version von glib. --> Absolutely: libraries should be listed after the object files, not before. Having said that, it is curious that the program linked but failed to run, rather than failing to link

compile:

gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ export LIBRARY_PATH=/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib:/home/gast/local/lib/pkgconfig:/home/gast/local/lib:$LIBRARY_PATH; ldconfig

gcc -v -fPIC -shared -Wall -g3 -O3 bluetooth-api.c -o motalk_bluetooth.so -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/glib-2.0 -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/glib-2.0/include $(pkg-config --cflags --libs afb-daemon libafbwsc glib-2.0) -o motalk_bluetooth.so

gcc -v -fPIC -shared -Wall -g3 -O3 bluetooth-api.c -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/glib-2.0 -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/glib-2.0/include $(pkg-config --cflags --libs afb-daemon libafbwsc) -L/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/lib -L/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib -lglib-2.0 -o motalk_bluetooth.so


ich habe viele glib-Libraries:
./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so.0
./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so
./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so.0.6200.6
./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/lib/libglib-2.0.so.0
./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/x86_64-aglsdk-linux/usr/lib/libglib-2.0.so.0.6200.6

./usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
./usr/lib/x86_64-linux-gnu/libglib-2.0.so
./usr/lib/x86_64-linux-gnu/libglib-2.0.so.0.5600.4
./usr/lib/x86_64-linux-gnu/libglib-2.0.a


gast@gast-pc:/$ ls -il ./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so*
2233929 lrwxrwxrwx 1 gast gast      16 Dez  7  2020 ./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so -> libglib-2.0.so.0
2235053 lrwxrwxrwx 1 gast gast      23 Dez  7  2020 ./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so.0 -> libglib-2.0.so.0.6200.6
2235886 -rwxr-xr-x 1 gast gast 1191192 Dez  7  2020 ./home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so.0.6200.6
gast@gast-pc:/$ ls -il ./usr/lib/x86_64-linux-gnu/libglib-2.0.so*
5782721 lrwxrwxrwx 1 root root      23 Mär 12  2021 ./usr/lib/x86_64-linux-gnu/libglib-2.0.so -> libglib-2.0.so.0.5600.4
5771765 lrwxrwxrwx 1 root root      23 Mär 12  2021 ./usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 -> libglib-2.0.so.0.5600.4
5771753 -rw-r--r-- 1 root root 1137968 Mär 12  2021 ./usr/lib/x86_64-linux-gnu/libglib-2.0.so.0.5600.4

---> wie vermutet verschiedene Versionen!!  
Aber welche Version verwende ich? --> aus untenstehendem Befehl erhalte ich 2.56.4, also /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0.5600.4 ist die richtige, und agl zu neu ?!
--> update von /usr/lib auf glib2.0-62.6 ?

gast@gast-pc:/$ apt list --installed | grep libglib
libglib2.0-0/bionic-updates,bionic-security,now 2.56.4-0ubuntu0.18.04.8 amd64  [installiert]

gast@gast-pc:/$ sudo apt-cache policy libglib2.0-0
libglib2.0-0:
  Installiert:           2.56.4-0ubuntu0.18.04.8
  Installationskandidat: 2.56.4-0ubuntu0.18.04.8
  Versionstabelle:
 *** 2.56.4-0ubuntu0.18.04.8 500
        500 http://de.archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages
        500 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages
        100 /var/lib/dpkg/status
     2.56.1-2ubuntu1 500
        500 http://de.archive.ubuntu.com/ubuntu bionic/main amd64 Packages

Ich kann keine neuere Version für libglib installieren, also muss das Paket unter agl_microservice wohl zu neu sein.

Fehler gefunden:
gast@gast-pc:/usr/include/glib-2.0$ grep -r g_atomic_rc_box_acquire    --> leer, g_atomic_rc_box_acqure fehlt

gast@gast-pc:~/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/glib-2.0$ grep -r g_atomic_rc_box_acquire
glib/grcbox.h:gpointer        g_atomic_rc_box_acquire         (gpointer        mem_block);
glib/grcbox.h:# define g_atomic_rc_box_acquire(mem_block) \
glib/grcbox.h:  ((__typeof__(mem_block)) (g_atomic_rc_box_acquire) (mem_block))

Fehler beheben: beim Compile die lib unter agl_microservices einbinden!

gast@gast-pc:~/Schreibtisch/agl_microservice/afb-daemon/app-framework-binder$ export LIBRARY_PATH=/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib:/home/gast/local/lib/pkgconfig:/home/gast/local/lib:$LIBRARY_PATH; ldconfig

libglib-2.0.so = shared object *.so

gcc -L / -l option flags

gcc -l links with a library file.

gcc -L looks in directory for library files.
Syntax

$ gcc [options] [source files] [object files] [-Ldir] -llibname [-o outfile]


gcc -v -fPIC -shared -Wall -g3 -O3 bluetooth-api.c -o motalk_bluetooth.so -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include $(pkg-config --cflags --libs afb-daemon libafbwsc glib-2.0)

--> 
gcc -v -fPIC -shared -Wall -g3 -O3 bluetooth-api.c -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/glib-2.0 -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/glib-2.0/include -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include -L/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/lib -L/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib -lafbwsc -lglib-2.0 -o motalk_bluetooth.so


--> binutils installieren um Fehler zu behebn ? 
< GNU Binutils sind binary tools wie zB ld (= GNU linker) und as (=GNU assembler) 
		gast@gast-pc:~/Schreibtisch/agl_microservice/bluetooth_motalk/binding$ dpkg -l | grep binutils
		ii  binutils                                   2.30-21ubuntu1~18.04.7                           amd64        GNU assembler, linker and binary utilities
>

versuch:
builden so wie früher, dass compilation klappt und ausführugn nciht. Dann glib neu verlinken oder kopieren

build ist möglich mit:
neues Terminal
source sdk/
gast@gast-pc:~/Schreibtisch/agl_microservice/bluetooth_motalk/binding$ export LIBRARY_PATH=/home/gast/local/lib/pkgconfig:/home/gast/local/lib:$LIBRARY_PATH; ldconfig

gcc -v -fPIC -shared -Wall -g3 -O3 bluetooth-api.c -o bluetooth_binding.so $(pkg-config --cflags --libs afb-daemon libafbwsc) -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/glib-2.0/include -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include -I/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/include/glib-2.0 -lglib-2.0

---> Kompilieren hat geklappt!

gast@gast-pc:~/Schreibtisch/agl_microservice/bluetooth_motalk/binding$ afb-daemon --verbose --no-httpd --binding ./bluetooth_binding.so 

------------------------
(neuer Versuch, glib Files kopieren 

und umlinken
/home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so.0.6200.6

ln -sf /usr/lib/x86_64-linux-gnu/libglib-2.0.so /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so.0.6200.6
ln -sf /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0 /home/gast/Schreibtisch/agl_microservice/sdk/sysroots/corei7-64-agl-linux/usr/lib/libglib-2.0.so.0.6200.6

Fehler, datei verschwunden ?!

Es gibt keinen Befehl der gcc verbietet eine Path zu durchsuchen. Evtl versuchen mit copy-paste Fehler zu beheben. 
Es fehlt die Datei libglib.a in agl/sysroots

< 
.so files are dynamic libraries. The suffix stands for "shared object", because all the applications that are linked with the library use the same file, rather than making a copy in the resulting executable.

.a files are static libraries. The suffix stands for "archive", because they're actually just an archive (made with the ar command -- a predecessor of tar that's now just used for making libraries) of the original .o object files.
>

library selbst builden: https://download.gnome.org/sources/glib/2.6/
---> glib .a datei gleich lassen aber die anderen .so hikopieren.  Backup von glib auf Schreibtisch kopieren!
